/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 577:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*!
**  Pure-UUID -- Pure JavaScript Based Universally Unique Identifier (UUID)
**  Copyright (c) 2004-2023 Dr. Ralf S. Engelschall <rse@engelschall.com>
**
**  Permission is hereby granted, free of charge, to any person obtaining
**  a copy of this software and associated documentation files (the
**  "Software"), to deal in the Software without restriction, including
**  without limitation the rights to use, copy, modify, merge, publish,
**  distribute, sublicense, and/or sell copies of the Software, and to
**  permit persons to whom the Software is furnished to do so, subject to
**  the following conditions:
**
**  The above copyright notice and this permission notice shall be included
**  in all copies or substantial portions of the Software.
**
**  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*  Universal Module Definition (UMD)  */
(function (root, name, factory) {
    /* global define: false */
    if (true)
        /*  AMD environment  */
        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return factory(root); }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    else {}
}(this, "UUID", function (/* root */) {
    /*  array to hex-string conversion  */
    var a2hs = function (bytes, begin, end, uppercase, str, pos) {
        var mkNum = function (num, uppercase) {
            var base16 = num.toString(16);
            if (base16.length < 2)
                base16 = "0" + base16;
            if (uppercase)
                base16 = base16.toUpperCase();
            return base16;
        };
        for (var i = begin; i <= end; i++)
            str[pos++] = mkNum(bytes[i], uppercase);
        return str;
    };

    /*  hex-string to array conversion  */
    var hs2a = function (str, begin, end, bytes, pos) {
        for (var i = begin; i <= end; i += 2)
            bytes[pos++] = parseInt(str.substr(i, 2), 16);
    };

    /*  This library provides Z85: ZeroMQ's Base-85 encoding/decoding
        (see http://rfc.zeromq.org/spec:32 for details)  */

    var z85_encoder = (
        "0123456789" +
         "abcdefghijklmnopqrstuvwxyz" +
         "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +
         ".-:+=^!/*?&<>()[]{}@%$#"
    ).split("");
    var z85_decoder = [
        0x00, 0x44, 0x00, 0x54, 0x53, 0x52, 0x48, 0x00,
        0x4B, 0x4C, 0x46, 0x41, 0x00, 0x3F, 0x3E, 0x45,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x40, 0x00, 0x49, 0x42, 0x4A, 0x47,
        0x51, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,
        0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
        0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
        0x3B, 0x3C, 0x3D, 0x4D, 0x00, 0x4E, 0x43, 0x00,
        0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
        0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
        0x21, 0x22, 0x23, 0x4F, 0x00, 0x50, 0x00, 0x00
    ];
    var z85_encode = function (data, size) {
        if ((size % 4) !== 0)
            throw new Error("z85_encode: invalid input length (multiple of 4 expected)");
        var str = "";
        var i = 0;
        var value = 0;
        while (i < size) {
            value = (value * 256) + data[i++];
            if ((i % 4) === 0) {
                var divisor = 85 * 85 * 85 * 85;
                while (divisor >= 1) {
                    var idx = Math.floor(value / divisor) % 85;
                    str += z85_encoder[idx];
                    divisor /= 85;
                }
                value = 0;
            }
        }
        return str;
    };
    var z85_decode = function (str, dest) {
        var l = str.length;
        if ((l % 5) !== 0)
            throw new Error("z85_decode: invalid input length (multiple of 5 expected)");
        if (typeof dest === "undefined")
            dest = new Array(l * 4 / 5);
        var i = 0;
        var j = 0;
        var value = 0;
        while (i < l) {
            var idx = str.charCodeAt(i++) - 32;
            if (idx < 0 || idx >= z85_decoder.length)
                break;
            value = (value * 85) + z85_decoder[idx];
            if ((i % 5) === 0) {
                var divisor = 256 * 256 * 256;
                while (divisor >= 1) {
                    dest[j++] = Math.trunc((value / divisor) % 256);
                    divisor /= 256;
                }
                value = 0;
            }
        }
        return dest;
    };

    /*  This library provides conversions between 8/16/32-bit character
        strings and 8/16/32-bit big/little-endian word arrays.  */

    /*  string to array conversion  */
    var s2a = function (s, _options) {
        /*  determine options  */
        var options = { ibits: 8, obits: 8, obigendian: true };
        for (var opt in _options)
            if (typeof options[opt] !== "undefined")
                options[opt] = _options[opt];

        /*  convert string to array  */
        var a = [];
        var i = 0;
        var c, C;
        var ck = 0;
        var w;
        var wk = 0;
        var sl = s.length;
        for (;;) {
            /*  fetch next octet from string  */
            if (ck === 0)
                C = s.charCodeAt(i++);
            c = (C >> (options.ibits - (ck + 8))) & 0xFF;
            ck = (ck + 8) % options.ibits;

            /*  place next word into array  */
            if (options.obigendian) {
                if (wk === 0) w  = (c <<  (options.obits - 8));
                else          w |= (c << ((options.obits - 8) - wk));
            }
            else {
                if (wk === 0) w  = c;
                else          w |= (c << wk);
            }
            wk = (wk + 8) % options.obits;
            if (wk === 0) {
                a.push(w);
                if (i >= sl)
                    break;
            }
        }
        return a;
    };

    /*  array to string conversion  */
    var a2s = function (a, _options) {
        /*  determine options  */
        var options = { ibits: 32, ibigendian: true };
        for (var opt in _options)
            if (typeof options[opt] !== "undefined")
                options[opt] = _options[opt];

        /* convert array to string */
        var s = "";
        var imask = 0xFFFFFFFF;
        if (options.ibits < 32)
            imask = (1 << options.ibits) - 1;
        var al = a.length;
        for (var i = 0; i < al; i++) {
            /* fetch next word from array */
            var w = a[i] & imask;

            /* place next octet into string */
            for (var j = 0; j < options.ibits; j += 8) {
                if (options.ibigendian)
                    s += String.fromCharCode((w >> ((options.ibits - 8) - j)) & 0xFF);
                else
                    s += String.fromCharCode((w >> j) & 0xFF);
            }
        }
        return s;
    };

    /*  this is just a really minimal UI64 functionality,
        just sufficient enough for the UUID v1 generator and PCG PRNG!  */

    /*  UI64 constants  */
    var UI64_DIGITS     = 8;    /* number of digits */
    var UI64_DIGIT_BITS = 8;    /* number of bits in a digit */
    var UI64_DIGIT_BASE = 256;  /* the numerical base of a digit */

    /*  convert between individual digits and the UI64 representation  */
    var ui64_d2i = function (d7, d6, d5, d4, d3, d2, d1, d0) {
        return [ d0, d1, d2, d3, d4, d5, d6, d7 ];
    };

    /*  the zero represented as an UI64  */
    var ui64_zero = function () {
        return ui64_d2i(0, 0, 0, 0, 0, 0, 0, 0);
    };

    /*  clone the UI64  */
    var ui64_clone = function (x) {
        return x.slice(0);
    };

    /*  convert between number and UI64 representation  */
    var ui64_n2i = function (n) {
        var ui64 = ui64_zero();
        for (var i = 0; i < UI64_DIGITS; i++) {
            ui64[i] = Math.floor(n % UI64_DIGIT_BASE);
            n /= UI64_DIGIT_BASE;
        }
        return ui64;
    };

    /*  convert between UI64 representation and number  */
    var ui64_i2n = function (x) {
        var n = 0;
        for (var i = UI64_DIGITS - 1; i >= 0; i--) {
            n *= UI64_DIGIT_BASE;
            n += x[i];
        }
        return Math.floor(n);
    };

    /*  add UI64 (y) to UI64 (x) and return overflow/carry as number  */
    var ui64_add = function (x, y) {
        var carry = 0;
        for (var i = 0; i < UI64_DIGITS; i++) {
            carry += x[i] + y[i];
            x[i]   = Math.floor(carry % UI64_DIGIT_BASE);
            carry  = Math.floor(carry / UI64_DIGIT_BASE);
        }
        return carry;
    };

    /*  multiply number (n) to UI64 (x) and return overflow/carry as number  */
    var ui64_muln = function (x, n) {
        var carry = 0;
        for (var i = 0; i < UI64_DIGITS; i++) {
            carry += x[i] * n;
            x[i]   = Math.floor(carry % UI64_DIGIT_BASE);
            carry  = Math.floor(carry / UI64_DIGIT_BASE);
        }
        return carry;
    };

    /*  multiply UI64 (y) to UI64 (x) and return overflow/carry as UI64  */
    var ui64_mul = function (x, y) {
        var i, j;

        /*  clear temporary result buffer zx  */
        var zx = new Array(UI64_DIGITS + UI64_DIGITS);
        for (i = 0; i < (UI64_DIGITS + UI64_DIGITS); i++)
            zx[i] = 0;

        /*  perform multiplication operation  */
        var carry;
        for (i = 0; i < UI64_DIGITS; i++) {
            /*  calculate partial product and immediately add to zx  */
            carry = 0;
            for (j = 0; j < UI64_DIGITS; j++) {
                carry += (x[i] * y[j]) + zx[i + j];
                zx[i + j] = (carry % UI64_DIGIT_BASE);
                carry /= UI64_DIGIT_BASE;
            }

            /*  add carry to remaining digits in zx  */
            for ( ; j < UI64_DIGITS + UI64_DIGITS - i; j++) {
                carry += zx[i + j];
                zx[i + j] = (carry % UI64_DIGIT_BASE);
                carry /= UI64_DIGIT_BASE;
            }
        }

        /*  provide result by splitting zx into x and ov  */
        for (i = 0; i < UI64_DIGITS; i++)
            x[i] = zx[i];
        return zx.slice(UI64_DIGITS, UI64_DIGITS);
    };

    /*  AND operation: UI64 (x) &= UI64 (y)  */
    var ui64_and = function (x, y) {
        for (var i = 0; i < UI64_DIGITS; i++)
            x[i] &= y[i];
        return x;
    };

    /*  OR operation: UI64 (x) |= UI64 (y)  */
    var ui64_or = function (x, y) {
        for (var i = 0; i < UI64_DIGITS; i++)
            x[i] |= y[i];
        return x;
    };

    /*  rotate right UI64 (x) by a "s" bits and return overflow/carry as number  */
    var ui64_rorn = function (x, s) {
        var ov = ui64_zero();
        if ((s % UI64_DIGIT_BITS) !== 0)
            throw new Error("ui64_rorn: only bit rotations supported with a multiple of digit bits");
        var k = Math.floor(s / UI64_DIGIT_BITS);
        for (var i = 0; i < k; i++) {
            for (var j = UI64_DIGITS - 1 - 1; j >= 0; j--)
                ov[j + 1] = ov[j];
            ov[0] = x[0];
            for (j = 0; j < UI64_DIGITS - 1; j++)
                x[j] = x[j + 1];
            x[j] = 0;
        }
        return ui64_i2n(ov);
    };

    /*  rotate right UI64 (x) by a "s" bits and return overflow/carry as number  */
    var ui64_ror = function (x, s) {
        /*  sanity check shifting  */
        if (s > (UI64_DIGITS * UI64_DIGIT_BITS))
            throw new Error("ui64_ror: invalid number of bits to shift");

        /*  prepare temporary buffer zx  */
        var zx = new Array(UI64_DIGITS + UI64_DIGITS);
        var i;
        for (i = 0; i < UI64_DIGITS; i++) {
            zx[i + UI64_DIGITS] = x[i];
            zx[i] = 0;
        }

        /*  shift bits inside zx  */
        var k1 = Math.floor(s / UI64_DIGIT_BITS);
        var k2 = s % UI64_DIGIT_BITS;
        for (i = k1; i < UI64_DIGITS + UI64_DIGITS - 1; i++) {
            zx[i - k1] =
                ((zx[i] >>> k2) |
                 (zx[i + 1] << (UI64_DIGIT_BITS - k2))) &
                ((1 << UI64_DIGIT_BITS) - 1);
        }
        zx[UI64_DIGITS + UI64_DIGITS - 1 - k1] =
            (zx[UI64_DIGITS + UI64_DIGITS - 1] >>> k2) &
            ((1 << UI64_DIGIT_BITS) - 1);
        for (i = UI64_DIGITS + UI64_DIGITS - 1 - k1 + 1; i < UI64_DIGITS + UI64_DIGITS; i++)
            zx[i] = 0;

        /*  provide result by splitting zx into x and ov  */
        for (i = 0; i < UI64_DIGITS; i++)
            x[i] = zx[i + UI64_DIGITS];
        return zx.slice(0, UI64_DIGITS);
    };

    /*  rotate left UI64 (x) by a "s" bits and return overflow/carry as UI64  */
    var ui64_rol = function (x, s) {
        /*  sanity check shifting  */
        if (s > (UI64_DIGITS * UI64_DIGIT_BITS))
            throw new Error("ui64_rol: invalid number of bits to shift");

        /*  prepare temporary buffer zx  */
        var zx = new Array(UI64_DIGITS + UI64_DIGITS);
        var i;
        for (i = 0; i < UI64_DIGITS; i++) {
            zx[i + UI64_DIGITS] = 0;
            zx[i] = x[i];
        }

        /*  shift bits inside zx  */
        var k1 = Math.floor(s / UI64_DIGIT_BITS);
        var k2 = s % UI64_DIGIT_BITS;
        for (i = UI64_DIGITS - 1 - k1; i > 0; i--) {
            zx[i + k1] =
                ((zx[i] << k2) |
                 (zx[i - 1] >>> (UI64_DIGIT_BITS - k2))) &
                ((1 << UI64_DIGIT_BITS) - 1);
        }
        zx[0 + k1] = (zx[0] << k2) & ((1 << UI64_DIGIT_BITS) - 1);
        for (i = 0 + k1 - 1; i >= 0; i--)
            zx[i] = 0;

        /*  provide result by splitting zx into x and ov  */
        for (i = 0; i < UI64_DIGITS; i++)
            x[i] = zx[i];
        return zx.slice(UI64_DIGITS, UI64_DIGITS);
    };

    /*  XOR UI64 (y) onto UI64 (x) and return x  */
    var ui64_xor = function (x, y) {
        for (var i = 0; i < UI64_DIGITS; i++)
            x[i] ^= y[i];
    };

    /*  this is just a really minimal UI32 functionality,
        just sufficient enough for the MD5 and SHA1 digests!  */

    /*  safely add two integers (with wrapping at 2^32)  */
    var ui32_add = function (x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    };

    /*  bitwise rotate 32-bit number to the left  */
    var ui32_rol = function (num, cnt) {
        return (
            ((num <<        cnt ) & 0xFFFFFFFF) |
            ((num >>> (32 - cnt)) & 0xFFFFFFFF)
        );
    };

    /*  calculate the SHA-1 of an array of big-endian words, and a bit length  */
    var sha1_core = function (x, len) {
        /*  perform the appropriate triplet combination function for the current iteration  */
        function sha1_ft (t, b, c, d) {
            if (t < 20) return (b & c) | ((~b) & d);
            if (t < 40) return b ^ c ^ d;
            if (t < 60) return (b & c) | (b & d) | (c & d);
            return b ^ c ^ d;
        }

        /*  determine the appropriate additive constant for the current iteration  */
        function sha1_kt (t) {
            /* eslint indent: off */
            return (
                (t < 20) ?  1518500249 :
                (t < 40) ?  1859775393 :
                (t < 60) ? -1894007588 :
                            -899497514
            );
        }

        /*  append padding  */
        x[len >> 5] |= 0x80 << (24 - len % 32);
        x[((len + 64 >> 9) << 4) + 15] = len;

        var w = Array(80);
        var a =  1732584193;
        var b =  -271733879;
        var c = -1732584194;
        var d =   271733878;
        var e = -1009589776;

        for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;
            var olde = e;
            for (var j = 0; j < 80; j++) {
                if (j < 16)
                    w[j] = x[i + j];
                else
                    w[j] = ui32_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
                var t = ui32_add(
                    ui32_add(ui32_rol(a, 5), sha1_ft(j, b, c, d)),
                    ui32_add(ui32_add(e, w[j]), sha1_kt(j))
                );
                e = d;
                d = c;
                c = ui32_rol(b, 30);
                b = a;
                a = t;
            }
            a = ui32_add(a, olda);
            b = ui32_add(b, oldb);
            c = ui32_add(c, oldc);
            d = ui32_add(d, oldd);
            e = ui32_add(e, olde);
        }
        return [ a, b, c, d, e ];
    };

    /*  calculate the SHA-1 of an octet string  */
    var sha1 = function (s) {
        return a2s(
            sha1_core(
                s2a(s, { ibits: 8, obits: 32, obigendian: true }),
                s.length * 8),
            { ibits: 32, ibigendian: true });
    };

    /*  calculate the MD5 of an array of little-endian words, and a bit length  */
    var md5_core = function (x, len) {
        /*  basic operations the algorithm uses  */
        function md5_cmn (q, a, b, x, s, t) {
            return ui32_add(ui32_rol(ui32_add(ui32_add(a, q), ui32_add(x, t)), s), b);
        }
        function md5_ff (a, b, c, d, x, s, t) {
            return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
        }
        function md5_gg (a, b, c, d, x, s, t) {
            return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
        }
        function md5_hh (a, b, c, d, x, s, t) {
            return md5_cmn(b ^ c ^ d, a, b, x, s, t);
        }
        function md5_ii (a, b, c, d, x, s, t) {
            return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
        }

        /*  append padding  */
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        var a =  1732584193;
        var b =  -271733879;
        var c = -1732584194;
        var d =   271733878;

        for (var i = 0; i < x.length; i += 16) {
            var olda = a;
            var oldb = b;
            var oldc = c;
            var oldd = d;

            a = md5_ff(a, b, c, d, x[i+ 0],  7,  -680876936);
            d = md5_ff(d, a, b, c, x[i+ 1], 12,  -389564586);
            c = md5_ff(c, d, a, b, x[i+ 2], 17,   606105819);
            b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i+ 4],  7,  -176418897);
            d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
            c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i+ 7], 22,   -45705983);
            a = md5_ff(a, b, c, d, x[i+ 8],  7,  1770035416);
            d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i+10], 17,      -42063);
            b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i+12],  7,  1804603682);
            d = md5_ff(d, a, b, c, x[i+13], 12,   -40341101);
            c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

            a = md5_gg(a, b, c, d, x[i+ 1],  5,  -165796510);
            d = md5_gg(d, a, b, c, x[i+ 6],  9, -1069501632);
            c = md5_gg(c, d, a, b, x[i+11], 14,   643717713);
            b = md5_gg(b, c, d, a, x[i+ 0], 20,  -373897302);
            a = md5_gg(a, b, c, d, x[i+ 5],  5,  -701558691);
            d = md5_gg(d, a, b, c, x[i+10],  9,    38016083);
            c = md5_gg(c, d, a, b, x[i+15], 14,  -660478335);
            b = md5_gg(b, c, d, a, x[i+ 4], 20,  -405537848);
            a = md5_gg(a, b, c, d, x[i+ 9],  5,   568446438);
            d = md5_gg(d, a, b, c, x[i+14],  9, -1019803690);
            c = md5_gg(c, d, a, b, x[i+ 3], 14,  -187363961);
            b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
            a = md5_gg(a, b, c, d, x[i+13],  5, -1444681467);
            d = md5_gg(d, a, b, c, x[i+ 2],  9,   -51403784);
            c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
            b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

            a = md5_hh(a, b, c, d, x[i+ 5],  4,     -378558);
            d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
            b = md5_hh(b, c, d, a, x[i+14], 23,   -35309556);
            a = md5_hh(a, b, c, d, x[i+ 1],  4, -1530992060);
            d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
            c = md5_hh(c, d, a, b, x[i+ 7], 16,  -155497632);
            b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i+13],  4,   681279174);
            d = md5_hh(d, a, b, c, x[i+ 0], 11,  -358537222);
            c = md5_hh(c, d, a, b, x[i+ 3], 16,  -722521979);
            b = md5_hh(b, c, d, a, x[i+ 6], 23,    76029189);
            a = md5_hh(a, b, c, d, x[i+ 9],  4,  -640364487);
            d = md5_hh(d, a, b, c, x[i+12], 11,  -421815835);
            c = md5_hh(c, d, a, b, x[i+15], 16,   530742520);
            b = md5_hh(b, c, d, a, x[i+ 2], 23,  -995338651);

            a = md5_ii(a, b, c, d, x[i+ 0],  6,  -198630844);
            d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
            c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i+ 5], 21,   -57434055);
            a = md5_ii(a, b, c, d, x[i+12],  6,  1700485571);
            d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i+10], 15,    -1051523);
            b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i+ 8],  6,  1873313359);
            d = md5_ii(d, a, b, c, x[i+15], 10,   -30611744);
            c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
            a = md5_ii(a, b, c, d, x[i+ 4],  6,  -145523070);
            d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i+ 2], 15,   718787259);
            b = md5_ii(b, c, d, a, x[i+ 9], 21,  -343485551);

            a = ui32_add(a, olda);
            b = ui32_add(b, oldb);
            c = ui32_add(c, oldc);
            d = ui32_add(d, oldd);
        }
        return [ a, b, c, d ];
    };

    /*  calculate the MD5 of an octet string  */
    var md5 = function (s) {
        return a2s(
            md5_core(
                s2a(s, { ibits: 8, obits: 32, obigendian: false }),
                s.length * 8),
            { ibits: 32, ibigendian: false });
    };

    /*  PCG Pseudo-Random-Number-Generator (PRNG)
        http://www.pcg-random.org/pdf/hmc-cs-2014-0905.pdf
        This is the PCG-XSH-RR variant ("xorshift high (bits), random rotation"),
        based on 32-bit output, 64-bit internal state and the formulas:
        state = state * MUL + INC
        output = rotate32((state ^ (state >> 18)) >> 27, state >> 59)  */

    var PCG = function (seed) {
        /*  pre-load some "magic" constants  */
        this.mul   = ui64_d2i(0x58, 0x51, 0xf4, 0x2d, 0x4c, 0x95, 0x7f, 0x2d);
        this.inc   = ui64_d2i(0x14, 0x05, 0x7b, 0x7e, 0xf7, 0x67, 0x81, 0x4f);
        this.mask  = ui64_d2i(0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff);

        /*  generate an initial internal state  */
        this.state = ui64_clone(this.inc);
        this.next();
        ui64_and(this.state, this.mask);
        var arr;
        if (seed !== undefined)
            /*  external seeding  */
            seed = ui64_n2i(seed >>> 0);
        else if (typeof window === "object" &&
            typeof window.crypto === "object" &&
            typeof window.crypto.getRandomValues === "function") {
            /*  internal strong seeding with WebCrypto API (in browsers)  */
            arr = new Uint32Array(2);
            window.crypto.getRandomValues(arr);
            seed = ui64_or(ui64_n2i(arr[0] >>> 0), ui64_ror(ui64_n2i(arr[1] >>> 0), 32));
        }
        else if (typeof globalThis === "object" &&
            typeof globalThis.crypto === "object" &&
            typeof globalThis.crypto.getRandomValues === "function") {
            /*  internal strong seeding with WebCrypto API (in Node.js)  */
            arr = new Uint32Array(2);
            globalThis.crypto.getRandomValues(arr);
            seed = ui64_or(ui64_n2i(arr[0] >>> 0), ui64_ror(ui64_n2i(arr[1] >>> 0), 32));
        }
        else {
            /*  internal weak seeding with Math.random() and Date  */
            seed = ui64_n2i((Math.random() * 0xffffffff) >>> 0);
            ui64_or(seed, ui64_ror(ui64_n2i((new Date()).getTime()), 32));
        }
        ui64_or(this.state, seed);
        this.next();
    };
    PCG.prototype.next = function () {
        /*  save current state  */
        var state = ui64_clone(this.state);

        /*  advance internal state  */
        ui64_mul(this.state, this.mul);
        ui64_add(this.state, this.inc);

        /*  calculate: (state ^ (state >> 18)) >> 27  */
        var output = ui64_clone(state);
        ui64_ror(output, 18);
        ui64_xor(output, state);
        ui64_ror(output, 27);

        /*  calculate: state >> 59  */
        var rot = ui64_clone(state);
        ui64_ror(rot, 59);

        /*  calculate: rotate32(xorshifted, rot)  */
        ui64_and(output, this.mask);
        var k = ui64_i2n(rot);
        var output2 = ui64_clone(output);
        ui64_rol(output2, 32 - k);
        ui64_ror(output, k);
        ui64_xor(output, output2);

        /*  return pseudo-random number  */
        return ui64_i2n(output);
    };
    PCG.prototype.reseed = function (seed) {
        if (typeof seed !== "string")
            throw new Error("UUID: PCG: seed: invalid argument (string expected)");
        var arr = sha1_core(s2a(seed, { ibits: 8, obits: 32, obigendian: true }), seed.length * 8)
        for (var i = 0; i < arr.length; i++)
            ui64_xor(pcg.state, ui64_n2i((arr[i] >>> 0)));
    }
    var pcg = new PCG();
    PCG.reseed = function (seed) { pcg.reseed(seed) };

    /*  utility function: simple Pseudo Random Number Generator (PRNG)  */
    var prng = function (len, radix) {
        var bytes = [];
        for (var i = 0; i < len; i++)
            bytes[i] = (pcg.next() % radix);
        return bytes;
    };

    /*  internal state  */
    var time_last = 0;
    var time_seq  = 0;

    /*  the API constructor  */
    var UUID = function () {
        if (arguments.length === 1 && typeof arguments[0] === "string")
            this.parse.apply(this, arguments);
        else if (arguments.length >= 1 && typeof arguments[0] === "number")
            this.make.apply(this, arguments);
        else if (arguments.length >= 1)
            throw new Error("UUID: constructor: invalid arguments");
        else
            for (var i = 0; i < 16; i++)
                this[i] = 0x00;
    };

    /*  inherit from a standard class which provides the
        best UUID representation in the particular environment  */
    /* global Uint8Array: false */
    if (typeof Uint8Array !== "undefined")
        /*  HTML5 TypedArray (browser environments: IE10, FF, CH, SF, OP)
            (http://caniuse.com/#feat=typedarrays)  */
        UUID.prototype = new Uint8Array(16);
    else if (Buffer)
        /*  Node Buffer (server environments: Node.js, IO.js)  */
        UUID.prototype = Buffer.alloc(16);
    else
        /*  JavaScript (any environment)  */
        UUID.prototype = new Array(16);
    UUID.prototype.constructor = UUID;

    /*  API method: generate a particular UUID  */
    UUID.prototype.make = function (version) {
        var i;
        var uuid = this;
        if (version === 1) {
            /*  generate UUID version 1 (time and node based)  */

            /*  determine current time and time sequence counter  */
            var date = new Date();
            var time_now = date.getTime();
            if (time_now !== time_last)
                time_seq = 0;
            else
                time_seq++;
            time_last = time_now;

            /*  convert time to 100*nsec  */
            var t = ui64_n2i(time_now);
            ui64_muln(t, 1000 * 10);

            /*  adjust for offset between UUID and Unix Epoch time  */
            ui64_add(t, ui64_d2i(0x01, 0xB2, 0x1D, 0xD2, 0x13, 0x81, 0x40, 0x00));

            /*  compensate for low resolution system clock by adding
                the time/tick sequence counter  */
            if (time_seq > 0)
                ui64_add(t, ui64_n2i(time_seq));

            /*  store the 60 LSB of the time in the UUID  */
            var ov;
            ov = ui64_rorn(t, 8); uuid[3] = (ov & 0xFF);
            ov = ui64_rorn(t, 8); uuid[2] = (ov & 0xFF);
            ov = ui64_rorn(t, 8); uuid[1] = (ov & 0xFF);
            ov = ui64_rorn(t, 8); uuid[0] = (ov & 0xFF);
            ov = ui64_rorn(t, 8); uuid[5] = (ov & 0xFF);
            ov = ui64_rorn(t, 8); uuid[4] = (ov & 0xFF);
            ov = ui64_rorn(t, 8); uuid[7] = (ov & 0xFF);
            ov = ui64_rorn(t, 8); uuid[6] = (ov & 0x0F);

            /*  generate a random clock sequence  */
            var clock = prng(2, 255);
            uuid[8] = clock[0];
            uuid[9] = clock[1];

            /*  generate a random local multicast node address  */
            var node = prng(6, 255);
            node[0] |= 0x01;
            node[0] |= 0x02;
            for (i = 0; i < 6; i++)
                uuid[10 + i] = node[i];
        }
        else if (version === 4) {
            /*  generate UUID version 4 (random data based)  */
            var data = prng(16, 255);
            for (i = 0; i < 16; i++)
                 this[i] = data[i];
        }
        else if (version === 3 || version === 5) {
            /*  generate UUID version 3/5 (MD5/SHA-1 based)  */
            var input = "";
            var nsUUID = (
                typeof arguments[1] === "object" && arguments[1] instanceof UUID ?
                arguments[1] : new UUID().parse(arguments[1])
            );
            for (i = 0; i < 16; i++)
                 input += String.fromCharCode(nsUUID[i]);
            input += arguments[2];
            var s = version === 3 ? md5(input) : sha1(input);
            for (i = 0; i < 16; i++)
                 uuid[i] = s.charCodeAt(i);
        }
        else
            throw new Error("UUID: make: invalid version");

        /*  brand with particular UUID version  */
        uuid[6] &= 0x0F;
        uuid[6] |= (version << 4);

        /*  brand as UUID variant 2 (DCE 1.1)  */
        uuid[8] &= 0x3F;
        uuid[8] |= (0x02 << 6);

        return uuid;
    };

    /*  API method: format UUID into usual textual representation  */
    UUID.prototype.format = function (type) {
        var str, arr;
        if (type === "z85")
            str = z85_encode(this, 16);
        else if (type === "b16") {
            arr = Array(32);
            a2hs(this, 0, 15, true, arr, 0);
            str = arr.join("");
        }
        else if (type === undefined || type === "std") {
            arr = new Array(36);
            a2hs(this,  0,  3, false, arr,  0); arr[ 8] = "-";
            a2hs(this,  4,  5, false, arr,  9); arr[13] = "-";
            a2hs(this,  6,  7, false, arr, 14); arr[18] = "-";
            a2hs(this,  8,  9, false, arr, 19); arr[23] = "-";
            a2hs(this, 10, 15, false, arr, 24);
            str = arr.join("");
        }
        return str;
    };

    /*  API method: format UUID into usual textual representation  */
    UUID.prototype.toString = function (type) {
        return this.format(type);
    };

    /*  API method: overrides JSON serialization with usual text representation  */
    UUID.prototype.toJSON = function () {
        return this.format("std");
    };

    /*  API method: parse UUID from usual textual representation  */
    UUID.prototype.parse = function (str, type) {
        if (typeof str !== "string")
            throw new Error("UUID: parse: invalid argument (type string expected)");
        if (type === "z85")
            z85_decode(str, this);
        else if (type === "b16")
            hs2a(str, 0, 35, this, 0);
        else if (type === undefined || type === "std") {
            var map = {
                "nil":     "00000000-0000-0000-0000-000000000000",
                "ns:DNS":  "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
                "ns:URL":  "6ba7b811-9dad-11d1-80b4-00c04fd430c8",
                "ns:OID":  "6ba7b812-9dad-11d1-80b4-00c04fd430c8",
                "ns:X500": "6ba7b814-9dad-11d1-80b4-00c04fd430c8"
            };
            if (map[str] !== undefined)
                str = map[str];
            else if (!str.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/))
                throw new Error("UUID: parse: invalid string representation " +
                    "(expected \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\")");
            hs2a(str,  0,  7, this,  0);
            hs2a(str,  9, 12, this,  4);
            hs2a(str, 14, 17, this,  6);
            hs2a(str, 19, 22, this,  8);
            hs2a(str, 24, 35, this, 10);
        }
        return this;
    };

    /*  API method: export UUID into standard array of numbers  */
    UUID.prototype.export = function () {
        var arr = Array(16);
        for (var i = 0; i < 16; i++)
            arr[i] = this[i];
        return arr;
    };

    /*  API method: import UUID from standard array of numbers  */
    UUID.prototype.import = function (arr) {
        if (!(typeof arr === "object" && arr instanceof Array))
            throw new Error("UUID: import: invalid argument (type Array expected)");
        if (arr.length !== 16)
            throw new Error("UUID: import: invalid argument (Array of length 16 expected)");
        for (var i = 0; i < 16; i++) {
            if (typeof arr[i] !== "number")
                throw new Error("UUID: import: invalid array element #" + i +
                    " (type Number expected)");
            if (!(isFinite(arr[i]) && Math.floor(arr[i]) === arr[i]))
                throw new Error("UUID: import: invalid array element #" + i +
                    " (Number with integer value expected)");
            if (!(arr[i] >= 0 && arr[i] <= 255))
                throw new Error("UUID: import: invalid array element #" + i +
                    " (Number with integer value in range 0...255 expected)");
            this[i] = arr[i];
        }
        return this;
    };

    /*  API method: compare UUID against another one  */
    UUID.prototype.compare = function (other) {
        if (typeof other !== "object")
            throw new Error("UUID: compare: invalid argument (type UUID expected)");
        if (!(other instanceof UUID))
            throw new Error("UUID: compare: invalid argument (type UUID expected)");
        for (var i = 0; i < 16; i++) {
            if (this[i] < other[i])
                return -1;
            else if (this[i] > other[i])
                return +1;
        }
        return 0;
    };

    /*  API method: check whether UUID is equal another one  */
    UUID.prototype.equal = function (other) {
        return this.compare(other) === 0;
    };

    /*  API method: hash UUID by XOR-folding it k times  */
    UUID.prototype.fold = function (k) {
        if (typeof k === "undefined")
            throw new Error("UUID: fold: invalid argument (number of fold operations expected)");
        if (k < 1 || k > 4)
            throw new Error("UUID: fold: invalid argument (1-4 fold operations expected)");
        var n = 16 / Math.pow(2, k);
        var hash = new Array(n);
        for (var i = 0; i < n; i++) {
            var h = 0;
            for (var j = 0; i + j < 16; j += n)
                h ^= this[i + j];
            hash[i] = h;
        }
        return hash;
    };

    UUID.PCG = PCG;

    /*  export API  */
    return UUID;
}));



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

;// CONCATENATED MODULE: ../../npx/lib/client/index.ts
// @ts-ignore
var NPX = globalThis.NPX;
var Hud = NPX.Hud;
var Utils = NPX.Utils;
var Zones = NPX.Zones;
var Events = NPX.Events;
var Streaming = NPX.Streaming;
var Procedures = NPX.Procedures;
var Interface = NPX.Interface;
/* harmony default export */ const client = ((/* unused pure expression or super */ null && (NPX)));

;// CONCATENATED MODULE: ./src/shared/config.ts
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var GlobalConfig;
var TrackedModules = new Map();
var ResourceName = GetCurrentResourceName();
function InitConfig() {
    return _InitConfig.apply(this, arguments);
}
function _InitConfig() {
    _InitConfig = _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!!globalThis.exports["config"].IsConfigReady()) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        new Promise(function(r) {
                            return setTimeout(r, 100);
                        })
                    ];
                case 1:
                    _state.sent();
                    return [
                        3,
                        0
                    ];
                case 2:
                    GlobalConfig = globalThis.exports["config"].GetModuleConfig("main");
                    return [
                        2
                    ];
            }
        });
    });
    return _InitConfig.apply(this, arguments);
}
on("np-config:configLoaded", function(pModule, pConfig) {
    if (pModule === "main") {
        GlobalConfig = pConfig;
    } else if (TrackedModules.has(pModule)) {
        TrackedModules.set(pModule, pConfig);
    }
});
function GetConfig(pKey) {
    return GlobalConfig[pKey];
}
function config_GetModuleConfig(pModule, pKey) {
    var _config;
    if (!TrackedModules.has(pModule)) {
        var config = __webpack_require__.g.exports["config"].GetModuleConfig(pModule);
        if (config === undefined) return;
        TrackedModules.set(pModule, config);
    }
    var config1 = TrackedModules.get(pModule);
    return pKey ? (_config = config1) === null || _config === void 0 ? void 0 : _config[pKey] : config1;
}
function GetResourceConfig(pKey) {
    return config_GetModuleConfig(ResourceName, pKey);
}

;// CONCATENATED MODULE: ./src/client/controllers/others/appearance.ts
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function GetVehicleExtras(pVehicle) {
    var extras = [];
    for(var i = 0; i < 12; i += 1){
        if (IsVehicleExtraTurnedOn(pVehicle, i)) {
            extras.push(i);
        }
    }
    return extras;
}
function SetVehicleExtras(pVehicle, pExtras) {
    var _loop = function(i) {
        var hasExtra = pExtras.some(function(extra) {
            return extra === i;
        });
        SetVehicleExtra(pVehicle, i, !hasExtra);
    };
    for(var i = 0; i < 12; i += 1)_loop(i);
}
function GetVehicleNeon(pVehicle) {
    return {
        left: IsVehicleNeonLightEnabled(pVehicle, 0),
        right: IsVehicleNeonLightEnabled(pVehicle, 1),
        front: IsVehicleNeonLightEnabled(pVehicle, 2),
        back: IsVehicleNeonLightEnabled(pVehicle, 3)
    };
}
function SetVehicleNeon(pVehicle, pNeon) {
    if (pNeon.left) {
        SetVehicleNeonLightEnabled(pVehicle, 0, pNeon.left);
    }
    if (pNeon.right) {
        SetVehicleNeonLightEnabled(pVehicle, 1, pNeon.right);
    }
    if (pNeon.front) {
        SetVehicleNeonLightEnabled(pVehicle, 2, pNeon.front);
    }
    if (pNeon.back) {
        SetVehicleNeonLightEnabled(pVehicle, 3, pNeon.back);
    }
}
function GetVehicleColor(pVehicle, pType) {
    switch(pType){
        case "primary":
            {
                if (!GetIsVehiclePrimaryColourCustom(pVehicle)) return GetVehicleColours(pVehicle)[0];
                var _GetVehicleCustomPrimaryColour = _sliced_to_array(GetVehicleCustomPrimaryColour(pVehicle), 3), r = _GetVehicleCustomPrimaryColour[0], g = _GetVehicleCustomPrimaryColour[1], b = _GetVehicleCustomPrimaryColour[2];
                return {
                    r: r,
                    g: g,
                    b: b
                };
            }
        case "primaryType":
            {
                return GetVehicleModColor_1(pVehicle)[0];
            }
        case "secondary":
            {
                if (!GetIsVehicleSecondaryColourCustom(pVehicle)) return GetVehicleColours(pVehicle)[1];
                var _GetVehicleCustomSecondaryColour = _sliced_to_array(GetVehicleCustomSecondaryColour(pVehicle), 3), r1 = _GetVehicleCustomSecondaryColour[0], g1 = _GetVehicleCustomSecondaryColour[1], b1 = _GetVehicleCustomSecondaryColour[2];
                return {
                    r: r1,
                    g: g1,
                    b: b1
                };
            }
        case "secondaryType":
            {
                return GetVehicleModColor_2(pVehicle)[0];
            }
        case "pearlescent":
            {
                return GetVehicleExtraColours(pVehicle)[0];
            }
        case "wheels":
            {
                return GetVehicleExtraColours(pVehicle)[1];
            }
        case "tyre":
            {
                var _GetVehicleTyreSmokeColor = _sliced_to_array(GetVehicleTyreSmokeColor(pVehicle), 3), r2 = _GetVehicleTyreSmokeColor[0], g2 = _GetVehicleTyreSmokeColor[1], b2 = _GetVehicleTyreSmokeColor[2];
                return {
                    r: r2,
                    g: g2,
                    b: b2
                };
            }
        case "neon":
            {
                var _GetVehicleNeonLightsColour = _sliced_to_array(GetVehicleNeonLightsColour(pVehicle), 3), r3 = _GetVehicleNeonLightsColour[0], g3 = _GetVehicleNeonLightsColour[1], b3 = _GetVehicleNeonLightsColour[2];
                return {
                    r: r3,
                    g: g3,
                    b: b3
                };
            }
        case "xenon":
            {
                var customXenon = Citizen.invokeNative("0xc715f730", pVehicle, Citizen.pointerValueInt(), Citizen.pointerValueInt(), Citizen.pointerValueInt(), Citizen.returnResultAnyway()); //GetVehicleXenonLightsCustomColor
                if (!customXenon[0]) return GetVehicleXenonLightsColour(pVehicle);
                return {
                    r: customXenon[1],
                    g: customXenon[2],
                    b: customXenon[3]
                };
            }
        case "dashboard":
            {
                return GetVehicleDashboardColour(pVehicle, null);
            }
        case "interior":
            {
                return GetVehicleInteriorColour(pVehicle, null);
            }
    }
}
function SetVehicleColor(pVehicle, pType, pValue) {
    switch(pType){
        case "primary":
            {
                //If pValue is the type of number, then it isn't a RGB color.
                if (typeof pValue === "number") {
                    var _GetVehicleColours = _sliced_to_array(GetVehicleColours(pVehicle), 2), _ = _GetVehicleColours[0], secondaryColor = _GetVehicleColours[1];
                    return SetVehicleColours(pVehicle, pValue, secondaryColor);
                }
                ClearVehicleCustomPrimaryColour(pVehicle);
                return SetVehicleCustomPrimaryColour(pVehicle, pValue.r, pValue.g, pValue.b);
            }
        case "primaryType":
            {
                var _GetVehicleCustomPrimaryColour = _sliced_to_array(GetVehicleCustomPrimaryColour(pVehicle), 3), r = _GetVehicleCustomPrimaryColour[0], g = _GetVehicleCustomPrimaryColour[1], b = _GetVehicleCustomPrimaryColour[2];
                var _GetVehicleExtraColours = _sliced_to_array(GetVehicleExtraColours(pVehicle), 2), pearlescentColor = _GetVehicleExtraColours[0], wheelColor = _GetVehicleExtraColours[1];
                ClearVehicleCustomPrimaryColour(pVehicle);
                SetVehicleModColor_1(pVehicle, pValue, 1, 1);
                SetVehicleCustomPrimaryColour(pVehicle, r, g, b);
                return SetVehicleExtraColours(pVehicle, pearlescentColor, wheelColor);
            }
        case "secondary":
            {
                //If pValue is the type of number, then it isn't a RGB color.
                if (typeof pValue === "number") {
                    var _GetVehicleColours1 = _sliced_to_array(GetVehicleColours(pVehicle), 1), primaryColor = _GetVehicleColours1[0];
                    return SetVehicleColours(pVehicle, primaryColor, pValue);
                }
                ClearVehicleCustomSecondaryColour(pVehicle);
                return SetVehicleCustomSecondaryColour(pVehicle, pValue.r, pValue.g, pValue.b);
            }
        case "secondaryType":
            {
                var _GetVehicleCustomSecondaryColour = _sliced_to_array(GetVehicleCustomSecondaryColour(pVehicle), 3), r1 = _GetVehicleCustomSecondaryColour[0], g1 = _GetVehicleCustomSecondaryColour[1], b1 = _GetVehicleCustomSecondaryColour[2];
                var _GetVehicleExtraColours1 = _sliced_to_array(GetVehicleExtraColours(pVehicle), 2), pearlescentColor1 = _GetVehicleExtraColours1[0], wheelColor1 = _GetVehicleExtraColours1[1];
                ClearVehicleCustomSecondaryColour(pVehicle);
                SetVehicleModColor_2(pVehicle, pValue, 1);
                SetVehicleCustomSecondaryColour(pVehicle, r1, g1, b1);
                return SetVehicleExtraColours(pVehicle, pearlescentColor1, wheelColor1);
            }
        case "pearlescent":
            {
                var _GetVehicleExtraColours2 = _sliced_to_array(GetVehicleExtraColours(pVehicle), 2), _1 = _GetVehicleExtraColours2[0], wheelColor2 = _GetVehicleExtraColours2[1];
                return SetVehicleExtraColours(pVehicle, pValue, wheelColor2);
            }
        case "wheels":
            {
                var _GetVehicleExtraColours3 = _sliced_to_array(GetVehicleExtraColours(pVehicle), 1), pearlescentColor2 = _GetVehicleExtraColours3[0];
                return SetVehicleExtraColours(pVehicle, pearlescentColor2, pValue);
            }
        case "tyre":
            {
                return SetVehicleTyreSmokeColor(pVehicle, pValue.r, pValue.g, pValue.b);
            }
        case "neon":
            {
                return SetVehicleNeonLightsColour(pVehicle, pValue.r, pValue.g, pValue.b);
            }
        case "xenon":
            {
                //If pValue is the type of number, then it isn't a RGB color.
                if (typeof pValue === "number") {
                    emit("np-vehicles:customXenonColorApplied", pVehicle, null);
                    return SetVehicleXenonLightsColour(pVehicle, pValue);
                }
                emit("np-vehicles:customXenonColorApplied", pVehicle, [
                    pValue.r,
                    pValue.g,
                    pValue.b
                ]);
                Citizen.invokeNative("0x2867ED8C", pVehicle); //ClearVehicleXenonLightsCustomColor
                return Citizen.invokeNative("0x1683E7F0", pVehicle, pValue.r, pValue.g, pValue.b); //SetVehicleXenonLightsCustomColor
            }
        case "dashboard":
            {
                return SetVehicleDashboardColour(pVehicle, pValue);
            }
        case "interior":
            {
                return SetVehicleInteriorColour(pVehicle, pValue);
            }
    }
}
function GetVehicleAdditional(pVehicle, pType) {
    switch(pType){
        case "tint":
            {
                return GetVehicleWindowTint(pVehicle);
            }
        case "neon":
            {
                return GetVehicleNeon(pVehicle);
            }
        case "extras":
            {
                return GetVehicleExtras(pVehicle);
            }
        case "wheelType":
            {
                return GetVehicleWheelType(pVehicle);
            }
        case "oldLivery":
            {
                return GetVehicleLivery(pVehicle);
            }
        case "plateIndex":
            {
                return GetVehicleNumberPlateTextIndex(pVehicle);
            }
    }
}
function SetVehicleAdditional(pVehicle, pType, pValue) {
    switch(pType){
        case "tint":
            {
                return SetVehicleWindowTint(pVehicle, pValue);
            }
        case "neon":
            {
                return SetVehicleNeon(pVehicle, pValue);
            }
        case "extras":
            {
                return SetVehicleExtras(pVehicle, pValue);
            }
        case "wheelType":
            {
                return SetVehicleWheelType(pVehicle, pValue);
            }
        case "oldLivery":
            {
                return SetVehicleLivery(pVehicle, pValue);
            }
        case "plateIndex":
            {
                return SetVehicleNumberPlateTextIndex(pVehicle, pValue);
            }
    }
}
function GetVehicleDamage(pVehicle, pType) {
    switch(pType){
        case "body":
            {
                return +GetVehicleBodyHealth(pVehicle).toFixed(2);
            }
        case "engine":
            {
                return +GetVehicleEngineHealth(pVehicle).toFixed(2);
            }
        case "dirt":
            {
                return +GetVehicleDirtLevel(pVehicle).toFixed(2);
            }
        case "windows":
            {
                var data = [];
                for(var i = 0; i < 8; i += 1){
                    data.push({
                        index: i,
                        broken: !IsVehicleWindowIntact(pVehicle, i)
                    });
                }
                return data;
            }
        case "doors":
            {
                var data1 = [];
                for(var i1 = 0; i1 < 7; i1 += 1){
                    if (DoesVehicleHaveDoor(pVehicle, i1)) {
                        data1.push({
                            index: i1,
                            broken: IsVehicleDoorDamaged(pVehicle, i1)
                        });
                    }
                }
                return data1;
            }
        case "wheels":
            {
                var wheels = GetVehicleNumberOfWheels(pVehicle);
                var data2 = [];
                for(var i2 = 0; i2 < wheels; i2 += 1){
                    var health = +GetVehicleWheelHealth(pVehicle, i2).toFixed(2);
                    if (IsVehicleTyreBurst(pVehicle, i2, false)) {
                        health = 0.1;
                    }
                    data2.push({
                        index: i2,
                        health: health
                    });
                }
                return data2;
            }
    }
}
function ApplyVehicleDamage(pVehicle, pType, pValue) {
    switch(pType){
        case "body":
            {
                return SetVehicleBodyHealth(pVehicle, pValue);
            }
        case "engine":
            {
                return SetVehicleEngineHealth(pVehicle, pValue);
            }
        case "dirt":
            {
                return SetVehicleDirtLevel(pVehicle, pValue);
            }
        case "windows":
            {
                return pValue.forEach(function(window) {
                    if (window.broken) SmashVehicleWindow(pVehicle, window.index);
                });
            }
        case "doors":
            {
                return pValue.forEach(function(door) {
                    if (door.broken) SetVehicleDoorBroken(pVehicle, door.index, true);
                });
            }
        case "wheels":
            {
                return pValue.forEach(function(wheel) {
                    if (wheel.health < 50) {
                        SetVehicleTyreBurst(pVehicle, wheel.index, true, 1000.0);
                    } else if (wheel.health < 100) {
                        SetVehicleTyreBurst(pVehicle, wheel.index, false, 1.0);
                    } else {
                        SetVehicleWheelHealth(pVehicle, wheel.index, wheel.health);
                    }
                });
            }
    }
}
function GetVehicleColors(pVehicle) {
    return {
        primary: GetVehicleColor(pVehicle, "primary"),
        primaryType: GetVehicleColor(pVehicle, "primaryType"),
        secondary: GetVehicleColor(pVehicle, "secondary"),
        secondaryType: GetVehicleColor(pVehicle, "secondaryType"),
        pearlescent: GetVehicleColor(pVehicle, "pearlescent"),
        wheels: GetVehicleColor(pVehicle, "wheels"),
        tyre: GetVehicleColor(pVehicle, "tyre"),
        neon: GetVehicleColor(pVehicle, "neon"),
        xenon: GetVehicleColor(pVehicle, "xenon"),
        dashboard: GetVehicleColor(pVehicle, "dashboard"),
        interior: GetVehicleColor(pVehicle, "interior")
    };
}
function SetVehicleColors(pVehicle, pColors) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.entries(pColors)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = _sliced_to_array(_step.value, 2), type = _step_value[0], value = _step_value[1];
            SetVehicleColor(pVehicle, type, value);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    if (pColors.dashboard && pColors.interior === undefined) {
        SetVehicleColor(pVehicle, "interior", pColors.dashboard);
    }
    if (pColors.interior && pColors.dashboard === undefined) {
        SetVehicleColor(pVehicle, "dashboard", pColors.interior);
    }
}
function GetVehicleAppearance(pVehicle) {
    return {
        colors: GetVehicleColors(pVehicle),
        tint: GetVehicleAdditional(pVehicle, "tint"),
        neon: GetVehicleAdditional(pVehicle, "neon"),
        extras: GetVehicleAdditional(pVehicle, "extras"),
        wheelType: GetVehicleAdditional(pVehicle, "wheelType"),
        oldLivery: GetVehicleAdditional(pVehicle, "oldLivery"),
        plateIndex: GetVehicleAdditional(pVehicle, "plateIndex")
    };
}
function SetVehicleAppearance(pVehicle, pData) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.entries(pData)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = _sliced_to_array(_step.value, 2), type = _step_value[0], value = _step_value[1];
            if (type !== "colors") {
                SetVehicleAdditional(pVehicle, type, value);
            } else {
                SetVehicleColors(pVehicle, value);
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
function FetchVehicleDamage(pVehicle) {
    return {
        body: GetVehicleDamage(pVehicle, "body"),
        engine: GetVehicleDamage(pVehicle, "engine"),
        dirt: GetVehicleDamage(pVehicle, "dirt"),
        windows: GetVehicleDamage(pVehicle, "windows"),
        doors: GetVehicleDamage(pVehicle, "doors"),
        wheels: GetVehicleDamage(pVehicle, "wheels")
    };
}
function RestoreVehicleDamage(pVehicle, pDamage) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.entries(pDamage)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = _sliced_to_array(_step.value, 2), type = _step_value[0], value = _step_value[1];
            ApplyVehicleDamage(pVehicle, type, value);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
__webpack_require__.g.exports("SetVehicleAppearance", SetVehicleAppearance);

;// CONCATENATED MODULE: ./src/shared/controllers/statebags.ts
var StateBags = new Map();
var EXT_ENTITY = 41;
var EXT_PLAYER = 42;
function NewStateBag(es) {
    var sv = IsDuplicityVersion();
    return new Proxy({}, {
        get: function get(_, k) {
            if (k === "set") {
                return function(s, v, r) {
                    var payload = msgpack_pack(v);
                    SetStateBagValue(es, s, payload, payload.length, r);
                };
            }
            return GetStateBagValue(es, k);
        },
        set: function set(_, k, v) {
            var payload = msgpack_pack(v);
            return SetStateBagValue(es, k, payload, payload.length, Boolean(sv));
        }
    });
}
var GlobalState = NewStateBag("global");
var entityTM = {
    get: function get(t, k) {
        if (k === "state") {
            var es = "entity:".concat(NetworkGetNetworkIdFromEntity(t.__data));
            if (IsDuplicityVersion()) {
                EnsureEntityStateBag(t.__data);
            }
            return NewStateBag(es);
        }
        return null;
    },
    set: function set() {
        throw new Error("Not allowed at this time.");
    },
    __ext: EXT_ENTITY
};
var playerTM = {
    get: function get(t, k) {
        if (k === "state") {
            var pid = t.__data;
            if (pid === -1) {
                pid = GetPlayerServerId(PlayerId());
            }
            var es = "player:".concat(pid);
            return NewStateBag(es);
        }
        return null;
    },
    set: function set() {
        throw new Error("Not allowed at this time.");
    },
    __ext: EXT_PLAYER
};
function statebags_Entity(ent) {
    if (typeof ent === "number") {
        return new Proxy({
            __data: ent
        }, entityTM);
    }
    return ent;
}
function statebags_Player(ent) {
    if (typeof ent === "number" || typeof ent === "string") {
        return new Proxy({
            __data: Number(ent)
        }, playerTM);
    }
    return ent;
}
function GetStateBag(pEntity) {
    if (!StateBags.has(pEntity)) {
        var stateBag = statebags_Entity(pEntity);
        // Keep state bag cached for 30 seconds
        StateBags.set(pEntity, stateBag);
        setTimeout(function() {
            return StateBags.delete(pEntity);
        }, 30000);
        return stateBag;
    }
    return StateBags.get(pEntity);
}

;// CONCATENATED MODULE: ./src/client/controllers/state/keys.ts

var Keys = new Set();
function GetVehicleIdentifier(pVehicle) {
    var _stateBag_state;
    var stateBag = GetStateBag(pVehicle);
    return (_stateBag_state = stateBag.state) === null || _stateBag_state === void 0 ? void 0 : _stateBag_state.vin;
}
function GetVehicleOwner(pVehicle) {
    var _stateBag_state;
    var stateBag = GetStateBag(pVehicle);
    return (_stateBag_state = stateBag.state) === null || _stateBag_state === void 0 ? void 0 : _stateBag_state.owner;
}
function HasVehicleKey(pVehicle) {
    var vin = typeof pVehicle === "number" ? GetVehicleIdentifier(pVehicle) : pVehicle;
    return Keys.has(vin);
}
function GiveVehicleKey(pVehicle, pServerId) {
    if (Keys.size === 0) return emit("DoLongHudText", "You have no keys to give!", 2);
    var vin = typeof pVehicle === "number" ? GetVehicleIdentifier(pVehicle) : pVehicle;
    if (vin && Keys.has(vin)) {
        RPC.execute("np:vehicles:giveKey", vin, pServerId).then(function(success) {
            if (success) emit("DoLongHudText", "You just gave the keys of your vehicle!", 1);
        });
    } else {
        return emit("DoLongHudText", "No keys for target vehicle!", 2);
    }
}
function IsVinScratched(pVehicle) {
    var _GetStateBag;
    if (!DoesEntityExist(pVehicle)) return false;
    return (_GetStateBag = GetStateBag(pVehicle)) === null || _GetStateBag === void 0 ? void 0 : _GetStateBag.state.vinScratched;
}
__webpack_require__.g.exports("GetVehicleIdentifier", GetVehicleIdentifier);
__webpack_require__.g.exports("HasVehicleKey", HasVehicleKey);
__webpack_require__.g.exports("IsVinScratched", IsVinScratched);

;// CONCATENATED MODULE: ./src/shared/shared.ts
function Wait(time) {
    return new Promise(function(resolve) {
        return setTimeout(resolve, time);
    });
}

;// CONCATENATED MODULE: ./src/client/utils/tools.ts
function tools_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function tools_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return tools_array_like_to_array(arr);
}
function tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function tools_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function tools_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function tools_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function tools_sliced_to_array(arr, i) {
    return tools_array_with_holes(arr) || tools_iterable_to_array_limit(arr, i) || tools_unsupported_iterable_to_array(arr, i) || tools_non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || tools_unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function tools_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return tools_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return tools_array_like_to_array(o, minLen);
}
function tools_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var DebugMode = GetConvar("sv_environment", "production") === "debug";
function Debug() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    var _console;
    if (!DebugMode) return;
    (_console = console).log.apply(_console, _to_consumable_array(args));
}
function tools_LoadEntityModel(pModel) {
    return _LoadEntityModel.apply(this, arguments);
}
function _LoadEntityModel() {
    _LoadEntityModel = tools_async_to_generator(function(pModel) {
        var model, timeout;
        return tools_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    model = typeof pModel === "number" ? pModel : GetHashKey(pModel);
                    if (!(!HasModelLoaded(model) && IsModelInCdimage(model))) return [
                        3,
                        3
                    ];
                    RequestModel(model);
                    timeout = false;
                    setTimeout(function() {
                        return timeout = true;
                    }, 60000);
                    _state.label = 1;
                case 1:
                    if (!(!HasModelLoaded(model) && !timeout)) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        Wait(10)
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        1
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _LoadEntityModel.apply(this, arguments);
}
function LoadAnimationModel(pDict) {
    return _LoadAnimationModel.apply(this, arguments);
}
function _LoadAnimationModel() {
    _LoadAnimationModel = tools_async_to_generator(function(pDict) {
        var timeout;
        return tools_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!!HasAnimDictLoaded(pDict)) return [
                        3,
                        3
                    ];
                    RequestAnimDict(pDict);
                    timeout = false;
                    setTimeout(function() {
                        return timeout = true;
                    }, 60000);
                    _state.label = 1;
                case 1:
                    if (!(!HasAnimDictLoaded(pDict) && !timeout)) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        Wait(10)
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        1
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _LoadAnimationModel.apply(this, arguments);
}
function Taskbar(pLength, pName) {
    var pRunCheck = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    return new Promise(function(resolve) {
        if (pName) {
            __webpack_require__.g.exports["np-taskbar"].taskBar(pLength, pName, pRunCheck, true, null, false, resolve);
        } else {
            setTimeout(function() {
                return resolve(100);
            }, pLength);
        }
    });
}
function TaskbarMiniGame(pDifficulty, pGap) {
    return new Promise(function(resolve) {
        __webpack_require__.g.exports["skillchecks"].taskBarSkill(pDifficulty, pGap, resolve);
    });
}
function GetClosestPlayer() {
    var players = GetActivePlayers();
    var playerId = PlayerId();
    var _GetEntityCoords = tools_sliced_to_array(GetEntityCoords(PlayerPedId(), false), 3), pX = _GetEntityCoords[0], pY = _GetEntityCoords[1], pZ = _GetEntityCoords[2];
    var distance, target, targetPed;
    players.forEach(function(player) {
        if (player !== playerId) {
            var playerPed = GetPlayerPed(player);
            var _GetEntityCoords = tools_sliced_to_array(GetEntityCoords(playerPed, false), 3), tX = _GetEntityCoords[0], tY = _GetEntityCoords[1], tZ = _GetEntityCoords[2];
            var targetDistance = GetDistanceBetweenCoords(pX, pY, pZ, tX, tY, tZ, true);
            if (!target || targetDistance < distance) {
                target = player;
                targetPed = playerPed;
                distance = targetDistance;
            }
        }
    });
    return [
        target,
        distance,
        targetPed
    ];
}
function GetPedVehicleSeat(pPed, pVehicle) {
    var vehicleSeats = GetVehicleModelNumberOfSeats(GetEntityModel(pVehicle));
    for(var i = -1; i < vehicleSeats - 1; i += 1){
        var ped = GetPedInVehicleSeat(pVehicle, i);
        if (ped && ped === pPed) return i;
    }
}
function tools_PlayEntitySound(pEntity, pName, pRef) {
    return _PlayEntitySound.apply(this, arguments);
}
function _PlayEntitySound() {
    _PlayEntitySound = tools_async_to_generator(function(pEntity, pName, pRef) {
        var pTime, soundId;
        var _arguments = arguments;
        return tools_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pTime = _arguments.length > 3 && _arguments[3] !== void 0 ? _arguments[3] : 1000;
                    soundId = GetSoundId();
                    PlaySoundFromEntity(soundId, pName, pEntity, pRef, false, 0);
                    return [
                        4,
                        Wait(pTime)
                    ];
                case 1:
                    _state.sent();
                    StopSound(soundId);
                    ReleaseSoundId(soundId);
                    return [
                        2
                    ];
            }
        });
    });
    return _PlayEntitySound.apply(this, arguments);
}
function DoLongHudText(pText) {
    var pType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    emit("DoLongHudText", pText, pType);
}
function GetHandlingField(pVehicle, pField) {
    return GetVehicleHandlingFloat(pVehicle, "CHandlingData", pField);
}
function tools_SyncedExecution(pNative, pEntity) {
    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        args[_key - 2] = arguments[_key];
    }
    var _global_exports_npsync;
    (_global_exports_npsync = __webpack_require__.g.exports["np-sync"]).SyncedExecution.apply(_global_exports_npsync, [
        pNative,
        pEntity
    ].concat(_to_consumable_array(args)));
}
var ExhaustList = [
    "exhaust"
];
function GetVehicleExhausts(pVehicle) {
    var bones = [];
    if (ExhaustList.length === 1) {
        for(var i = 2; i < 17; i += 1){
            ExhaustList.push("exhaust_".concat(i));
        }
    }
    ExhaustList.forEach(function(exhaust) {
        if (GetEntityBoneIndexByName(pVehicle, exhaust) !== -1) bones.push(exhaust);
    });
    return bones;
}
function DoPhoneConfirmation(pTitle, pText, pIcon) {
    return new Promise(function(resolve) {
        __webpack_require__.g.exports["np-phone"].DoPhoneConfirmation(pTitle, pText, pIcon, resolve);
    });
}

;// CONCATENATED MODULE: ./src/shared/enums/mods.ts
var Mods;
(function(Mods) {
    Mods[Mods["Spoilers"] = 0] = "Spoilers";
    Mods[Mods["FrontBumper"] = 1] = "FrontBumper";
    Mods[Mods["RearBumper"] = 2] = "RearBumper";
    Mods[Mods["SideSkirt"] = 3] = "SideSkirt";
    Mods[Mods["Exhaust"] = 4] = "Exhaust";
    Mods[Mods["Frame"] = 5] = "Frame";
    Mods[Mods["Grille"] = 6] = "Grille";
    Mods[Mods["Hood"] = 7] = "Hood";
    Mods[Mods["Fender"] = 8] = "Fender";
    Mods[Mods["RightFender"] = 9] = "RightFender";
    Mods[Mods["Roof"] = 10] = "Roof";
    Mods[Mods["Engine"] = 11] = "Engine";
    Mods[Mods["Brakes"] = 12] = "Brakes";
    Mods[Mods["Transmission"] = 13] = "Transmission";
    Mods[Mods["Horns"] = 14] = "Horns";
    Mods[Mods["Suspension"] = 15] = "Suspension";
    Mods[Mods["Armor"] = 16] = "Armor";
    Mods[Mods["UNK17"] = 17] = "UNK17";
    Mods[Mods["Turbo"] = 18] = "Turbo";
    Mods[Mods["UNK19"] = 19] = "UNK19";
    Mods[Mods["TireSmoke"] = 20] = "TireSmoke";
    Mods[Mods["UNK21"] = 21] = "UNK21";
    Mods[Mods["XenonHeadlights"] = 22] = "XenonHeadlights";
    Mods[Mods["FrontWheels"] = 23] = "FrontWheels";
    Mods[Mods["BackWheels"] = 24] = "BackWheels";
    Mods[Mods["PlateHolder"] = 25] = "PlateHolder";
    Mods[Mods["VanityPlates"] = 26] = "VanityPlates";
    Mods[Mods["InteriorTrim"] = 27] = "InteriorTrim";
    Mods[Mods["Ornaments"] = 28] = "Ornaments";
    Mods[Mods["Dashboard"] = 29] = "Dashboard";
    Mods[Mods["Dials"] = 30] = "Dials";
    Mods[Mods["DoorSpeakers"] = 31] = "DoorSpeakers";
    Mods[Mods["Seats"] = 32] = "Seats";
    Mods[Mods["SteeringWheel"] = 33] = "SteeringWheel";
    Mods[Mods["ShiftLeavers"] = 34] = "ShiftLeavers";
    Mods[Mods["Plaques"] = 35] = "Plaques";
    Mods[Mods["Speakers"] = 36] = "Speakers";
    Mods[Mods["Trunk"] = 37] = "Trunk";
    Mods[Mods["Hydraulics"] = 38] = "Hydraulics";
    Mods[Mods["EngineBlock"] = 39] = "EngineBlock";
    Mods[Mods["AirFilter"] = 40] = "AirFilter";
    Mods[Mods["Struts"] = 41] = "Struts";
    Mods[Mods["ArchCover"] = 42] = "ArchCover";
    Mods[Mods["Aerials"] = 43] = "Aerials";
    Mods[Mods["ExteriorTrim"] = 44] = "ExteriorTrim";
    Mods[Mods["Tank"] = 45] = "Tank";
    Mods[Mods["Windows"] = 46] = "Windows";
    Mods[Mods["UNK47"] = 47] = "UNK47";
    Mods[Mods["Livery"] = 48] = "Livery";
})(Mods || (Mods = {}));

;// CONCATENATED MODULE: ./src/client/controllers/others/mods.ts
function mods_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function mods_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function mods_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function mods_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function mods_sliced_to_array(arr, i) {
    return mods_array_with_holes(arr) || mods_iterable_to_array_limit(arr, i) || mods_unsupported_iterable_to_array(arr, i) || mods_non_iterable_rest();
}
function mods_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return mods_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return mods_array_like_to_array(o, minLen);
}

function IsToggle(pModType) {
    return pModType >= 17 && pModType <= 22;
}
function GetMod(pVehicle, pMod) {
    var modType = Number(Mods[pMod]);
    if (!isNaN(modType)) {
        if (IsToggle(modType)) {
            return IsToggleModOn(pVehicle, modType) ? 1 : 0;
        } else {
            return GetVehicleMod(pVehicle, modType);
        }
    }
}
function GetMods(pVehicle) {
    var mods = {};
    for(var modType in Mods){
        if (isNaN(Number(modType))) {
            mods[modType] = GetMod(pVehicle, modType);
        }
    }
    return mods;
}
function SetMod(pVehicle, pMod, pValue) {
    var modType = Number(Mods[pMod]);
    var isCustom = (modType === 23 || modType === 24) && pValue !== -1;
    if (!isNaN(modType)) {
        if (IsToggle(modType)) {
            ToggleVehicleMod(pVehicle, modType, pValue);
        } else {
            if (pValue === 255) pValue = GetNumVehicleMods(pVehicle, modType) - 1;
            SetVehicleMod(pVehicle, modType, pValue, false);
        }
    }
}
function SetMods(pVehicle, pMods) {
    SetVehicleModKit(pVehicle, 0);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.entries(pMods)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = mods_sliced_to_array(_step.value, 2), mod = _step_value[0], value = _step_value[1];
            SetMod(pVehicle, mod, value);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
__webpack_require__.g.exports("SetVehicleMods", SetMods);

;// CONCATENATED MODULE: ./src/client/utils/polyZone.ts
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var PolyZone = /*#__PURE__*/ function() {
    "use strict";
    function PolyZone() {
        _class_call_check(this, PolyZone);
    }
    _create_class(PolyZone, null, [
        {
            key: "addBoxZone",
            value: function addBoxZone(pId, pCenter, pLength, pWidth, pOptions) {
                __webpack_require__.g.exports["np-polyzone"].AddBoxZone(pId, pCenter, pLength, pWidth, pOptions);
            }
        },
        {
            key: "addCircleZone",
            value: function addCircleZone(pId, pCenter, pRadius, pOptions) {
                __webpack_require__.g.exports["np-polyzone"].AddCircleZone(pId, pCenter, pRadius, pOptions);
            }
        }
    ]);
    return PolyZone;
}();

;// CONCATENATED MODULE: ./src/shared/classes/cache.ts
function cache_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function cache_array_without_holes(arr) {
    if (Array.isArray(arr)) return cache_array_like_to_array(arr);
}
function cache_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function cache_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function cache_create_class(Constructor, protoProps, staticProps) {
    if (protoProps) cache_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) cache_defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function cache_iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function cache_non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function cache_to_consumable_array(arr) {
    return cache_array_without_holes(arr) || cache_iterable_to_array(arr) || cache_unsupported_iterable_to_array(arr) || cache_non_iterable_spread();
}
function cache_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return cache_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return cache_array_like_to_array(o, minLen);
}
var Cache = /*#__PURE__*/ function() {
    "use strict";
    function Cache() {
        cache_class_call_check(this, Cache);
        _define_property(this, "_entries", void 0);
        this._entries = new Map();
    }
    cache_create_class(Cache, [
        {
            key: "has",
            value: function has(pKey) {
                return this._entries.has(pKey);
            }
        },
        {
            key: "isExpired",
            value: function isExpired(pKey) {
                var _this__entries_get = this._entries.get(pKey), ttl = _this__entries_get.ttl, timestamp = _this__entries_get.timestamp;
                return Date.now() - timestamp > ttl;
            }
        },
        {
            key: "get",
            value: function get(pKey) {
                var _this__entries_get;
                return (_this__entries_get = this._entries.get(pKey)) === null || _this__entries_get === void 0 ? void 0 : _this__entries_get.value;
            }
        },
        {
            key: "set",
            value: function set(pKey, pValue) {
                var pTTL = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1000;
                this._entries.set(pKey, {
                    value: pValue,
                    timestamp: Date.now(),
                    ttl: pTTL
                });
            }
        },
        {
            key: "delete",
            value: function _delete(pKey) {
                return this._entries.delete(pKey);
            }
        },
        {
            key: "clear",
            value: function clear() {
                this._entries.clear();
            }
        },
        {
            key: "forEach",
            value: function forEach(cb) {
                this._entries.forEach(function(entry, key) {
                    return cb(entry.value, key);
                });
            }
        },
        {
            key: "find",
            value: function find(cb) {
                var _find;
                return (_find = cache_to_consumable_array(this._entries.values()).find(function(entry) {
                    return cb(entry.value);
                })) === null || _find === void 0 ? void 0 : _find.value;
            }
        },
        {
            key: "some",
            value: function some(cb) {
                return cache_to_consumable_array(this._entries.values()).some(function(entry) {
                    return cb(entry.value);
                });
            }
        }
    ]);
    return Cache;
}();

;// CONCATENATED MODULE: ./src/client/utils/blips.ts
var Blips = new Map();
function CreateBlip(pId, pTarget, pText, pOptions) {
    if (Blips.has(pId)) DeleteBlip(pId);
    var handle = AddBlipForCoord(pTarget.x, pTarget.y, pTarget.z);
    if (pOptions) {
        if (typeof pOptions.sprite !== "undefined") SetBlipSprite(handle, pOptions.sprite);
        if (typeof pOptions.color !== "undefined") SetBlipColour(handle, pOptions.color);
        if (typeof pOptions.scale !== "undefined") SetBlipScale(handle, pOptions.scale);
        if (typeof pOptions.short !== "undefined") SetBlipAsShortRange(handle, pOptions.short);
        if (typeof pOptions.category !== "undefined") SetBlipCategory(handle, pOptions.category);
    }
    if (pText) {
        BeginTextCommandSetBlipName("STRING");
        AddTextComponentString(pText);
        EndTextCommandSetBlipName(handle);
    }
    Blips.set(pId, handle);
    return handle;
}
function DeleteBlip(pId) {
    var blip = Blips.get(pId);
    if (blip) {
        RemoveBlip(blip);
    }
    return Blips.delete(pId);
}
function HideBlip(pId, pState) {
    var blip = Blips.get(pId);
    if (!blip) return;
    if (pState) {
        SetBlipAlpha(blip, 0);
        SetBlipHiddenOnLegend(blip, true);
    } else {
        SetBlipAlpha(blip, 255);
        SetBlipHiddenOnLegend(blip, false);
    }
}
function GetWaypointCoords() {
    var handle = GetFirstBlipInfoId(8);
    if (!DoesBlipExist(handle)) return;
    return GetBlipInfoIdCoord(handle);
}

;// CONCATENATED MODULE: ./src/client/classes/thread.ts
function thread_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function thread_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                thread_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                thread_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function thread_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function thread_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function thread_create_class(Constructor, protoProps, staticProps) {
    if (protoProps) thread_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) thread_defineProperties(Constructor, staticProps);
    return Constructor;
}
function thread_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function thread_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var Thread = /*#__PURE__*/ function() {
    "use strict";
    function Thread(pCallback, pDelay) {
        var pMode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "interval";
        thread_class_call_check(this, Thread);
        thread_define_property(this, "mode", void 0);
        thread_define_property(this, "callback", void 0);
        thread_define_property(this, "hooks", void 0);
        thread_define_property(this, "delay", void 0);
        thread_define_property(this, "data", void 0);
        thread_define_property(this, "active", void 0);
        thread_define_property(this, "aborted", void 0);
        thread_define_property(this, "threadId", void 0);
        this.callback = pCallback;
        this.delay = pDelay;
        this.mode = pMode;
        this.data = {};
        this.hooks = new Map([
            [
                "active",
                []
            ],
            [
                "preStop",
                []
            ],
            [
                "preStart",
                []
            ],
            [
                "afterStop",
                []
            ],
            [
                "afterStart",
                []
            ],
            [
                "stopAborted",
                []
            ],
            [
                "startAborted",
                []
            ]
        ]);
    }
    thread_create_class(Thread, [
        {
            key: "isActive",
            get: function get() {
                return this.active;
            }
        },
        {
            key: "start",
            value: function start() {
                var _this = this;
                return thread_async_to_generator(function() {
                    var preStart, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, hook, err, e, startAborted, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, hook1, err, e1, chain, f, afterStart, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, hook2, err, e2;
                    return thread_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (_this.active) return [
                                    2
                                ];
                                _this.aborted = false;
                                preStart = _this.hooks.get("preStart");
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    10,
                                    ,
                                    11
                                ]);
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _state.label = 2;
                            case 2:
                                _state.trys.push([
                                    2,
                                    7,
                                    8,
                                    9
                                ]);
                                _iterator = preStart[Symbol.iterator]();
                                _state.label = 3;
                            case 3:
                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                    3,
                                    6
                                ];
                                hook = _step.value;
                                if (!!_this.aborted) return [
                                    3,
                                    5
                                ];
                                return [
                                    4,
                                    hook.call(_this)
                                ];
                            case 4:
                                _state.sent();
                                _state.label = 5;
                            case 5:
                                _iteratorNormalCompletion = true;
                                return [
                                    3,
                                    3
                                ];
                            case 6:
                                return [
                                    3,
                                    9
                                ];
                            case 7:
                                err = _state.sent();
                                _didIteratorError = true;
                                _iteratorError = err;
                                return [
                                    3,
                                    9
                                ];
                            case 8:
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 9:
                                return [
                                    3,
                                    11
                                ];
                            case 10:
                                e = _state.sent();
                                _this.aborted = true;
                                console.log("Error while calling pre-start hook", e.message);
                                return [
                                    3,
                                    11
                                ];
                            case 11:
                                if (!_this.aborted) return [
                                    3,
                                    23
                                ];
                                _state.label = 12;
                            case 12:
                                _state.trys.push([
                                    12,
                                    21,
                                    ,
                                    22
                                ]);
                                startAborted = _this.hooks.get("startAborted");
                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                _state.label = 13;
                            case 13:
                                _state.trys.push([
                                    13,
                                    18,
                                    19,
                                    20
                                ]);
                                _iterator1 = startAborted[Symbol.iterator]();
                                _state.label = 14;
                            case 14:
                                if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                                    3,
                                    17
                                ];
                                hook1 = _step1.value;
                                return [
                                    4,
                                    hook1.call(_this)
                                ];
                            case 15:
                                _state.sent();
                                _state.label = 16;
                            case 16:
                                _iteratorNormalCompletion1 = true;
                                return [
                                    3,
                                    14
                                ];
                            case 17:
                                return [
                                    3,
                                    20
                                ];
                            case 18:
                                err = _state.sent();
                                _didIteratorError1 = true;
                                _iteratorError1 = err;
                                return [
                                    3,
                                    20
                                ];
                            case 19:
                                try {
                                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                        _iterator1.return();
                                    }
                                } finally{
                                    if (_didIteratorError1) {
                                        throw _iteratorError1;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 20:
                                return [
                                    3,
                                    22
                                ];
                            case 21:
                                e1 = _state.sent();
                                console.log("Error while calling start-aborted hook", e1.message);
                                return [
                                    3,
                                    22
                                ];
                            case 22:
                                return [
                                    2
                                ];
                            case 23:
                                _this.active = true;
                                chain = _this.hooks.get("active");
                                switch(_this.mode){
                                    case "tick":
                                        {
                                            _this.threadId = setTick(/*#__PURE__*/ thread_async_to_generator(function() {
                                                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, hook, err;
                                                return thread_ts_generator(this, function(_state) {
                                                    switch(_state.label){
                                                        case 0:
                                                            return [
                                                                4,
                                                                _this.callback.call(_this)
                                                            ];
                                                        case 1:
                                                            _state.sent();
                                                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                                            _state.label = 2;
                                                        case 2:
                                                            _state.trys.push([
                                                                2,
                                                                7,
                                                                8,
                                                                9
                                                            ]);
                                                            _iterator = chain[Symbol.iterator]();
                                                            _state.label = 3;
                                                        case 3:
                                                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                                                3,
                                                                6
                                                            ];
                                                            hook = _step.value;
                                                            return [
                                                                4,
                                                                hook.call(_this)
                                                            ];
                                                        case 4:
                                                            _state.sent();
                                                            _state.label = 5;
                                                        case 5:
                                                            _iteratorNormalCompletion = true;
                                                            return [
                                                                3,
                                                                3
                                                            ];
                                                        case 6:
                                                            return [
                                                                3,
                                                                9
                                                            ];
                                                        case 7:
                                                            err = _state.sent();
                                                            _didIteratorError = true;
                                                            _iteratorError = err;
                                                            return [
                                                                3,
                                                                9
                                                            ];
                                                        case 8:
                                                            try {
                                                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                                    _iterator.return();
                                                                }
                                                            } finally{
                                                                if (_didIteratorError) {
                                                                    throw _iteratorError;
                                                                }
                                                            }
                                                            return [
                                                                7
                                                            ];
                                                        case 9:
                                                            if (!(_this.delay > 0)) return [
                                                                3,
                                                                11
                                                            ];
                                                            return [
                                                                4,
                                                                new Promise(function(resolve) {
                                                                    return setTimeout(resolve, _this.delay);
                                                                })
                                                            ];
                                                        case 10:
                                                            _state.sent();
                                                            _state.label = 11;
                                                        case 11:
                                                            return [
                                                                2
                                                            ];
                                                    }
                                                });
                                            }));
                                            break;
                                        }
                                    case "interval":
                                        {
                                            _this.threadId = setInterval(/*#__PURE__*/ thread_async_to_generator(function() {
                                                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, hook, err;
                                                return thread_ts_generator(this, function(_state) {
                                                    switch(_state.label){
                                                        case 0:
                                                            return [
                                                                4,
                                                                _this.callback.call(_this)
                                                            ];
                                                        case 1:
                                                            _state.sent();
                                                            _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                                            _state.label = 2;
                                                        case 2:
                                                            _state.trys.push([
                                                                2,
                                                                7,
                                                                8,
                                                                9
                                                            ]);
                                                            _iterator = chain[Symbol.iterator]();
                                                            _state.label = 3;
                                                        case 3:
                                                            if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                                                3,
                                                                6
                                                            ];
                                                            hook = _step.value;
                                                            return [
                                                                4,
                                                                hook.call(_this)
                                                            ];
                                                        case 4:
                                                            _state.sent();
                                                            _state.label = 5;
                                                        case 5:
                                                            _iteratorNormalCompletion = true;
                                                            return [
                                                                3,
                                                                3
                                                            ];
                                                        case 6:
                                                            return [
                                                                3,
                                                                9
                                                            ];
                                                        case 7:
                                                            err = _state.sent();
                                                            _didIteratorError = true;
                                                            _iteratorError = err;
                                                            return [
                                                                3,
                                                                9
                                                            ];
                                                        case 8:
                                                            try {
                                                                if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                                    _iterator.return();
                                                                }
                                                            } finally{
                                                                if (_didIteratorError) {
                                                                    throw _iteratorError;
                                                                }
                                                            }
                                                            return [
                                                                7
                                                            ];
                                                        case 9:
                                                            return [
                                                                2
                                                            ];
                                                    }
                                                });
                                            }), _this.delay);
                                            break;
                                        }
                                    case "timeout":
                                        {
                                            f = function() {
                                                if (_this.active) {
                                                    _this.threadId = setTimeout(/*#__PURE__*/ thread_async_to_generator(function() {
                                                        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, hook, err;
                                                        return thread_ts_generator(this, function(_state) {
                                                            switch(_state.label){
                                                                case 0:
                                                                    return [
                                                                        4,
                                                                        _this.callback.call(_this)
                                                                    ];
                                                                case 1:
                                                                    _state.sent();
                                                                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                                                    _state.label = 2;
                                                                case 2:
                                                                    _state.trys.push([
                                                                        2,
                                                                        7,
                                                                        8,
                                                                        9
                                                                    ]);
                                                                    _iterator = chain[Symbol.iterator]();
                                                                    _state.label = 3;
                                                                case 3:
                                                                    if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                                                        3,
                                                                        6
                                                                    ];
                                                                    hook = _step.value;
                                                                    return [
                                                                        4,
                                                                        hook.call(_this)
                                                                    ];
                                                                case 4:
                                                                    _state.sent();
                                                                    _state.label = 5;
                                                                case 5:
                                                                    _iteratorNormalCompletion = true;
                                                                    return [
                                                                        3,
                                                                        3
                                                                    ];
                                                                case 6:
                                                                    return [
                                                                        3,
                                                                        9
                                                                    ];
                                                                case 7:
                                                                    err = _state.sent();
                                                                    _didIteratorError = true;
                                                                    _iteratorError = err;
                                                                    return [
                                                                        3,
                                                                        9
                                                                    ];
                                                                case 8:
                                                                    try {
                                                                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                                            _iterator.return();
                                                                        }
                                                                    } finally{
                                                                        if (_didIteratorError) {
                                                                            throw _iteratorError;
                                                                        }
                                                                    }
                                                                    return [
                                                                        7
                                                                    ];
                                                                case 9:
                                                                    return [
                                                                        2,
                                                                        f()
                                                                    ];
                                                            }
                                                        });
                                                    }), _this.delay);
                                                }
                                            };
                                            f();
                                            break;
                                        }
                                }
                                afterStart = _this.hooks.get("afterStart");
                                _state.label = 24;
                            case 24:
                                _state.trys.push([
                                    24,
                                    33,
                                    ,
                                    34
                                ]);
                                _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                                _state.label = 25;
                            case 25:
                                _state.trys.push([
                                    25,
                                    30,
                                    31,
                                    32
                                ]);
                                _iterator2 = afterStart[Symbol.iterator]();
                                _state.label = 26;
                            case 26:
                                if (!!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done)) return [
                                    3,
                                    29
                                ];
                                hook2 = _step2.value;
                                return [
                                    4,
                                    hook2.call(_this)
                                ];
                            case 27:
                                _state.sent();
                                _state.label = 28;
                            case 28:
                                _iteratorNormalCompletion2 = true;
                                return [
                                    3,
                                    26
                                ];
                            case 29:
                                return [
                                    3,
                                    32
                                ];
                            case 30:
                                err = _state.sent();
                                _didIteratorError2 = true;
                                _iteratorError2 = err;
                                return [
                                    3,
                                    32
                                ];
                            case 31:
                                try {
                                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                        _iterator2.return();
                                    }
                                } finally{
                                    if (_didIteratorError2) {
                                        throw _iteratorError2;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 32:
                                return [
                                    3,
                                    34
                                ];
                            case 33:
                                e2 = _state.sent();
                                console.log("Error while calling after-start hook", e2.message);
                                return [
                                    3,
                                    34
                                ];
                            case 34:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "stop",
            value: function stop() {
                var _this = this;
                return thread_async_to_generator(function() {
                    var preStop, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, hook, err, e, stopAborted, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _iterator1, _step1, hook1, err, e1, afterStop, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, hook2, err, e2;
                    return thread_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!_this.active) return [
                                    2
                                ];
                                preStop = _this.hooks.get("preStop");
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    10,
                                    ,
                                    11
                                ]);
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _state.label = 2;
                            case 2:
                                _state.trys.push([
                                    2,
                                    7,
                                    8,
                                    9
                                ]);
                                _iterator = preStop[Symbol.iterator]();
                                _state.label = 3;
                            case 3:
                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                    3,
                                    6
                                ];
                                hook = _step.value;
                                if (!!_this.aborted) return [
                                    3,
                                    5
                                ];
                                return [
                                    4,
                                    hook.call(_this)
                                ];
                            case 4:
                                _state.sent();
                                _state.label = 5;
                            case 5:
                                _iteratorNormalCompletion = true;
                                return [
                                    3,
                                    3
                                ];
                            case 6:
                                return [
                                    3,
                                    9
                                ];
                            case 7:
                                err = _state.sent();
                                _didIteratorError = true;
                                _iteratorError = err;
                                return [
                                    3,
                                    9
                                ];
                            case 8:
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 9:
                                return [
                                    3,
                                    11
                                ];
                            case 10:
                                e = _state.sent();
                                _this.aborted = true;
                                console.log("Error while calling pre-stop hook", e.message);
                                return [
                                    3,
                                    11
                                ];
                            case 11:
                                _this.active = false;
                                switch(_this.mode){
                                    case "tick":
                                        {
                                            clearTick(_this.threadId);
                                            break;
                                        }
                                    case "interval":
                                        {
                                            clearInterval(_this.threadId);
                                            break;
                                        }
                                    case "timeout":
                                        {
                                            clearTimeout(_this.threadId);
                                            break;
                                        }
                                }
                                if (!_this.aborted) return [
                                    3,
                                    23
                                ];
                                _state.label = 12;
                            case 12:
                                _state.trys.push([
                                    12,
                                    21,
                                    ,
                                    22
                                ]);
                                stopAborted = _this.hooks.get("stopAborted");
                                _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                                _state.label = 13;
                            case 13:
                                _state.trys.push([
                                    13,
                                    18,
                                    19,
                                    20
                                ]);
                                _iterator1 = stopAborted[Symbol.iterator]();
                                _state.label = 14;
                            case 14:
                                if (!!(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done)) return [
                                    3,
                                    17
                                ];
                                hook1 = _step1.value;
                                return [
                                    4,
                                    hook1.call(_this)
                                ];
                            case 15:
                                _state.sent();
                                _state.label = 16;
                            case 16:
                                _iteratorNormalCompletion1 = true;
                                return [
                                    3,
                                    14
                                ];
                            case 17:
                                return [
                                    3,
                                    20
                                ];
                            case 18:
                                err = _state.sent();
                                _didIteratorError1 = true;
                                _iteratorError1 = err;
                                return [
                                    3,
                                    20
                                ];
                            case 19:
                                try {
                                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                        _iterator1.return();
                                    }
                                } finally{
                                    if (_didIteratorError1) {
                                        throw _iteratorError1;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 20:
                                return [
                                    3,
                                    22
                                ];
                            case 21:
                                e1 = _state.sent();
                                console.log("Error while calling stop-aborted hook", e1.message);
                                return [
                                    3,
                                    22
                                ];
                            case 22:
                                return [
                                    2
                                ];
                            case 23:
                                afterStop = _this.hooks.get("afterStop");
                                _state.label = 24;
                            case 24:
                                _state.trys.push([
                                    24,
                                    33,
                                    ,
                                    34
                                ]);
                                _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
                                _state.label = 25;
                            case 25:
                                _state.trys.push([
                                    25,
                                    30,
                                    31,
                                    32
                                ]);
                                _iterator2 = afterStop[Symbol.iterator]();
                                _state.label = 26;
                            case 26:
                                if (!!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done)) return [
                                    3,
                                    29
                                ];
                                hook2 = _step2.value;
                                return [
                                    4,
                                    hook2.call(_this)
                                ];
                            case 27:
                                _state.sent();
                                _state.label = 28;
                            case 28:
                                _iteratorNormalCompletion2 = true;
                                return [
                                    3,
                                    26
                                ];
                            case 29:
                                return [
                                    3,
                                    32
                                ];
                            case 30:
                                err = _state.sent();
                                _didIteratorError2 = true;
                                _iteratorError2 = err;
                                return [
                                    3,
                                    32
                                ];
                            case 31:
                                try {
                                    if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                        _iterator2.return();
                                    }
                                } finally{
                                    if (_didIteratorError2) {
                                        throw _iteratorError2;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 32:
                                return [
                                    3,
                                    34
                                ];
                            case 33:
                                e2 = _state.sent();
                                console.log("Error while calling after-stop hook", e2.message);
                                return [
                                    3,
                                    34
                                ];
                            case 34:
                                return [
                                    2
                                ];
                        }
                    });
                })();
            }
        },
        {
            key: "abort",
            value: function abort() {
                this.aborted = true;
            }
        },
        {
            key: "addHook",
            value: function addHook(pHook, pCallback) {
                var _this_hooks_get;
                (_this_hooks_get = this.hooks.get(pHook)) === null || _this_hooks_get === void 0 ? void 0 : _this_hooks_get.push(pCallback);
            }
        }
    ]);
    return Thread;
}();

;// CONCATENATED MODULE: ./src/shared/controllers/bypass.ts
var BypassedModels = new Set([
    // Model hashes
    GetHashKey("npwheelchair")
]);
function IsVehicleBypassed(pVehicle) {
    var modelHash = GetEntityModel(pVehicle);
    return IsModelBypassed(modelHash);
}
function IsModelBypassed(pModel) {
    return BypassedModels.has(pModel) || IsThisModelABicycle(pModel);
}

;// CONCATENATED MODULE: ./src/client/controllers/threads/driver.ts
function driver_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function driver_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function driver_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function driver_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                driver_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                driver_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function driver_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function driver_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function driver_sliced_to_array(arr, i) {
    return driver_array_with_holes(arr) || driver_iterable_to_array_limit(arr, i) || driver_unsupported_iterable_to_array(arr, i) || driver_non_iterable_rest();
}
function driver_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return driver_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return driver_array_like_to_array(o, minLen);
}
function driver_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




function InitDriver() {
    return _InitDriver.apply(this, arguments);
}
function _InitDriver() {
    _InitDriver = driver_async_to_generator(function() {
        return driver_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitDriver.apply(this, arguments);
}
DecorRegister("Vehicle:Temperature", 3);
DecorRegister("PLAYER_VEHICLE", 3);
var driver_DriverThread = new Thread(/*#__PURE__*/ driver_async_to_generator(function() {
    var _GetVehicleTrailerVehicle, hasTrailer, trailerEntity;
    return driver_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                this.data.health = GetVehicleEngineHealth(this.data.vehicle);
                this.data.bodyHealth = GetVehicleBodyHealth(this.data.vehicle);
                this.data.speed = GetEntitySpeed(this.data.vehicle);
                return [
                    4,
                    VerifyEngineState(this.data.vehicle)
                ];
            case 1:
                _state.sent();
                if (this.data.health <= 0 || this.data.bodyHealth <= 50) {
                    TurnOffEngine(this.data.vehicle);
                }
                // TODO: Proper engine temperature simulation
                if (this.data.temperature > 0 && ++this.data.temperatureTick >= 2) {
                    this.data.temperatureTick = 0;
                    --this.data.temperature;
                }
                if (++this.data.trailerTick >= 2) {
                    _GetVehicleTrailerVehicle = driver_sliced_to_array(GetVehicleTrailerVehicle(this.data.vehicle), 2), hasTrailer = _GetVehicleTrailerVehicle[0], trailerEntity = _GetVehicleTrailerVehicle[1];
                    this.data.trailer = hasTrailer ? trailerEntity : 0;
                    this.data.trailerTick = 0;
                }
                if (this.data.trailer) {
                    this.data.trailerHealth = GetVehicleEngineHealth(this.data.trailer);
                    this.data.trailerBodyHealth = GetVehicleBodyHealth(this.data.trailer);
                }
                return [
                    2
                ];
        }
    });
}), 1000);
driver_DriverThread.addHook("preStart", function() {
    if (IsVehicleBypassed(CurrentVehicle) || !VerifyEngineState(CurrentVehicle)) return this.abort();
    DecorSetInt(CurrentVehicle, "PLAYER_VEHICLE", 1);
    this.data.vehicle = CurrentVehicle;
    this.data.netId = NetworkGetNetworkIdFromEntity(CurrentVehicle);
    this.data.hasLicense = HasLicense(this.data.vehicle);
    this.data.vehicleModel = GetEntityModel(this.data.vehicle);
    this.data.vehicleClass = GetVehicleClass(this.data.vehicle);
    if (this.data.hasLicense !== true) {
        TurnOffEngine(this.data.vehicle);
        return this.abort();
    }
    this.data.trailerTick = 0;
    this.data.temperatureTick = 0;
    this.data.temperature = DecorGetInt(this.data.vehicle, "Vehicle:Temperature") || 0;
});
driver_DriverThread.addHook("preStop", function() {
    DecorSetInt(this.data.vehicle, "Vehicle:Temperature", this.data.temperature);
});
driver_DriverThread.addHook("afterStop", function() {
    emit("noshud", 0, false);
});

;// CONCATENATED MODULE: ./src/client/controllers/threads/passenger.ts
function passenger_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function passenger_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                passenger_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                passenger_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function passenger_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var PassengerThread = new Thread(/*#__PURE__*/ passenger_async_to_generator(function() {
    return passenger_ts_generator(this, function(_state) {
        return [
            2
        ];
    });
}), 1000);
function InitPassenger() {
    return _InitPassenger.apply(this, arguments);
}
function _InitPassenger() {
    _InitPassenger = passenger_async_to_generator(function() {
        return passenger_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!(CurrentVehicle && CurrentSeat !== -1)) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        PassengerThread.start()
                    ];
                case 1:
                    _state.sent();
                    _state.label = 2;
                case 2:
                    return [
                        2
                    ];
            }
        });
    });
    return _InitPassenger.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/classes/animationTask.ts
function animationTask_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function animationTask_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                animationTask_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                animationTask_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function animationTask_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function animationTask_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function animationTask_create_class(Constructor, protoProps, staticProps) {
    if (protoProps) animationTask_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) animationTask_defineProperties(Constructor, staticProps);
    return Constructor;
}
function animationTask_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function animationTask_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var AnimationTask = /*#__PURE__*/ function() {
    "use strict";
    function AnimationTask(pPed, pType, pTxt, pDur, pDict, pAnim) {
        var pFlag = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : 1;
        animationTask_class_call_check(this, AnimationTask);
        animationTask_define_property(this, "ped", void 0);
        animationTask_define_property(this, "type", void 0);
        animationTask_define_property(this, "text", void 0);
        animationTask_define_property(this, "flag", void 0);
        animationTask_define_property(this, "duration", void 0);
        animationTask_define_property(this, "animation", void 0);
        animationTask_define_property(this, "dictionary", void 0);
        animationTask_define_property(this, "task", void 0);
        animationTask_define_property(this, "active", void 0);
        animationTask_define_property(this, "tickId", void 0);
        this.ped = pPed;
        this.type = pType;
        this.flag = pFlag;
        this.text = pTxt;
        this.active = false;
        this.duration = pDur;
        this.dictionary = pDict;
        this.animation = pAnim;
    }
    animationTask_create_class(AnimationTask, [
        {
            key: "start",
            value: function start(pTask) {
                var _this = this;
                if (this.active) return;
                this.active = true;
                if (pTask) {
                    pTask(this);
                }
                var _this1 = this;
                this.tickId = setTick(/*#__PURE__*/ animationTask_async_to_generator(function() {
                    return animationTask_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!(_this1.animation && !IsEntityPlayingAnim(_this1.ped, _this1.dictionary, _this1.animation, 3))) return [
                                    3,
                                    2
                                ];
                                return [
                                    4,
                                    LoadAnimationModel(_this1.dictionary)
                                ];
                            case 1:
                                _state.sent();
                                TaskPlayAnim(_this1.ped, _this1.dictionary, _this1.animation, -8.0, -8.0, -1, _this1.flag, 0, false, false, false);
                                return [
                                    3,
                                    3
                                ];
                            case 2:
                                if (!_this1.animation && !IsPedUsingScenario(_this1.ped, _this1.dictionary)) {
                                    TaskStartScenarioInPlace(_this1.ped, _this1.dictionary, 0, true);
                                }
                                _state.label = 3;
                            case 3:
                                return [
                                    4,
                                    Wait(100)
                                ];
                            case 4:
                                _state.sent();
                                return [
                                    2
                                ];
                        }
                    });
                }));
                var task;
                if (this.type === "skill" && _instanceof(this.duration, Array)) {
                    var _this2 = this;
                    task = new Promise(function() {
                        var _ref = animationTask_async_to_generator(function(resolve) {
                            var skills, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, skill, progress, err;
                            return animationTask_ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        skills = _this2.duration;
                                        _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                        _state.label = 1;
                                    case 1:
                                        _state.trys.push([
                                            1,
                                            6,
                                            7,
                                            8
                                        ]);
                                        _iterator = skills[Symbol.iterator]();
                                        _state.label = 2;
                                    case 2:
                                        if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                            3,
                                            5
                                        ];
                                        skill = _step.value;
                                        return [
                                            4,
                                            TaskbarMiniGame(skill.difficulty, skill.gap)
                                        ];
                                    case 3:
                                        progress = _state.sent();
                                        if (progress !== 100) return [
                                            2,
                                            resolve(0)
                                        ];
                                        _state.label = 4;
                                    case 4:
                                        _iteratorNormalCompletion = true;
                                        return [
                                            3,
                                            2
                                        ];
                                    case 5:
                                        return [
                                            3,
                                            8
                                        ];
                                    case 6:
                                        err = _state.sent();
                                        _didIteratorError = true;
                                        _iteratorError = err;
                                        return [
                                            3,
                                            8
                                        ];
                                    case 7:
                                        try {
                                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                                _iterator.return();
                                            }
                                        } finally{
                                            if (_didIteratorError) {
                                                throw _iteratorError;
                                            }
                                        }
                                        return [
                                            7
                                        ];
                                    case 8:
                                        resolve(100);
                                        return [
                                            2
                                        ];
                                }
                            });
                        });
                        return function(resolve) {
                            return _ref.apply(this, arguments);
                        };
                    }());
                } else if (this.type === "normal" && typeof this.duration === "number") {
                    task = Taskbar(this.duration, this.text);
                }
                task.then(function() {
                    _this.stop();
                });
                return task;
            }
        },
        {
            key: "stop",
            value: function stop() {
                if (!this.active) return;
                this.active = false;
                clearTick(this.tickId);
                if (!this.animation && IsPedUsingScenario(this.ped, this.dictionary)) {
                    ClearPedTasks(this.ped);
                } else {
                    StopAnimTask(this.ped, this.dictionary, this.animation, 3.0);
                }
            }
        },
        {
            key: "abort",
            value: function abort() {
                if (this.active) {
                    __webpack_require__.g.exports["np-taskbar"].taskCancel();
                    this.stop();
                }
            }
        }
    ]);
    return AnimationTask;
}();

;// CONCATENATED MODULE: ./src/shared/utils/tools.ts
function utils_tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function utils_tools_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                utils_tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                utils_tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function utils_tools_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var Throttled = new Set();
function PromiseTimeout() {
    return _PromiseTimeout.apply(this, arguments);
}
function _PromiseTimeout() {
    _PromiseTimeout = utils_tools_async_to_generator(function() {
        var pTime;
        var _arguments = arguments;
        return utils_tools_ts_generator(this, function(_state) {
            pTime = _arguments.length > 0 && _arguments[0] !== void 0 ? _arguments[0] : 1000;
            return [
                2,
                new Promise(function(resolve) {
                    return setTimeout(function() {
                        return resolve(false);
                    }, pTime);
                })
            ];
        });
    });
    return _PromiseTimeout.apply(this, arguments);
}
function GetRandom(pMin, pMax) {
    var random = pMax ? Math.random() * (pMax - pMin) + pMin : Math.random() * pMin;
    return Number.isInteger(pMin) ? Math.round(random) : random;
}
function tools_Clamp(pValue, pMin, pMax) {
    return Math.min(Math.max(pValue, pMin), pMax);
}
function Capitalize(pString) {
    return pString.charAt(0).toUpperCase() + pString.slice(1);
}
function Throttle(pName) {
    var pTime = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 500;
    if (!Throttled.has(pName)) {
        Throttled.add(pName);
        setTimeout(function() {
            return Throttled.delete(pName);
        }, pTime);
        return false;
    }
    return true;
}
function IsThrottled(pName) {
    return Throttled.has(pName);
}
function GetFormattedNumber() {
    var pNumber = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    return "".concat(new Intl.NumberFormat().format(pNumber));
}
function utils_tools_LoadEntityModel(pModel, pTimeout) {
    return shared_utils_tools_LoadEntityModel.apply(this, arguments);
}
function shared_utils_tools_LoadEntityModel() {
    shared_utils_tools_LoadEntityModel = utils_tools_async_to_generator(function(pModel, pTimeout) {
        var model, timeout;
        return utils_tools_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    model = typeof pModel === "string" ? GetHashKey(pModel) : pModel;
                    if (!(model && !HasModelLoaded(model))) return [
                        3,
                        3
                    ];
                    timeout = false;
                    RequestModel(model);
                    setTimeout(function() {
                        return timeout = true;
                    }, pTimeout);
                    _state.label = 1;
                case 1:
                    if (!(!HasModelLoaded(model) && !timeout)) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        new Promise(function(res) {
                            return setTimeout(res, 10);
                        })
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        1
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return shared_utils_tools_LoadEntityModel.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/utils/vectors.ts
function vectors_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function vectors_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function vectors_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function vectors_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                vectors_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                vectors_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function vectors_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function vectors_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function vectors_sliced_to_array(arr, i) {
    return vectors_array_with_holes(arr) || vectors_iterable_to_array_limit(arr, i) || vectors_unsupported_iterable_to_array(arr, i) || vectors_non_iterable_rest();
}
function vectors_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return vectors_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return vectors_array_like_to_array(o, minLen);
}
function vectors_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

function GetDistance(param, param1) {
    var _param = vectors_sliced_to_array(param, 3), aX = _param[0], aY = _param[1], aZ = _param[2], _param1 = vectors_sliced_to_array(param1, 3), bX = _param1[0], bY = _param1[1], bZ = _param1[2], useZ = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    return GetDistanceBetweenCoords(aX, aY, aZ, bX, bY, bZ, useZ);
}
function GetBonePosition(pEntity, pType, pBone) {
    var bone;
    if (pType === 1 && typeof pBone === "number") {
        bone = GetPedBoneIndex(pEntity, pBone);
    } else if (pType === 2 && typeof pBone === "string") {
        bone = GetEntityBoneIndexByName(pEntity, pBone);
    }
    return GetWorldPositionOfEntityBone(pEntity, bone);
}
function GetBoneDistance(pEntity, pType, pBone, pCoords) {
    var coords = pCoords ? pCoords : GetEntityCoords(PlayerPedId(), false);
    return GetDistance(GetBonePosition(pEntity, pType, pBone), coords);
}
function GetFrontOffset(pVehicle) {
    var _GetModelDimensions = vectors_sliced_to_array(GetModelDimensions(GetEntityModel(pVehicle)), 2), _ = _GetModelDimensions[0], maxDim = _GetModelDimensions[1];
    return GetOffsetFromEntityInWorldCoords(pVehicle, 0.0, maxDim[1] + 0.5, 0.0);
}
function GetRearOffset(pVehicle) {
    var _GetModelDimensions = vectors_sliced_to_array(GetModelDimensions(GetEntityModel(pVehicle)), 1), minDim = _GetModelDimensions[0];
    return GetOffsetFromEntityInWorldCoords(pVehicle, 0.0, minDim[1] - 0.5, 0.0);
}
function GetEnginePosition(pVehicle) {
    var rearOffset = GetRearOffset(pVehicle);
    var rearDistance = GetBoneDistance(pVehicle, 2, "engine", rearOffset);
    if (rearDistance <= 2.0) return rearOffset;
    return GetFrontOffset(pVehicle);
}
function GetClosestBone(pEntity, pBones) {
    var boneId, boneName, distance, coords;
    var playerCoords = GetEntityCoords(PlayerPedId(), false);
    pBones.forEach(function(bone) {
        var index = GetEntityBoneIndexByName(pEntity, bone);
        if (index === -1) return;
        var boneCoords = GetWorldPositionOfEntityBone(pEntity, index);
        var boneDistance = GetDistance(playerCoords, boneCoords, false);
        if (!boneId || boneDistance < distance) {
            boneId = index;
            boneName = bone;
            coords = boneCoords;
            distance = boneDistance;
        }
    });
    return [
        boneId,
        boneName,
        distance,
        coords
    ];
}
function PedFaceCoord(pPed, _) {
    return _PedFaceCoord.apply(this, arguments);
}
function _PedFaceCoord() {
    _PedFaceCoord = vectors_async_to_generator(function(pPed, param) {
        var _param, x, y, z;
        return vectors_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _param = vectors_sliced_to_array(param, 3), x = _param[0], y = _param[1], z = _param[2];
                    TaskTurnPedToFaceCoord(pPed, x, y, z, 0);
                    return [
                        4,
                        Wait(100)
                    ];
                case 1:
                    _state.sent();
                    _state.label = 2;
                case 2:
                    if (!(GetScriptTaskStatus(pPed, 0x574bb8f5) === 1)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        Wait(0)
                    ];
                case 3:
                    _state.sent();
                    return [
                        3,
                        2
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _PedFaceCoord.apply(this, arguments);
}
function PedFaceEntity(pPed, pEntity) {
    return _PedFaceEntity.apply(this, arguments);
}
function _PedFaceEntity() {
    _PedFaceEntity = vectors_async_to_generator(function(pPed, pEntity) {
        return vectors_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    TaskTurnPedToFaceEntity(pPed, pEntity, 0);
                    return [
                        4,
                        Wait(100)
                    ];
                case 1:
                    _state.sent();
                    _state.label = 2;
                case 2:
                    if (!(GetScriptTaskStatus(pPed, 0xcbce4595) === 1)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        Wait(0)
                    ];
                case 3:
                    _state.sent();
                    return [
                        3,
                        2
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _PedFaceEntity.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/systems/fuel.ts
function fuel_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function fuel_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function fuel_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function fuel_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                fuel_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                fuel_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function fuel_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function fuel_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function fuel_sliced_to_array(arr, i) {
    return fuel_array_with_holes(arr) || fuel_iterable_to_array_limit(arr, i) || fuel_unsupported_iterable_to_array(arr, i) || fuel_non_iterable_rest();
}
function fuel_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return fuel_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return fuel_array_like_to_array(o, minLen);
}
function fuel_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}









function InitFuel() {
    return _InitFuel.apply(this, arguments);
}
function _InitFuel() {
    _InitFuel = fuel_async_to_generator(function() {
        return fuel_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitFuel.apply(this, arguments);
}
var JERRYCAN_CAPACITY = 35;
var NEWS_HELI = GetHashKey("newsmav");
var fuelConfig = {
    fuelDrainBase: 0.99995,
    heliFuelDrainRate: 7,
    fuelHealthModifier: 400
};
var fuelConfigs = {
    fuelDrainBase: 0.99995,
    heliFuelDrainRate: 7,
    fuelHealthModifier: 400
};

function GetVehicleFuel(pVehicle) {
    return GetVehicleMetadata(pVehicle, "fuel") || 0;
}
function GetCurrentVehicleFuel() {
    return CurrentVehicle && GetVehicleFuel(CurrentVehicle) || 0;
// return CurrentSeat ? (CurrentSeat == -1 ? DriverThread.data.fuel : PassengerThread.data.fuel) : 0;
}
function UpdateUsedFuel(pVehicle, pCurrentFuel) {
    var previousFuel = GetVehicleFuel(pVehicle);
    var usedFuel = previousFuel - pCurrentFuel;
    if (usedFuel > 0) {
        TriggerServerEvent("np:vehicles:reduceFuel", NetworkGetNetworkIdFromEntity(pVehicle), usedFuel);
    }
}
function EmitLowFuelSound() {
    return _EmitLowFuelSound.apply(this, arguments);
}
function _EmitLowFuelSound() {
    _EmitLowFuelSound = fuel_async_to_generator(function() {
        var i;
        return fuel_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    emit("DoLongHudText", "Low fuel.", 1);
                    i = 1;
                    _state.label = 1;
                case 1:
                    if (!(i < 4)) return [
                        3,
                        4
                    ];
                    PlaySound(-1, "5_SEC_WARNING", "HUD_MINI_GAME_SOUNDSET", false, 0, true);
                    return [
                        4,
                        Wait(150 * i)
                    ];
                case 2:
                    _state.sent();
                    _state.label = 3;
                case 3:
                    i++;
                    return [
                        3,
                        1
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _EmitLowFuelSound.apply(this, arguments);
}
function isVehicleDoorOpen(pVehicle, pDoor) {
    return GetVehicleDoorAngleRatio(pVehicle, pDoor) > 0.1;
}
driver_DriverThread.addHook("preStart", function() {
    this.data.fuelTick = 0;
    this.data.fuelWarningTick = 0;
    this.data.vehicleHealth = 1000.0;
    fuelConfig = fuelConfigs;
    var vehicleModel = GetEntityModel(CurrentVehicle);
    this.data.isHelicopter = IsThisModelAHeli(vehicleModel);
    this.data.isNewsHelicopter = vehicleModel == NEWS_HELI;
});
driver_DriverThread.addHook("afterStart", function() {
    this.data.fuel = GetVehicleFuel(CurrentVehicle);
    SetVehicleFuelLevel(this.data.vehicle, 100);
});
driver_DriverThread.addHook("active", function() {
    var healthModifier = this.data.vehicleHealth / 400;
    var drainRate = Math.max(2 - healthModifier, 1);
    if (this.data.isHelicopter && !this.data.isNewsHelicopter) {
        drainRate = 7 - healthModifier;
    }
    this.data.fuel -= 0.99995 * (this.data.speed ^ 2) * drainRate / 1000;
    if (this.data.speed > 5.0 && isVehicleDoorOpen(CurrentVehicle, 5)) {
        SetVehicleDoorShut(CurrentVehicle, 5, true);
    }
    // if (++this.data.fuelTick > 15) {
    //     this.data.fuelTick = 0;
    //     UpdateUsedFuel(this.data.vehicle, this.data.fuel);
    //     SetVehicleFuelLevel(this.data.vehicle, this.data.fuel);
    //     this.data.vehicleHealth = GetVehicleDamage(CurrentVehicle, "engine");
    // }
});
driver_DriverThread.addHook("active", function() {
    if (++this.data.fuelWarningTick > 45) {
        this.data.fuelWarningTick = 0;
        if (this.data.fuel <= 15.0) {
            EmitLowFuelSound();
        }
    }
    if (this.data.fuel <= 1.0) {
        EmitLowFuelSound();
        TurnOffEngine(CurrentVehicle);
    }
});
driver_DriverThread.addHook("afterStop", function() {
    UpdateUsedFuel(this.data.vehicle, this.data.fuel);
    this.data.fuel = 0;
    this.data.fuelTick = 0;
    this.data.fuelWarningTick = 0;
});
PassengerThread.addHook("preStart", function() {
    this.data.fuel = GetVehicleFuel(CurrentVehicle);
});
PassengerThread.addHook("active", function() {
    this.data.fuel = GetVehicleFuel(CurrentVehicle);
});
driver_DriverThread.addHook("afterStop", function() {
    this.data.fuel = 0;
});
function GetVehicleRefuelCost(pFuelLevel) {
    return _GetVehicleRefuelCost.apply(this, arguments);
}
function _GetVehicleRefuelCost() {
    _GetVehicleRefuelCost = fuel_async_to_generator(function(pFuelLevel) {
        var pTankSize, pHeli, _ref, taxLevel, fuelPrice, fuelLevel, cost;
        var _arguments = arguments;
        return fuel_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pTankSize = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : 100, pHeli = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : false;
                    return [
                        4,
                        RPC.execute("np:vehicles:getFuelPrice", 1)
                    ];
                case 1:
                    _ref = _state.sent(), taxLevel = _ref.taxLevel, fuelPrice = _ref.fuelPrice;
                    fuelLevel = pFuelLevel || 0;
                    cost = Math.floor((pTankSize - fuelLevel) * fuelPrice * (1 + taxLevel / 100));
                    if (pHeli) {
                        cost = Math.floor(cost * 0.25);
                    }
                    return [
                        2,
                        [
                            taxLevel,
                            cost
                        ]
                    ];
            }
        });
    });
    return _GetVehicleRefuelCost.apply(this, arguments);
}
function RefuelVehicle(pVehicle, pCost) {
    return _RefuelVehicle.apply(this, arguments);
}
function _RefuelVehicle() {
    _RefuelVehicle = fuel_async_to_generator(function(pVehicle, pCost) {
        var pHeli, pIsJerryCan, pPumpId, playerPed, fuelLevel, fuelAvailable, refuelTime, animation, result, _ref, cash, fuelAdded, jerryCanNewFuel, netId;
        var _arguments = arguments;
        return fuel_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pHeli = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : false, pIsJerryCan = _arguments.length > 3 && _arguments[3] !== void 0 ? _arguments[3] : false, pPumpId = _arguments.length > 4 ? _arguments[4] : void 0;
                    playerPed = PlayerPedId();
                    fuelLevel = GetVehicleFuel(pVehicle) || 0;
                    fuelAvailable = 100 - fuelLevel;
                    refuelTime = fuelAvailable * 500;
                    if (pIsJerryCan) {
                        // We convert the jerry can ammo to fuel units
                        fuelAvailable = GetAmmoInPedWeapon(playerPed, 883325847) * 100 / 4500 * JERRYCAN_CAPACITY / 100;
                        refuelTime = Math.floor(fuelAvailable * 2 * 1000);
                    }
                    if (IsThisModelAHeli(GetEntityModel(pVehicle))) refuelTime *= 2;
                    TaskTurnPedToFaceEntity(playerPed, pVehicle, -1);
                    animation = new AnimationTask(PlayerPedId(), "normal", "Refueling", refuelTime, "weapon@w_sp_jerrycan", "fire");
                    return [
                        4,
                        animation.start(function(self) {
                            var tick = setInterval(function() {
                                if (!self.active) clearInterval(tick);
                                if (IsVehicleEngineOn(pVehicle) && GetRandom(100) > 98) {
                                    __webpack_require__.g.exports["np-sync"].SyncedExecution("NetworkExplodeVehicle", pVehicle, 1, 0, 0);
                                    self.abort();
                                }
                            }, 2000);
                        })
                    ];
                case 1:
                    result = _state.sent();
                    return [
                        4,
                        RPC.execute("GetCurrentCash")
                    ];
                case 2:
                    _ref = fuel_sliced_to_array.apply(void 0, [
                        _state.sent(),
                        1
                    ]), cash = _ref[0];
                    if (cash < pCost) {
                        emit("DoLongHudText", "You can't afford it, you're missing $".concat(pCost - cash), 1, 12000, {
                            i18n: [
                                "You can't afford it, you're missing"
                            ]
                        });
                        return [
                            2
                        ];
                    }
                    fuelAdded = result * fuelAvailable / 100;
                    if (pIsJerryCan) {
                        jerryCanNewFuel = Math.floor((fuelAvailable - fuelAdded) * 100 / 30 * 4500 / 100);
                        SetPedAmmo(playerPed, 883325847, jerryCanNewFuel);
                    // TriggerEvent('actionbar:setEmptyHanded', true);
                    }
                    if (!(fuelAdded > 0)) return [
                        3,
                        4
                    ];
                    netId = NetworkGetNetworkIdFromEntity(pVehicle);
                    return [
                        4,
                        RPC.execute("np:vehicles:addFuel", netId, fuelAdded, 1, pIsJerryCan, pHeli, pPumpId)
                    ];
                case 3:
                    _state.sent();
                    __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleFuelLevel", pVehicle, fuelLevel + fuelAdded);
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _RefuelVehicle.apply(this, arguments);
}
function GetJerryCanFuelLevel() {
    return GetAmmoInPedWeapon(PlayerPedId(), 883325847) * 100 / 4500 * JERRYCAN_CAPACITY / 100;
}
function RefillJerryCan(pEntity) {
    return _RefillJerryCan.apply(this, arguments);
}
function _RefillJerryCan() {
    _RefillJerryCan = fuel_async_to_generator(function(pEntity) {
        var playerPed, fuelLevel, missingFuel, refuelTime, animation, result, fuelAdded;
        return fuel_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    playerPed = PlayerPedId();
                    fuelLevel = GetAmmoInPedWeapon(playerPed, 883325847) * 100 / 4500 * JERRYCAN_CAPACITY / 100;
                    missingFuel = JERRYCAN_CAPACITY - fuelLevel;
                    refuelTime = missingFuel * 800;
                    return [
                        4,
                        PedFaceEntity(playerPed, pEntity)
                    ];
                case 1:
                    _state.sent();
                    animation = new AnimationTask(PlayerPedId(), "normal", "Refilling Jerry Can", refuelTime, "weapon@w_sp_jerrycan", "fire");
                    return [
                        4,
                        animation.start()
                    ];
                case 2:
                    result = _state.sent();
                    fuelAdded = result * missingFuel / 100;
                    if (!(fuelAdded > 0)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        RPC.execute("np:vehicles:refillJerryCan", fuelAdded)
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _RefillJerryCan.apply(this, arguments);
}
__webpack_require__.g.exports("CurrentFuel", GetCurrentVehicleFuel);
__webpack_require__.g.exports("GetVehicleFuel", GetVehicleFuel);

;// CONCATENATED MODULE: ./src/client/controllers/systems/handling.ts
function handling_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function handling_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function handling_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function handling_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                handling_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                handling_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function handling_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function handling_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function handling_sliced_to_array(arr, i) {
    return handling_array_with_holes(arr) || handling_iterable_to_array_limit(arr, i) || handling_unsupported_iterable_to_array(arr, i) || handling_non_iterable_rest();
}
function handling_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return handling_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return handling_array_like_to_array(o, minLen);
}
function handling_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




var CleanHandling = new Map();
function InitHandling() {
    return _InitHandling.apply(this, arguments);
}
function _InitHandling() {
    _InitHandling = handling_async_to_generator(function() {
        return handling_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitHandling.apply(this, arguments);
}
var HandlingFields = [
    "fBrakeForce",
    "fClutchChangeRateScaleDownShift",
    "fClutchChangeRateScaleUpShift",
    "fCollisionDamageMult",
    "fDeformationDamageMult",
    "fDriveBiasFront",
    "fDriveInertia",
    "fEngineDamageMult",
    "fHandBrakeForce",
    "fInitialDragCoeff",
    "fInitialDriveForce",
    "fInitialDriveMaxFlatVel",
    "fLowSpeedTractionLossMult",
    "fSteeringLock",
    "fSuspensionCompDamp",
    "fSuspensionForce",
    "fSuspensionReboundDamp",
    "fTractionBiasFront",
    "fTractionCurveMax",
    "fTractionCurveMin",
    "fTractionLossMult",
    "fWeaponDamageMult"
];
var IntHandlingFields = [
    "strHandlingFlags"
];
function GetCleanHandling(pVehicle) {
    if (!DoesEntityExist(pVehicle) || !IsEntityAVehicle(pVehicle)) return;
    if (!CleanHandling.has(pVehicle)) {
        var handling = {};
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = HandlingFields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var field = _step.value;
                handling[field] = GetVehicleHandlingFloat(pVehicle, "CHandlingData", field);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
        try {
            for(var _iterator1 = IntHandlingFields[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                var field1 = _step1.value;
                handling[field1] = GetVehicleHandlingInt(pVehicle, "CHandlingData", field1);
            }
        } catch (err) {
            _didIteratorError1 = true;
            _iteratorError1 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                    _iterator1.return();
                }
            } finally{
                if (_didIteratorError1) {
                    throw _iteratorError1;
                }
            }
        }
        Object.freeze(handling);
        CleanHandling.set(pVehicle, handling);
    }
    return CleanHandling.get(pVehicle);
}
function GetHandlingContexts(pVehicle) {
    var multipliers = GetVehicleMetadata(pVehicle, "handling");
    if (!multipliers) return;
    return multipliers;
}
function handling_SetHandlingContextMultiplier(pVehicle, pHandling, pContext, pValueType, pValue) {
    var pPriority = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 1;
    var isCurrentVehicle = driver_DriverThread.isActive && driver_DriverThread.data.vehicle === pVehicle;
    var handlingMultipliers = isCurrentVehicle ? driver_DriverThread.data.handling : GetHandlingContexts(pVehicle);
    if (!handlingMultipliers[pHandling]) handlingMultipliers[pHandling] = {};
    handlingMultipliers[pHandling][pContext] = {
        value: pValue,
        type: pValueType,
        priority: pPriority
    };
}
function handling_ResetHandlingContextMultipier(pVehicle, pHandling, pContext) {
    var isCurrentVehicle = driver_DriverThread.isActive && driver_DriverThread.data.vehicle === pVehicle;
    var handlingMultipliers = isCurrentVehicle ? driver_DriverThread.data.handling : GetHandlingContexts(pVehicle);
    if (!handlingMultipliers[pHandling]) handlingMultipliers[pHandling] = {};
    delete handlingMultipliers[pHandling][pContext];
}
function GetHandlingMultiplier(pVehicle, pHandling) {
    var isCurrentVehicle = driver_DriverThread.isActive && driver_DriverThread.data.vehicle === pVehicle;
    var handlingMultipliers = isCurrentVehicle ? driver_DriverThread.data.handling : GetHandlingContexts(pVehicle);
    if (!handlingMultipliers) return;
    var getValue = function(pVehicle, handling) {
        var context = handlingMultipliers[handling];
        var defaultValue = GetCleanHandling(pVehicle)[handling];
        if (!context) return defaultValue;
        /*
        ------ GENERIC REGISTERED PRIORITIES ------
        - 0: Degradation / Stalls (ALWAYS applied)
        - 1: Default
        - 2: Nitro / Pursuit Modes
        */ var highestPriority = Object.values(context).sort(function(a, b) {
            return b.priority - a.priority;
        })[0];
        if (!highestPriority) return defaultValue;
        var value = highestPriority.value, type = highestPriority.type;
        var resultValue = defaultValue;
        if (type === "fixed") {
            resultValue = value;
        }
        if (type === "multiplier") {
            resultValue = defaultValue * value;
        }
        if (type === "divider") {
            resultValue = defaultValue / value;
        }
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = Object.values(context).filter(function(param) {
                var priority = param.priority;
                return priority === 0;
            })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var defaultValues = _step.value;
                if (defaultValues.type === "multiplier") {
                    resultValue = resultValue * defaultValues.value;
                }
                if (defaultValues.type === "divider") {
                    resultValue = resultValue / defaultValues.value;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        return resultValue;
    };
    if (pHandling) return getValue(pVehicle, pHandling);
    var multipliers = {};
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = HandlingFields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var field = _step.value;
            multipliers[field] = getValue(pVehicle, field);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
    try {
        for(var _iterator1 = IntHandlingFields[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
            var field1 = _step1.value;
            multipliers[field1] = getValue(pVehicle, field1);
        }
    } catch (err) {
        _didIteratorError1 = true;
        _iteratorError1 = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                _iterator1.return();
            }
        } finally{
            if (_didIteratorError1) {
                throw _iteratorError1;
            }
        }
    }
    return multipliers;
}
function handling_ApplyHandlingMultipliers(pVehicle, pHandling) {
    var cleanHandling = GetCleanHandling(pVehicle);
    var multipliers = GetHandlingMultiplier(pVehicle, pHandling);
    var applyHandling = function(handling, value) {
        var cleanValue = cleanHandling[handling];
        if (cleanValue !== value) {
            Debug("Clean: ".concat(cleanValue, " | Modified: ").concat(value, " | Handling: ").concat(handling));
        }
        if (IntHandlingFields.includes(handling)) {
            SetVehicleHandlingInt(pVehicle, "CHandlingData", handling, value);
        } else {
            SetVehicleHandlingFloat(pVehicle, "CHandlingData", handling, value);
        }
    };
    if (typeof multipliers === "number") {
        applyHandling(pHandling, multipliers);
    } else {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = Object.entries(multipliers)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _step_value = handling_sliced_to_array(_step.value, 2), handling = _step_value[0], multiplier = _step_value[1];
                applyHandling(handling, multiplier);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    // SetVehicleEnginePowerMultiplier(pVehicle, 0.0);
    SetVehiclePetrolTankHealth(pVehicle, 4000.0);
    SetVehicleHasBeenOwnedByPlayer(pVehicle, true);
}
function ApplyHandlingDefaults(pVehicle) {
    // const cleanHandling = GetCleanHandling(pVehicle);
    var config = config_GetModuleConfig("np-vehicles:handling");
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.entries(config.vehicleDefaults)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = handling_sliced_to_array(_step.value, 2), key = _step_value[0], definition = _step_value[1];
            handling_SetHandlingContextMultiplier(pVehicle, key, "default", definition.type, definition.value, 1);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    // const steeringLock = Math.ceil(cleanHandling['fSteeringLock'] * 0.6) + 0.1;
    // SetHandlingContextMultiplier(pVehicle, 'fSteeringLock', 'default', 'fixed', steeringLock, 1);
    var model = GetEntityModel(pVehicle);
    if (IsThisModelABike(model)) {
        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
        try {
            for(var _iterator1 = Object.entries(config.bikeDefaults)[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                var _step_value1 = handling_sliced_to_array(_step1.value, 2), key1 = _step_value1[0], definition1 = _step_value1[1];
                handling_SetHandlingContextMultiplier(pVehicle, key1, "default", definition1.type, definition1.value, 1);
            }
        } catch (err) {
            _didIteratorError1 = true;
            _iteratorError1 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                    _iterator1.return();
                }
            } finally{
                if (_didIteratorError1) {
                    throw _iteratorError1;
                }
            }
        }
    } else {
        var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;
        try {
            for(var _iterator2 = Object.entries(config.nonBikeDefaults)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){
                var _step_value2 = handling_sliced_to_array(_step2.value, 2), key2 = _step_value2[0], definition2 = _step_value2[1];
                handling_SetHandlingContextMultiplier(pVehicle, key2, "default", definition2.type, definition2.value, 1);
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                }
            } finally{
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
    }
}
var MassResetHandlingContextMultipier = function(pVehicle, pHandlings, pContext) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = pHandlings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var handling = _step.value;
            handling_ResetHandlingContextMultipier(pVehicle, handling, pContext);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    handling_ApplyHandlingMultipliers(pVehicle);
};
var MassSetHandlingContextMultipier = function(pVehicle, pHandlings, pContext) {
    var pPriority = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.entries(pHandlings)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = handling_sliced_to_array(_step.value, 2), handling = _step_value[0], definition = _step_value[1];
            handling_SetHandlingContextMultiplier(pVehicle, handling, pContext, definition.type, definition.value, pPriority);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    handling_ApplyHandlingMultipliers(pVehicle);
};
driver_DriverThread.addHook("preStart", function() {
    this.data.handling = GetHandlingContexts(this.data.vehicle);
});
driver_DriverThread.addHook("afterStart", function() {
    ApplyHandlingDefaults(this.data.vehicle);
    handling_ApplyHandlingMultipliers(this.data.vehicle);
});
on("onResourceStop", function(resourceName) {
    if (resourceName !== GetCurrentResourceName()) return;
    CleanHandling.forEach(function(cleanHandling, vehicle) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = Object.entries(cleanHandling)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var _step_value = handling_sliced_to_array(_step.value, 2), handling = _step_value[0], value = _step_value[1];
                SetVehicleHandlingFloat(vehicle, "CHandlingData", handling, value);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    });
});
on("baseevents:enteredVehicle", function() {
    var _ref = handling_async_to_generator(function(vehicle) {
        var vehicleClass, isInSubmarine;
        return handling_ts_generator(this, function(_state) {
            SetPedConfigFlag(PlayerPedId(), 35, false);
            vehicleClass = GetVehicleClass(vehicle);
            isInSubmarine = GetCamActiveViewModeContext() == 5;
            if (vehicleClass == 15 || vehicleClass == 16) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                SetAudioSubmixEffectParamInt(0, 0, GetHashKey("enabled"), 1);
                SetAudioFlag("DisableFlightMusic", true);
            }
            if (isInSubmarine) {
                SetAudioFlag("DisableFlightMusic", true);
            }
            return [
                2
            ];
        });
    });
    return function(vehicle) {
        return _ref.apply(this, arguments);
    };
}());
on("baseevents:leftVehicle", function() {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    SetAudioSubmixEffectParamInt(0, 0, GetHashKey("enabled"), 0);
});
__webpack_require__.g.exports("SetHandlingContextMultiplier", handling_SetHandlingContextMultiplier);
__webpack_require__.g.exports("ResetHandlingContextMultipier", handling_ResetHandlingContextMultipier);
__webpack_require__.g.exports("ApplyHandlingMultipliers", handling_ApplyHandlingMultipliers);
__webpack_require__.g.exports("MassSetHandlingContextMultipier", MassSetHandlingContextMultipier);
__webpack_require__.g.exports("MassResetHandlingContextMultipier", MassResetHandlingContextMultipier);

;// CONCATENATED MODULE: ./src/client/controllers/vehicle.ts
function vehicle_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function vehicle_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                vehicle_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                vehicle_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function vehicle_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}








var CurrentVehicle;
var PreviousVehicle;
var CurrentSeat;
var PreviousSeat;
var InVehicle;
var StalledVehicle;
var LastStalledTimeGrace = 0;
var isDispatchOpen = false;
var isEngineKeybindDisabled = false;
function InitVehicle() {
    var playerPed = PlayerPedId();
    CurrentVehicle = GetVehiclePedIsIn(playerPed, false);
    CurrentSeat = CurrentVehicle ? GetPedVehicleSeat(playerPed, CurrentVehicle) : null;
}
function GetVehicleMetadata(pVehicle, pKey) {
    var bag = GetStateBag(pVehicle);
    if (bag) {
        var _bag_state_data, _bag_state;
        return pKey ? (_bag_state_data = bag.state.data) === null || _bag_state_data === void 0 ? void 0 : _bag_state_data[pKey] : (_bag_state = bag.state) === null || _bag_state === void 0 ? void 0 : _bag_state.data;
    }
}
function UpdateCurrentVehicle() {
    var playerPed = PlayerPedId();
    PreviousVehicle = CurrentVehicle;
    CurrentVehicle = GetVehiclePedIsIn(playerPed, false);
    PreviousSeat = CurrentSeat;
    CurrentSeat = CurrentVehicle ? GetPedVehicleSeat(playerPed, CurrentVehicle) : null;
    InVehicle = !!CurrentVehicle;
}
function CalculateStallTime(pSpeedDiff, pEngineHealth) {
    var config = GetModuleConfig("np-vehicles", "stall");
    var minStallTime = config.minStallTime, maxStallTime = config.maxStallTime;
    var maxStallTimeFromEngineHealth = config.maxStallTimeFromEngineHealth;
    var maxStallTimeFromSpeedDiff = config.maxStallTimeFromSpeedDiff;
    var speedDiffFactor = Math.min(pSpeedDiff / 4.0 * 1000, maxStallTimeFromSpeedDiff);
    var engineHealthFactor = pEngineHealth <= 0.0 ? maxStallTimeFromEngineHealth : (1.0 - pEngineHealth / 1000) * maxStallTimeFromEngineHealth;
    var stallTime = Clamp(speedDiffFactor + engineHealthFactor, minStallTime, maxStallTime);
    return stallTime;
}
function StallEngine(pVehicle, pDuration) {
    var config = GetModuleConfig("np-vehicles", "stall");
    if (LastStalledTimeGrace > GetGameTimer()) {
        return;
    }
    StalledVehicle = pVehicle;
    LastStalledTimeGrace = GetGameTimer() + config.gracePeriod;
    if (config.handbrakeTime > 0) {
        SyncedExecution("SetVehicleHandbrake", pVehicle, true);
        setTimeout(function() {
            SyncedExecution("SetVehicleHandbrake", pVehicle, false);
        }, config.handbrakeTime);
    }
    setTimeout(function() {
        PlayEntitySound(pVehicle, "Engine_fail", "DLC_PILOT_ENGINE_FAILURE_SOUNDS", 5000);
    }, 2250);
    SetHandlingContextMultiplier(pVehicle, "fInitialDriveForce", "stall", "multiplier", config.driveForceMultiplier, 0);
    ApplyHandlingMultipliers(pVehicle, "fInitialDriveForce");
    emit("np-vehicles:vehicleStalled", pVehicle);
    setTimeout(function() {
        StalledVehicle = null;
        ResetHandlingContextMultipier(pVehicle, "fInitialDriveForce", "stall");
        ApplyHandlingMultipliers(pVehicle, "fInitialDriveForce");
        PlayEntitySound(pVehicle, "Landing_Tone", "DLC_PILOT_ENGINE_FAILURE_SOUNDS", 1000);
    }, pDuration);
}
function DamageVehicleTank(pVehicle, pLength) {
    return _DamageVehicleTank.apply(this, arguments);
}
function _DamageVehicleTank() {
    _DamageVehicleTank = vehicle_async_to_generator(function(pVehicle, pLength) {
        var currentFuel, config, newLength, netId;
        return vehicle_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    tools_PlayEntitySound(pVehicle, "Engine_fail", "DLC_PILOT_ENGINE_FAILURE_SOUNDS", 5000);
                    currentFuel = GetVehicleMetadata(pVehicle, "fuel");
                    config = {
                        leakMinTime: 300,
                        leakMaxTime: 600
                    }
                    if (!(currentFuel > 0)) return [
                        3,
                        2
                    ];
                    newLength = tools_Clamp(pLength, config.leakMinTime, config.leakMaxTime);
                    netId = NetworkGetNetworkIdFromEntity(pVehicle);
                    return [
                        4,
                        RPC.execute("np-vehicles:fuelTankDamage", netId, newLength)
                    ];
                case 1:
                    _state.sent();
                    _state.label = 2;
                case 2:
                    return [
                        2
                    ];
            }
        });
    });
    return _DamageVehicleTank.apply(this, arguments);
}
function TurnOnEngine(pVehicle) {
    var pInstant = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (GetPedInVehicleSeat(pVehicle, -1) !== PlayerPedId()) return false;
    var engineHealth = GetVehicleEngineHealth(pVehicle);
    var bodyHealth = GetVehicleBodyHealth(pVehicle);
    var hasLicense = HasLicense(pVehicle);
    if (!hasLicense) {
        DoLongHudText("I don't know how to operate this vehicle.", 2);
        return false;
    } else if (engineHealth <= 150 || bodyHealth <= 50) {
        DoLongHudText("Something seems to be damaged.", 2);
        return false;
    } else if (!HasVehicleKey(pVehicle) && !IsVehicleBypassed(pVehicle)) {
        return false;
    }
    if (GetVehicleFuelLevel(pVehicle) <= 0.0) {
        EmitLowFuelSound();
    }
    if (pVehicle !== StalledVehicle) {
        SetVehicleUndriveable(pVehicle, false);
    } else {
        return false; //Prevent stalled vehicle from being turned on
    }
    SetVehicleEngineOn(pVehicle, true, pInstant, true);
    return IsVehicleEngineOn(pVehicle);
}
function TurnOffEngine(pVehicle) {
    var pInstant = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (CurrentSeat !== -1) return false;
    SetVehicleUndriveable(pVehicle, true);
    SetVehicleEngineOn(pVehicle, false, pInstant, true);
    return !IsVehicleEngineOn(pVehicle);
}
function HasLicense(pVehicle) {
    var vehicleClass = GetVehicleClass(pVehicle);
    if (vehicleClass === 16) {
        return __webpack_require__.g.exports["np-gov"].HasLicense("pilot_license");
    }
    return true;
}
function VerifyEngineState(pVehicle) {
    var hasKeys = HasVehicleKey(pVehicle);
    if (!hasKeys && !IsVehicleBypassed(pVehicle)) {
        SetVehicleNeedsToBeHotwired(pVehicle, false);
        SetVehicleUndriveable(pVehicle, true);
        SetVehicleEngineOn(pVehicle, false, true, true);
    }
    return hasKeys;
}
function SwapVehicleSeat(pSeat, pVehicle) {
    var playerPed = PlayerPedId();
    var vehicle = pVehicle ? pVehicle : GetVehiclePedIsIn(playerPed, false);
    if (pSeat === -1 && IsVehicleEngineOn(vehicle)) VerifyEngineState(vehicle);
    if (vehicle && IsVehicleSeatFree(vehicle, pSeat)) {
        SetPedIntoVehicle(playerPed, vehicle, pSeat);
    }
}
function GetCurrentVehicleIdentifier() {
    var playerPed = PlayerPedId();
    var currentVehicle = GetVehiclePedIsIn(playerPed, false);
    if (!IsPedInAnyVehicle(playerPed, false) || currentVehicle === 0) {
        emit("DoLongHudText", "You have to be inside the vehicle you're interacting with.", 2);
        return;
    }
    return GetVehicleIdentifier(currentVehicle);
}
RegisterCommand("+engineOn", function() {
    if (IsPauseMenuActive() || isDispatchOpen || isEngineKeybindDisabled) return;
    var vehicle = GetVehiclePedIsIn(PlayerPedId(), false);
    if (vehicle && DoesEntityExist(vehicle)) {
        TurnOnEngine(vehicle);
    }
}, false);
RegisterCommand("-engineOn", function() {}, false);
RegisterCommand("+engineOff", function() {
    if (IsPauseMenuActive() || isDispatchOpen || isEngineKeybindDisabled) return;
    var vehicle = GetVehiclePedIsIn(PlayerPedId(), false);
    if (vehicle && DoesEntityExist(vehicle)) {
        TurnOffEngine(vehicle);
    }
}, false);
RegisterCommand("-engineOff", function() {}, false);
on("np-vehicles:isDispatchOpen", function(toggle) {
    isDispatchOpen = toggle;
});
on("np-vehicles:disableEngineKeybind", function(toggle) {
    isEngineKeybindDisabled = toggle;
});
setImmediate(function() {
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Engine On", "+engineOn", "-engineOn", "IOM_WHEEL_UP", false, "MOUSE_WHEEL");
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Engine Off", "+engineOff", "-engineOff", "IOM_WHEEL_DOWN", false, "MOUSE_WHEEL");
});
__webpack_require__.g.exports("GetVehicleMetadata", GetVehicleMetadata);
__webpack_require__.g.exports("SwapVehicleSeat", SwapVehicleSeat);
__webpack_require__.g.exports("TurnOffEngine", TurnOffEngine);
__webpack_require__.g.exports("TurnOnEngine", TurnOnEngine);

;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
/* harmony default export */ const esm_browser_native = ({
  randomUUID
});
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_browser_stringify = ((/* unused pure expression or super */ null && (stringify)));
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js




function v4(options, buf, offset) {
  if (esm_browser_native.randomUUID && !buf && !options) {
    return esm_browser_native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

/* harmony default export */ const esm_browser_v4 = (v4);
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/regex.js
/* harmony default export */ const regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/validate.js


function validate_validate(uuid) {
  return typeof uuid === 'string' && regex.test(uuid);
}

/* harmony default export */ const esm_browser_validate = (validate_validate);
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/parse.js


function parse(uuid) {
  if (!esm_browser_validate(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ const esm_browser_parse = (parse);
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v35.js



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
const v35_URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;

    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = esm_browser_parse(namespace);
    }

    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return unsafeStringify(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = v35_URL;
  return generateUUID;
}
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/sha1.js
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (let i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);

  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);

    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }

    M[i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);

    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }

    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }

    let a = H[0];
    let b = H[1];
    let c = H[2];
    let d = H[3];
    let e = H[4];

    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ const esm_browser_sha1 = (sha1);
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v5.js


const v5 = v35('v5', 0x50, esm_browser_sha1);
/* harmony default export */ const esm_browser_v5 = (v5);
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/pako@2.1.0/node_modules/pako/dist/pako.esm.mjs

/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

/* eslint-disable space-unary-ops */

/* Public constants ==========================================================*/
/* ===========================================================================*/


//const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const Z_FIXED$1               = 4;
//const Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
const Z_BINARY              = 0;
const Z_TEXT                = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN$1             = 2;

/*============================================================================*/


function zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES    = 2;
/* The three kinds of block type */

const MIN_MATCH$1    = 3;
const MAX_MATCH$1    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

const LENGTH_CODES$1  = 29;
/* number of length codes, not counting the special END_BLOCK code */

const LITERALS$1      = 256;
/* number of literal bytes 0..255 */

const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */

const D_CODES$1       = 30;
/* number of distance codes */

const BL_CODES$1      = 19;
/* number of codes used to transfer the bit lengths */

const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
/* maximum heap size */

const MAX_BITS$1      = 15;
/* All codes must not exceed MAX_BITS bits */

const Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

const END_BLOCK   = 256;
/* end of block literal code */

const REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

const REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
const extra_lbits =   /* extra bits for each length code */
  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

const extra_dbits =   /* extra bits for each distance code */
  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

const extra_blbits =  /* extra bits for each bit length code */
  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

const bl_order =
  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree  = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

const static_dtree  = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

const _dist_code    = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

const _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

const base_length   = new Array(LENGTH_CODES$1);
zero$1(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

const base_dist     = new Array(D_CODES$1);
zero$1(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


let static_l_desc;
let static_d_desc;
let static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



const d_code = (dist) => {

  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
const put_short = (s, w) => {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
};


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
const send_bits = (s, value, length) => {

  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
};


const send_code = (s, c, tree) => {

  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
};


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
const bi_reverse = (code, len) => {

  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
const bi_flush = (s) => {

  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
const gen_bitlen = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */

  const tree            = desc.dyn_tree;
  const max_code        = desc.max_code;
  const stree           = desc.stat_desc.static_tree;
  const has_stree       = desc.stat_desc.has_stree;
  const extra           = desc.stat_desc.extra_bits;
  const base            = desc.stat_desc.extra_base;
  const max_length      = desc.stat_desc.max_length;
  let h;              /* heap index */
  let n, m;           /* iterate over the tree elements */
  let bits;           /* bit length */
  let xbits;          /* extra bits */
  let f;              /* frequency */
  let overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Tracev((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
};


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
const gen_codes = (tree, max_code, bl_count) => {
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */

  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
  let code = 0;              /* running code value */
  let bits;                  /* bit index */
  let n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    code = (code + bl_count[bits - 1]) << 1;
    next_code[bits] = code;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    let len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
};


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
const tr_static_init = () => {

  let n;        /* iterates over tree elements */
  let bits;     /* bit counter */
  let length;   /* length value */
  let code;     /* code value */
  let dist;     /* distance index */
  const bl_count = new Array(MAX_BITS$1 + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

  //static_init_done = true;
};


/* ===========================================================================
 * Initialize a new block.
 */
const init_block = (s) => {

  let n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.sym_next = s.matches = 0;
};


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
const bi_windup = (s) =>
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
const smaller = (tree, n, m, depth) => {

  const _n2 = n * 2;
  const _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
};

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
const pqdownheap = (s, tree, k) => {
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */

  const v = s.heap[k];
  let j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
};


// inlined manually
// const SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
const compress_block = (s, ltree, dtree) => {
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */

  let dist;           /* distance of matched string */
  let lc;             /* match length or unmatched char (if dist == 0) */
  let sx = 0;         /* running index in sym_buf */
  let code;           /* the code to send */
  let extra;          /* number of extra bits to send */

  if (s.sym_next !== 0) {
    do {
      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
      lc = s.pending_buf[s.sym_buf + sx++];
      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and sym_buf is ok: */
      //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");

    } while (sx < s.sym_next);
  }

  send_code(s, END_BLOCK, ltree);
};


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
const build_tree = (s, desc) => {
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */

  const tree     = desc.dyn_tree;
  const stree    = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems    = desc.stat_desc.elems;
  let n, m;          /* iterate over heap elements */
  let max_code = -1; /* largest code with non zero frequency */
  let node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
};


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
const scan_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
const send_tree = (s, tree, max_code) => {
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */

  let n;                     /* iterates over all tree elements */
  let prevlen = -1;          /* last emitted length */
  let curlen;                /* length of current code */

  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  let count = 0;             /* repeat count of the current code */
  let max_count = 7;         /* max repeat count */
  let min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
const build_bl_tree = (s) => {

  let max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
};


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
const send_all_trees = (s, lcodes, dcodes, blcodes) => {
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */

  let rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
const detect_data_type = (s) => {
  /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  let block_mask = 0xf3ffc07f;
  let n;

  /* Check for non-textual ("block-listed") bytes. */
  for (n = 0; n <= 31; n++, block_mask >>>= 1) {
    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("allow-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
};


let static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
const _tr_init$1 = (s) =>
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
};


/* ===========================================================================
 * Send a stored block
 */
const _tr_stored_block$1 = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  bi_windup(s);        /* align on byte boundary */
  put_short(s, stored_len);
  put_short(s, ~stored_len);
  if (stored_len) {
    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
  }
  s.pending += stored_len;
};


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
const _tr_align$1 = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */
const _tr_flush_block$1 = (s, buf, stored_len, last) => {
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */

  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  let max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->sym_next / 3));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block$1(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
};

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
const _tr_tally$1 = (s, dist, lc) => {
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */

  s.pending_buf[s.sym_buf + s.sym_next++] = dist;
  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
  s.pending_buf[s.sym_buf + s.sym_next++] = lc;
  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

  return (s.sym_next === s.sym_end);
};

var _tr_init_1  = _tr_init$1;
var _tr_stored_block_1 = _tr_stored_block$1;
var _tr_flush_block_1  = _tr_flush_block$1;
var _tr_tally_1 = _tr_tally$1;
var _tr_align_1 = _tr_align$1;

var trees = {
	_tr_init: _tr_init_1,
	_tr_stored_block: _tr_stored_block_1,
	_tr_flush_block: _tr_flush_block_1,
	_tr_tally: _tr_tally_1,
	_tr_align: _tr_align_1
};

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const adler32 = (adler, buf, len, pos) => {
  let s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
};


var adler32_1 = adler32;

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
const makeTable = () => {
  let c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
};

// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());


const crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;

  crc ^= -1;

  for (let i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
};


var crc32_1 = crc32;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var messages = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var constants$2 = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  Z_MEM_ERROR:       -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;




/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,
  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_UNKNOWN,
  Z_DEFLATED: Z_DEFLATED$2
} = constants$2;

/*============================================================================*/


const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
const MAX_WBITS$1 = 15;
/* 32K LZ77 window */
const DEF_MEM_LEVEL = 8;


const LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
const LITERALS      = 256;
/* number of literal bytes 0..255 */
const L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
const D_CODES       = 30;
/* number of distance codes */
const BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
const HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
const MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

const PRESET_DICT = 0x20;

const INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */
//#ifdef GZIP
const GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */
//#endif
const EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */
const NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */
const COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */
const HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */
const BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */
const FINISH_STATE  = 666;    /* stream complete */

const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
const BS_BLOCK_DONE     = 2; /* block flush performed */
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

const err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};

const rank = (f) => {
  return ((f) * 2) - ((f) > 4 ? 9 : 0);
};

const zero = (buf) => {
  let len = buf.length; while (--len >= 0) { buf[len] = 0; }
};

/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */
const slide_hash = (s) => {
  let n, m;
  let p;
  let wsize = s.w_size;

  n = s.hash_size;
  p = n;
  do {
    m = s.head[--p];
    s.head[p] = (m >= wsize ? m - wsize : 0);
  } while (--n);
  n = wsize;
//#ifndef FASTEST
  p = n;
  do {
    m = s.prev[--p];
    s.prev[p] = (m >= wsize ? m - wsize : 0);
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */
  } while (--n);
//#endif
};

/* eslint-disable new-cap */
let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */
const flush_pending = (strm) => {
  const s = strm.state;

  //_tr_flush_bits(s);
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out  += len;
  s.pending_out  += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending      -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};


const flush_block_only = (s, last) => {
  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};


const put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
const putShortMSB = (s, b) => {

  //  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
};


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
const read_buf = (strm, buf, start, size) => {

  let len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
};


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
const longest_match = (s, cur_match) => {

  let chain_length = s.max_chain_length;      /* max hash chain length */
  let scan = s.strstart; /* current string */
  let match;                       /* matched string */
  let len;                           /* length of current match */
  let best_len = s.prev_length;              /* best match length so far */
  let nice_match = s.nice_match;             /* stop if match long enough */
  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  const _win = s.window; // shortcut

  const wmask = s.w_mask;
  const prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  const strend = s.strstart + MAX_MATCH;
  let scan_end1  = _win[scan + best_len - 1];
  let scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
const fill_window = (s) => {

  const _w_size = s.w_size;
  let n, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
      slide_hash(s);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */
const deflate_stored = (s, flush) => {

  /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */
  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;

  /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */
  let len, left, have, last = 0;
  let used = s.strm.avail_in;
  do {
    /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */
    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */
    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    if (s.strm.avail_out < have) {         /* need room for header */
      break;
    }
      /* maximum stored block length that will fit in avail_out: */
    have = s.strm.avail_out - have;
    left = s.strstart - s.block_start;  /* bytes left in window */
    if (len > left + s.strm.avail_in) {
      len = left + s.strm.avail_in;   /* limit len to the input */
    }
    if (len > have) {
      len = have;             /* limit len to the output */
    }

    /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */
    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||
                        flush === Z_NO_FLUSH$2 ||
                        len !== left + s.strm.avail_in)) {
      break;
    }

    /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */
    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
    _tr_stored_block(s, 0, 0, last);

    /* Replace the lengths in the dummy stored block with len. */
    s.pending_buf[s.pending - 4] = len;
    s.pending_buf[s.pending - 3] = len >> 8;
    s.pending_buf[s.pending - 2] = ~len;
    s.pending_buf[s.pending - 1] = ~len >> 8;

    /* Write the stored block header bytes. */
    flush_pending(s.strm);

//#ifdef ZLIB_DEBUG
//    /* Update debugging counts for the data about to be copied. */
//    s->compressed_len += len << 3;
//    s->bits_sent += len << 3;
//#endif

    /* Copy uncompressed bytes from the window to next_out. */
    if (left) {
      if (left > len) {
        left = len;
      }
      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
      s.strm.next_out += left;
      s.strm.avail_out -= left;
      s.strm.total_out += left;
      s.block_start += left;
      len -= left;
    }

    /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */
    if (len) {
      read_buf(s.strm, s.strm.output, s.strm.next_out, len);
      s.strm.next_out += len;
      s.strm.avail_out -= len;
      s.strm.total_out += len;
    }
  } while (last === 0);

  /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */
  used -= s.strm.avail_in;    /* number of input bytes directly copied */
  if (used) {
    /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */
    if (used >= s.w_size) {  /* supplant the previous history */
      s.matches = 2;     /* clear hash */
      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
      s.strstart = s.w_size;
      s.insert = s.strstart;
    }
    else {
      if (s.window_size - s.strstart <= used) {
        /* Slide the window down. */
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;   /* add a pending slide_hash() */
        }
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
      s.strstart += used;
      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
    }
    s.block_start = s.strstart;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* If the last block was written to next_out, then done. */
  if (last) {
    return BS_FINISH_DONE;
  }

  /* If flushing and all input has been consumed, then done. */
  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&
    s.strm.avail_in === 0 && s.strstart === s.block_start) {
    return BS_BLOCK_DONE;
  }

  /* Fill the window with any remaining input. */
  have = s.window_size - s.strstart;
  if (s.strm.avail_in > have && s.block_start >= s.w_size) {
    /* Slide the window down. */
    s.block_start -= s.w_size;
    s.strstart -= s.w_size;
    //zmemcpy(s->window, s->window + s->w_size, s->strstart);
    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
    if (s.matches < 2) {
      s.matches++;       /* add a pending slide_hash() */
    }
    have += s.w_size;      /* more space now */
    if (s.insert > s.strstart) {
      s.insert = s.strstart;
    }
  }
  if (have > s.strm.avail_in) {
    have = s.strm.avail_in;
  }
  if (have) {
    read_buf(s.strm, s.window, s.strstart, have);
    s.strstart += have;
    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }

  /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */
  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
    /* maximum stored block length that will fit in pending: */
  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;
  min_block = have > s.w_size ? s.w_size : have;
  left = s.strstart - s.block_start;
  if (left >= min_block ||
     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&
     s.strm.avail_in === 0 && left <= have)) {
    len = left > have ? have : left;
    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&
         len === left ? 1 : 0;
    _tr_stored_block(s, s.block_start, len, last);
    s.block_start += len;
    flush_pending(s.strm);
  }

  /* We've done all we can with the available input and output. */
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};


/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
const deflate_fast = (s, flush) => {

  let hash_head;        /* head of the hash chain */
  let bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
const deflate_slow = (s, flush) => {

  let hash_head;          /* head of hash chain */
  let bflush;              /* set if current block must be flushed */

  let max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
};


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
const deflate_rle = (s, flush) => {

  let bflush;            /* set if current block must be flushed */
  let prev;              /* byte at distance one to match */
  let scan, strend;      /* scan goes up to strend for length of run */

  const _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = _tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
const deflate_huff = (s, flush) => {

  let bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
};

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {

  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

const configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
const lm_init = (s) => {

  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
};


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED$2; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.sym_buf = 0;        /* buffer for distances and literals/lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.sym_next = 0;      /* running index in sym_buf */
  this.sym_end = 0;       /* symbol table full when sym_next reaches this */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */
const deflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const s = strm.state;
  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&
//#ifdef GZIP
                                s.status !== GZIP_STATE &&
//#endif
                                s.status !== EXTRA_STATE &&
                                s.status !== NAME_STATE &&
                                s.status !== COMMENT_STATE &&
                                s.status !== HCRC_STATE &&
                                s.status !== BUSY_STATE &&
                                s.status !== FINISH_STATE)) {
    return 1;
  }
  return 0;
};


const deflateResetKeep = (strm) => {

  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR$2);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status =
//#ifdef GZIP
    s.wrap === 2 ? GZIP_STATE :
//#endif
    s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = -2;
  _tr_init(s);
  return Z_OK$3;
};


const deflateReset = (strm) => {

  const ret = deflateResetKeep(strm);
  if (ret === Z_OK$3) {
    lm_init(strm.state);
  }
  return ret;
};


const deflateSetHeader = (strm, head) => {

  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$2;
  }
  strm.state.gzhead = head;
  return Z_OK$3;
};


const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR$2;
  }
  let wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION$1) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {
    return err(strm, Z_STREAM_ERROR$2);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  const s = new DeflateState();

  strm.state = s;
  s.strm = strm;
  s.status = INIT_STATE;     /* to pass state test in deflateReset() */

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->sym_buf = s->pending_buf + s->lit_bufsize;
  s.sym_buf = s.lit_bufsize;

  //s->sym_end = (s->lit_bufsize - 1) * 3;
  s.sym_end = (s.lit_bufsize - 1) * 3;
  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
};

const deflateInit = (strm, level) => {

  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
};


/* ========================================================================= */
const deflate$2 = (strm, flush) => {

  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
  }

  const s = strm.state;

  if (!strm.output ||
      (strm.avail_in !== 0 && !strm.input) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
  }

  const old_flush = s.last_flush;
  s.last_flush = flush;

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK$3;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH$3) {
    return err(strm, Z_BUF_ERROR$1);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }

  /* Write the header */
  if (s.status === INIT_STATE && s.wrap === 0) {
    s.status = BUSY_STATE;
  }
  if (s.status === INIT_STATE) {
    /* zlib header */
    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
    let level_flags = -1;

    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
      level_flags = 0;
    } else if (s.level < 6) {
      level_flags = 1;
    } else if (s.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= (level_flags << 6);
    if (s.strstart !== 0) { header |= PRESET_DICT; }
    header += 31 - (header % 31);

    putShortMSB(s, header);

    /* Save the adler32 of the preset dictionary: */
    if (s.strstart !== 0) {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 0xffff);
    }
    strm.adler = 1; // adler32(0L, Z_NULL, 0);
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
//#ifdef GZIP
  if (s.status === GZIP_STATE) {
    /* gzip header */
    strm.adler = 0;  //crc32(0L, Z_NULL, 0);
    put_byte(s, 31);
    put_byte(s, 139);
    put_byte(s, 8);
    if (!s.gzhead) { // s->gzhead == Z_NULL
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, OS_CODE);
      s.status = BUSY_STATE;

      /* Compression must start with an empty pending buffer */
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
    else {
      put_byte(s, (s.gzhead.text ? 1 : 0) +
                  (s.gzhead.hcrc ? 2 : 0) +
                  (!s.gzhead.extra ? 0 : 4) +
                  (!s.gzhead.name ? 0 : 8) +
                  (!s.gzhead.comment ? 0 : 16)
      );
      put_byte(s, s.gzhead.time & 0xff);
      put_byte(s, (s.gzhead.time >> 8) & 0xff);
      put_byte(s, (s.gzhead.time >> 16) & 0xff);
      put_byte(s, (s.gzhead.time >> 24) & 0xff);
      put_byte(s, s.level === 9 ? 2 :
                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                   4 : 0));
      put_byte(s, s.gzhead.os & 0xff);
      if (s.gzhead.extra && s.gzhead.extra.length) {
        put_byte(s, s.gzhead.extra.length & 0xff);
        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
      }
      if (s.gzhead.hcrc) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
      }
      s.gzindex = 0;
      s.status = EXTRA_STATE;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
      while (s.pending + left > s.pending_buf_size) {
        let copy = s.pending_buf_size - s.pending;
        // zmemcpy(s.pending_buf + s.pending,
        //    s.gzhead.extra + s.gzindex, copy);
        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
        s.pending = s.pending_buf_size;
        //--- HCRC_UPDATE(beg) ---//
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        //---//
        s.gzindex += copy;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
        beg = 0;
        left -= copy;
      }
      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
      let gzhead_extra = new Uint8Array(s.gzhead.extra);
      // zmemcpy(s->pending_buf + s->pending,
      //     s->gzhead->extra + s->gzindex, left);
      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
      s.pending += left;
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = NAME_STATE;
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
      s.gzindex = 0;
    }
    s.status = COMMENT_STATE;
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      let beg = s.pending;   /* start of bytes to update crc */
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      //--- HCRC_UPDATE(beg) ---//
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      //---//
    }
    s.status = HCRC_STATE;
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
      put_byte(s, strm.adler & 0xff);
      put_byte(s, (strm.adler >> 8) & 0xff);
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
    }
    s.status = BUSY_STATE;

    /* Compression must start with an empty pending buffer */
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
//#endif

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {
    let bstate = s.level === 0 ? deflate_stored(s, flush) :
                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
                 s.strategy === Z_RLE ? deflate_rle(s, flush) :
                 configuration_table[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK$3;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      }
      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

        _tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH$1) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK$3;
      }
    }
  }

  if (flush !== Z_FINISH$3) { return Z_OK$3; }
  if (s.wrap <= 0) { return Z_STREAM_END$3; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
};


const deflateEnd = (strm) => {

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }

  const status = strm.state.status;

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
};


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
const deflateSetDictionary = (strm, dictionary) => {

  let dictLength = dictionary.length;

  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }

  const s = strm.state;
  const wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR$2;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$3;
};


var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2$1 = deflate$2;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/

var deflate_1$2 = {
	deflateInit: deflateInit_1,
	deflateInit2: deflateInit2_1,
	deflateReset: deflateReset_1,
	deflateResetKeep: deflateResetKeep_1,
	deflateSetHeader: deflateSetHeader_1,
	deflate: deflate_2$1,
	deflateEnd: deflateEnd_1,
	deflateSetDictionary: deflateSetDictionary_1,
	deflateInfo: deflateInfo
};

const _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

var pako_esm_assign = function (obj /*from1, from2, from3, ...*/) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// Join array of chunks to single array.
var flattenChunks = (chunks) => {
  // calculate data length
  let len = 0;

  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }

  // join chunks
  const result = new Uint8Array(len);

  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }

  return result;
};

var common = {
	assign: pako_esm_assign,
	flattenChunks: flattenChunks
};

// String encode/decode helpers


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
var string2buf = (str) => {
  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }

  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new Uint8Array(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper
const buf2binstring = (buf, len) => {
  // On Chrome, the arguments in a function call that are allowed is `65534`.
  // If the length of the buffer is smaller than that, we can use this optimization,
  // otherwise we will take a slower path.
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }

  let result = '';
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};


// convert array to string
var buf2string = (buf, max) => {
  const len = max || buf.length;

  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max));
  }

  let i, out;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  const utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    let c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    let c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = (buf, max) => {

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

var strings = {
	string2buf: string2buf,
	buf2string: buf2string,
	utf8border: utf8border
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

var zstream = ZStream;

const toString$1 = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,
  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED: Z_DEFLATED$1
} = constants$2;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate$1(options) {
  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});

  let opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  let status = deflate_1$2.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK$2) {
    throw new Error(messages[status]);
  }

  if (opt.header) {
    deflate_1$2.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    let dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = deflate_1$2.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate$1.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;

  if (this.ended) { return false; }

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString$1.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    // Make sure avail_out > 6 to avoid repeating markers
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    status = deflate_1$2.deflate(strm, _flush_mode);

    // Ended => flush and finish
    if (status === Z_STREAM_END$2) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1$2.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$2;
    }

    // Flush if out buffer full
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }

    // Flush if requested and has data
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate$1.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate$1.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$2) {
    this.result = common.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate$1(input, options) {
  const deflator = new Deflate$1(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return deflate$1(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip$1(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate$1(input, options);
}


var Deflate_1$1 = Deflate$1;
var deflate_2 = deflate$1;
var deflateRaw_1$1 = deflateRaw$1;
var gzip_1$1 = gzip$1;
var constants$1 = constants$2;

var deflate_1$1 = {
	Deflate: Deflate_1$1,
	deflate: deflate_2,
	deflateRaw: deflateRaw_1$1,
	gzip: gzip_1$1,
	constants: constants$1
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
const BAD$1 = 16209;       /* got a data error -- remain here until reset */
const TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
var inffast = function inflate_fast(strm, start) {
  let _in;                    /* local strm.input */
  let last;                   /* have enough input while in < last */
  let _out;                   /* local strm.output */
  let beg;                    /* inflate()'s initial strm.output */
  let end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  let dmax;                   /* maximum distance from zlib header */
//#endif
  let wsize;                  /* window size or zero if not using window */
  let whave;                  /* valid bytes in the window */
  let wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  let s_window;               /* allocated sliding window, if wsize != 0 */
  let hold;                   /* local strm.hold */
  let bits;                   /* local strm.bits */
  let lcode;                  /* local strm.lencode */
  let dcode;                  /* local strm.distcode */
  let lmask;                  /* mask for first level of length codes */
  let dmask;                  /* mask for first level of distance codes */
  let here;                   /* retrieved table entry */
  let op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  let len;                    /* match length, unused bytes */
  let dist;                   /* match distance */
  let from;                   /* where to copy match from */
  let from_source;


  let input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  const state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }

// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE$1;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD$1;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

const MAXBITS = 15;
const ENOUGH_LENS$1 = 852;
const ENOUGH_DISTS$1 = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

const CODES$1 = 0;
const LENS$1 = 1;
const DISTS$1 = 2;

const lbase = new Uint16Array([ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
]);

const lext = new Uint8Array([ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
]);

const dbase = new Uint16Array([ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
]);

const dext = new Uint8Array([ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
]);

const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
{
  const bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  let len = 0;               /* a code's length in bits */
  let sym = 0;               /* index of code symbols */
  let min = 0, max = 0;          /* minimum and maximum code lengths */
  let root = 0;              /* number of index bits for root table */
  let curr = 0;              /* number of index bits for current table */
  let drop = 0;              /* code bits to drop for sub-table */
  let left = 0;                   /* number of prefix codes available */
  let used = 0;              /* code entries in table used */
  let huff = 0;              /* Huffman code */
  let incr;              /* for incrementing code, index */
  let fill;              /* index for replicating entries */
  let low;               /* low bits for current root entry */
  let mask;              /* mask for low root bits */
  let next;             /* next available space in table */
  let base = null;     /* base value table to use */
//  let shoextra;    /* extra bits table to use */
  let match;                  /* use base and extra for symbol >= match */
  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  let extra = null;

  let here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES$1) {
    base = extra = work;    /* dummy value--not used */
    match = 20;

  } else if (type === LENS$1) {
    base = lbase;
    extra = lext;
    match = 257;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    match = 0;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] + 1 < match) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] >= match) {
      here_op = extra[work[sym] - match];
      here_val = base[work[sym] - match];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};


var inftrees = inflate_table;

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.






const CODES = 0;
const LENS = 1;
const DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,
  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,
  Z_DEFLATED
} = constants$2;


/* STATES ====================================================================*/
/* ===========================================================================*/


const    HEAD = 16180;       /* i: waiting for magic header */
const    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */
const    TIME = 16182;       /* i: waiting for modification time (gzip) */
const    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */
const    EXLEN = 16184;      /* i: waiting for extra length (gzip) */
const    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */
const    NAME = 16186;       /* i: waiting for end of file name (gzip) */
const    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */
const    HCRC = 16188;       /* i: waiting for header crc (gzip) */
const    DICTID = 16189;    /* i: waiting for dictionary check value */
const    DICT = 16190;      /* waiting for inflateSetDictionary() call */
const        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */
const        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */
const        STORED = 16193;    /* i: waiting for stored size (length and complement) */
const        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */
const        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */
const        TABLE = 16196;     /* i: waiting for dynamic block table lengths */
const        LENLENS = 16197;   /* i: waiting for code length code lengths */
const        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */
const            LEN_ = 16199;      /* i: same as LEN below, but only first time in */
const            LEN = 16200;       /* i: waiting for length/lit/eob code */
const            LENEXT = 16201;    /* i: waiting for length extra bits */
const            DIST = 16202;      /* i: waiting for distance code */
const            DISTEXT = 16203;   /* i: waiting for distance extra bits */
const            MATCH = 16204;     /* o: waiting for output space to copy string */
const            LIT = 16205;       /* o: waiting for output space to write literal */
const    CHECK = 16206;     /* i: waiting for 32-bit check value */
const    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */
const    DONE = 16208;      /* finished check, done -- remain here until reset */
const    BAD = 16209;       /* got a data error -- remain here until reset */
const    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */
const    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

const MAX_WBITS = 15;
/* 32K LZ77 window */
const DEF_WBITS = MAX_WBITS;


const zswap32 = (q) => {

  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
};


function InflateState() {
  this.strm = null;           /* pointer back to this zlib stream */
  this.mode = 0;              /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new Uint16Array(320); /* temporary storage for code lengths */
  this.work = new Uint16Array(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}


const inflateStateCheck = (strm) => {

  if (!strm) {
    return 1;
  }
  const state = strm.state;
  if (!state || state.strm !== strm ||
    state.mode < HEAD || state.mode > SYNC) {
    return 1;
  }
  return 0;
};


const inflateResetKeep = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.flags = -1;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK$1;
};


const inflateReset = (strm) => {

  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

};


const inflateReset2 = (strm, windowBits) => {
  let wrap;

  /* get the state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  const state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 5;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};


const inflateInit2 = (strm, windowBits) => {

  if (!strm) { return Z_STREAM_ERROR$1; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  const state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.strm = strm;
  state.window = null/*Z_NULL*/;
  state.mode = HEAD;     /* to pass state test in inflateReset2() */
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$1) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
};


const inflateInit = (strm) => {

  return inflateInit2(strm, DEF_WBITS);
};


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
let virgin = true;

let lenfix, distfix; // We have no pointers in JS, so keep tables separate


const fixedtables = (state) => {

  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);

    /* literal/length table */
    let sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
const updatewindow = (strm, src, end, copy) => {

  let dist;
  const state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new Uint8Array(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
};


const inflate$2 = (strm, flush) => {

  let state;
  let input, output;          // input/output buffers
  let next;                   /* next input INDEX */
  let put;                    /* next output INDEX */
  let have, left;             /* available input and output */
  let hold;                   /* bit buffer */
  let bits;                   /* bits in bit buffer */
  let _in, _out;              /* save starting available input and output */
  let copy;                   /* number of stored or match bytes to copy */
  let from;                   /* where to copy match bytes from */
  let from_source;
  let here = 0;               /* current decoding table entry */
  let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //let last;                   /* parent table entry */
  let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  let len;                    /* length to copy for repeats, bits to drop */
  let ret;                    /* return code */
  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
  let opts;

  let n; // temporary variable for NEED_BITS

  const order = /* permutation of code lengths */
    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


  if (inflateStateCheck(strm) || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR$1;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK$1;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
          if (state.wbits === 0) {
            state.wbits = 15;
          }
          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f)/*BITS(4)*/ + 8;
        if (state.wbits === 0) {
          state.wbits = len;
        }
        if (len > 15 || len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }

        // !!! pako patch. Force use `options.windowBits` if passed.
        // Required to always use max window size by default.
        state.dmax = 1 << state.wbits;
        //state.dmax = 1 << len;

        state.flags = 0;               /* indicate zlib header */
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = ((hold >> 8) & 1);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
        /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          hbuf[2] = (hold >>> 16) & 0xff;
          hbuf[3] = (hold >>> 24) & 0xff;
          state.check = crc32_1(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
        /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = (hold & 0xff);
          state.head.os = (hold >> 8);
        }
        if ((state.flags & 0x0200) && (state.wrap & 4)) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
        /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = (hold >>> 8) & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        else if (state.head) {
          state.head.extra = null/*Z_NULL*/;
        }
        state.mode = EXTRA;
        /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) { copy = have; }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Uint8Array(state.head.extra_len);
              }
              state.head.extra.set(
                input.subarray(
                  next,
                  // extra field is limited to 65536 bytes
                  // - no need for additional size check
                  next + copy
                ),
                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                len
              );
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) { break inf_leave; }
        }
        state.length = 0;
        state.mode = NAME;
        /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.name_max*/)) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
        /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) { break inf_leave; }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len &&
                (state.length < 65536 /*state.head.comm_max*/)) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if ((state.flags & 0x0200) && (state.wrap & 4)) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) { break inf_leave; }
        }
        else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
        /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = ((state.flags >> 9) & 1);
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
        /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT$1;
        }
        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
        /* falls through */
      case TYPE:
        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = (hold & 0x01)/*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch ((hold & 0x03)/*BITS(2)*/) {
          case 0:                             /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:                             /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_;             /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:                             /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case COPY_:
        state.mode = COPY;
        /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) { copy = have; }
          if (copy > left) { copy = left; }
          if (copy === 0) { break inf_leave; }
          //--- zmemcpy(put, next, copy); ---
          output.set(input.subarray(next, next + copy), put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
//#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
        /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
        /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          }
          else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03);//BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            }
            else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f);//BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) { break; }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) { break inf_leave; }
        /* falls through */
      case LEN_:
        state.mode = LEN;
        /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inffast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
        /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
        /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val +
                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
            here_bits = here >>> 24;
            here_op = (here >>> 16) & 0xff;
            here_val = here & 0xffff;

            if ((last_bits + here_bits) <= bits) { break; }
            //--- PULLBYTE() ---//
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = (here_op) & 15;
        state.mode = DISTEXT;
        /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
//#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
//#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
        /* falls through */
      case MATCH:
        if (left === 0) { break inf_leave; }
        copy = _out - left;
        if (state.offset > copy) {         /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
// (!) This block is disabled in zlib defaults,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          }
          else {
            from = state.wnext - copy;
          }
          if (copy > state.length) { copy = state.length; }
          from_source = state.window;
        }
        else {                              /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) { copy = left; }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) { state.mode = LEN; }
        break;
      case LIT:
        if (left === 0) { break inf_leave; }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if ((state.wrap & 4) && _out) {
            strm.adler = state.check =
                /*UPDATE_CHECK(state.check, put - _out, _out);*/
                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
        /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) { break inf_leave; }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
        /* falls through */
      case DONE:
        ret = Z_STREAM_END$1;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR$1;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR$1;
      case SYNC:
        /* falls through */
      default:
        return Z_STREAM_ERROR$1;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH$1))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if ((state.wrap & 4) && _out) {
    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
    ret = Z_BUF_ERROR;
  }
  return ret;
};


const inflateEnd = (strm) => {

  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }

  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$1;
};


const inflateGetHeader = (strm, head) => {

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  const state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK$1;
};


const inflateSetDictionary = (strm, dictionary) => {
  const dictLength = dictionary.length;

  let state;
  let dictid;
  let ret;

  /* check state */
  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32_1(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR$1;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK$1;
};


var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2$1 = inflate$2;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/

var inflate_1$2 = {
	inflateReset: inflateReset_1,
	inflateReset2: inflateReset2_1,
	inflateResetKeep: inflateResetKeep_1,
	inflateInit: inflateInit_1,
	inflateInit2: inflateInit2_1,
	inflate: inflate_2$1,
	inflateEnd: inflateEnd_1,
	inflateGetHeader: inflateGetHeader_1,
	inflateSetDictionary: inflateSetDictionary_1,
	inflateInfo: inflateInfo
};

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

var gzheader = GZheader;

const pako_esm_toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

const {
  Z_NO_FLUSH, Z_FINISH,
  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
} = constants$2;

/* ===========================================================================*/


/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate$1(options) {
  this.options = common.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ''
  }, options || {});

  const opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new zstream();
  this.strm.avail_out = 0;

  let status  = inflate_1$2.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== Z_OK) {
    throw new Error(messages[status]);
  }

  this.header = new gzheader();

  inflate_1$2.inflateGetHeader(this.strm, this.header);

  // Setup dictionary
  if (opt.dictionary) {
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (pako_esm_toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) { //In raw mode we need to set the dictionary early
      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK) {
        throw new Error(messages[status]);
      }
    }
  }
}

/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate$1.prototype.push = function (data, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary = this.options.dictionary;
  let status, _flush_mode, last_avail_out;

  if (this.ended) return false;

  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (pako_esm_toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  for (;;) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = inflate_1$2.inflate(strm, _flush_mode);

    if (status === Z_NEED_DICT && dictionary) {
      status = inflate_1$2.inflateSetDictionary(strm, dictionary);

      if (status === Z_OK) {
        status = inflate_1$2.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR) {
        // Replace code with more verbose
        status = Z_NEED_DICT;
      }
    }

    // Skip snyc markers if more data follows and not raw mode
    while (strm.avail_in > 0 &&
           status === Z_STREAM_END &&
           strm.state.wrap > 0 &&
           data[strm.next_in] !== 0)
    {
      inflate_1$2.inflateReset(strm);
      status = inflate_1$2.inflate(strm, _flush_mode);
    }

    switch (status) {
      case Z_STREAM_ERROR:
      case Z_DATA_ERROR:
      case Z_NEED_DICT:
      case Z_MEM_ERROR:
        this.onEnd(status);
        this.ended = true;
        return false;
    }

    // Remember real `avail_out` value, because we may patch out buffer content
    // to align utf8 strings boundaries.
    last_avail_out = strm.avail_out;

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END) {

        if (this.options.to === 'string') {

          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail & realign counters
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

          this.onData(utf8str);

        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }

    // Must repeat iteration if out buffer is full
    if (status === Z_OK && last_avail_out === 0) continue;

    // Finalize if end of stream reached.
    if (status === Z_STREAM_END) {
      status = inflate_1$2.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }

    if (strm.avail_in === 0) break;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate$1.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate$1.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/
function inflate$1(input, options) {
  const inflator = new Inflate$1(options);

  inflator.push(input);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) throw inflator.msg || messages[inflator.err];

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$1(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


var Inflate_1$1 = Inflate$1;
var inflate_2 = inflate$1;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip$1 = inflate$1;
var constants = constants$2;

var inflate_1$1 = {
	Inflate: Inflate_1$1,
	inflate: inflate_2,
	inflateRaw: inflateRaw_1$1,
	ungzip: ungzip$1,
	constants: constants
};

const { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;

const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;



var Deflate_1 = Deflate;
var deflate_1 = deflate;
var deflateRaw_1 = deflateRaw;
var gzip_1 = gzip;
var Inflate_1 = Inflate;
var inflate_1 = inflate;
var inflateRaw_1 = inflateRaw;
var ungzip_1 = ungzip;
var constants_1 = constants$2;

var pako = {
	Deflate: Deflate_1,
	deflate: deflate_1,
	deflateRaw: deflateRaw_1,
	gzip: gzip_1,
	Inflate: Inflate_1,
	inflate: inflate_1,
	inflateRaw: inflateRaw_1,
	ungzip: ungzip_1,
	constants: constants_1
};



// EXTERNAL MODULE: ../../../../../v-packages/node_modules/.pnpm/pure-uuid@1.8.1/node_modules/pure-uuid/uuid.js
var uuid = __webpack_require__(577);
;// CONCATENATED MODULE: ../../../../../v-packages/node_modules/.pnpm/zod@3.21.4/node_modules/zod/lib/index.mjs
var util;
(function (util) {
    util.assertEqual = (val) => val;
    function assertIs(_arg) { }
    util.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util.assertNever = assertNever;
    util.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
            obj[item] = item;
        }
        return obj;
    };
    util.getValidEnumValues = (obj) => {
        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
            filtered[k] = obj[k];
        }
        return util.objectValues(filtered);
    };
    util.objectValues = (obj) => {
        return util.objectKeys(obj).map(function (e) {
            return obj[e];
        });
    };
    util.objectKeys = typeof Object.keys === "function" // eslint-disable-line ban/ban
        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban
        : (object) => {
            const keys = [];
            for (const key in object) {
                if (Object.prototype.hasOwnProperty.call(object, key)) {
                    keys.push(key);
                }
            }
            return keys;
        };
    util.find = (arr, checker) => {
        for (const item of arr) {
            if (checker(item))
                return item;
        }
        return undefined;
    };
    util.isInteger = typeof Number.isInteger === "function"
        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban
        : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array
            .map((val) => (typeof val === "string" ? `'${val}'` : val))
            .join(separator);
    }
    util.joinValues = joinValues;
    util.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
            return value.toString();
        }
        return value;
    };
})(util || (util = {}));
var objectUtil;
(function (objectUtil) {
    objectUtil.mergeShapes = (first, second) => {
        return {
            ...first,
            ...second, // second overwrites first
        };
    };
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set",
]);
const getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "symbol":
            return ZodParsedType.symbol;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then &&
                typeof data.then === "function" &&
                data.catch &&
                typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};

const ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite",
]);
const quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
class ZodError extends Error {
    constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
            this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
            this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            // eslint-disable-next-line ban/ban
            Object.setPrototypeOf(this, actualProto);
        }
        else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper ||
            function (issue) {
                return issue.message;
            };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
            for (const issue of error.issues) {
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                }
                else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                }
                else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                }
                else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                }
                else {
                    let curr = fieldErrors;
                    let i = 0;
                    while (i < issue.path.length) {
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || { _errors: [] };
                            // if (typeof el === "string") {
                            //   curr[el] = curr[el] || { _errors: [] };
                            // } else if (typeof el === "number") {
                            //   const errorArray: any = [];
                            //   errorArray._errors = [];
                            //   curr[el] = curr[el] || errorArray;
                            // }
                        }
                        else {
                            curr[el] = curr[el] || { _errors: [] };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            }
            else {
                formErrors.push(mapper(sub));
            }
        }
        return { formErrors, fieldErrors };
    }
    get formErrors() {
        return this.flatten();
    }
}
ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
};

const errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            }
            else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("includes" in issue.validation) {
                    message = `Invalid input: must include "${issue.validation.includes}"`;
                    if (typeof issue.validation.position === "number") {
                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
                    }
                }
                else if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                }
                else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                }
                else {
                    util.assertNever(issue.validation);
                }
            }
            else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            }
            else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${issue.minimum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly equal to `
                    : issue.inclusive
                        ? `greater than or equal to `
                        : `greater than `}${new Date(Number(issue.minimum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array")
                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string")
                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number")
                message = `Number must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "bigint")
                message = `BigInt must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `less than or equal to`
                        : `less than`} ${issue.maximum}`;
            else if (issue.type === "date")
                message = `Date must be ${issue.exact
                    ? `exactly`
                    : issue.inclusive
                        ? `smaller than or equal to`
                        : `smaller than`} ${new Date(Number(issue.maximum))}`;
            else
                message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        case ZodIssueCode.not_finite:
            message = "Number must be finite";
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return { message };
};

let overrideErrorMap = errorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}

const makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...(issueData.path || [])];
    const fullIssue = {
        ...issueData,
        path: fullPath,
    };
    let errorMessage = "";
    const maps = errorMaps
        .filter((m) => !!m)
        .slice()
        .reverse();
    for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage,
    };
};
const EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap, // then global default map
        ].filter((x) => !!x),
    });
    ctx.common.issues.push(issue);
}
class ParseStatus {
    constructor() {
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid")
            this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted")
            this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
            if (s.status === "aborted")
                return INVALID;
            if (s.status === "dirty")
                status.dirty();
            arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
            syncPairs.push({
                key: await pair.key,
                value: await pair.value,
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
            const { key, value } = pair;
            if (key.status === "aborted")
                return INVALID;
            if (value.status === "aborted")
                return INVALID;
            if (key.status === "dirty")
                status.dirty();
            if (value.status === "dirty")
                status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
                finalObject[key.value] = value.value;
            }
        }
        return { status: status.value, value: finalObject };
    }
}
const INVALID = Object.freeze({
    status: "aborted",
});
const DIRTY = (value) => ({ status: "dirty", value });
const OK = (value) => ({ status: "valid", value });
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

var errorUtil;
(function (errorUtil) {
    errorUtil.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));

class ParseInputLazyPath {
    constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        if (!this._cachedPath.length) {
            if (this._key instanceof Array) {
                this._cachedPath.push(...this._path, ...this._key);
            }
            else {
                this._cachedPath.push(...this._path, this._key);
            }
        }
        return this._cachedPath;
    }
}
const handleResult = (ctx, result) => {
    if (isValid(result)) {
        return { success: true, data: result.value };
    }
    else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        return {
            success: false,
            get error() {
                if (this._error)
                    return this._error;
                const error = new ZodError(ctx.common.issues);
                this._error = error;
                return this._error;
            },
        };
    }
};
function processCreateParams(params) {
    if (!params)
        return {};
    const { errorMap, invalid_type_error, required_error, description } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap)
        return { errorMap: errorMap, description };
    const customMap = (iss, ctx) => {
        if (iss.code !== "invalid_type")
            return { message: ctx.defaultError };
        if (typeof ctx.data === "undefined") {
            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
        }
        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
}
class ZodType {
    constructor(def) {
        /** Alias of safeParseAsync */
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return (ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent,
        });
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent,
            },
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
            return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true,
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data),
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult)
            ? maybeAsyncResult
            : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val) => {
            if (typeof message === "string" || typeof message === "undefined") {
                return { message };
            }
            else if (typeof message === "function") {
                return message(val);
            }
            else {
                return message;
            }
        };
        return this._refinement((val, ctx) => {
            const result = check(val);
            const setError = () => ctx.addIssue({
                code: ZodIssueCode.custom,
                ...getIssueProperties(val),
            });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data) => {
                    if (!data) {
                        setError();
                        return false;
                    }
                    else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            }
            else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function"
                    ? refinementData(val, ctx)
                    : refinementData);
                return false;
            }
            else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "refinement", refinement },
        });
    }
    superRefine(refinement) {
        return this._refinement(refinement);
    }
    optional() {
        return ZodOptional.create(this, this._def);
    }
    nullable() {
        return ZodNullable.create(this, this._def);
    }
    nullish() {
        return this.nullable().optional();
    }
    array() {
        return ZodArray.create(this, this._def);
    }
    promise() {
        return ZodPromise.create(this, this._def);
    }
    or(option) {
        return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
        return new ZodEffects({
            ...processCreateParams(this._def),
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: { type: "transform", transform },
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
            ...processCreateParams(this._def),
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault,
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(this._def),
        });
    }
    catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
            ...processCreateParams(this._def),
            innerType: this,
            catchValue: catchValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodCatch,
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description,
        });
    }
    pipe(target) {
        return ZodPipeline.create(this, target);
    }
    isOptional() {
        return this.safeParse(undefined).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
}
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[a-z][a-z0-9]*$/;
const ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;
const uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
// from https://stackoverflow.com/a/46181/1550155
// old version: too slow, didn't support unicode
// const emailRegex = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
//old email regex
// const emailRegex = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@((?!-)([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{1,})[^-<>()[\].,;:\s@"]$/i;
// eslint-disable-next-line
const emailRegex = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\])|(\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\.[A-Za-z]{2,})+))$/;
// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression
const emojiRegex = /^(\p{Extended_Pictographic}|\p{Emoji_Component})+$/u;
const ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
// Adapted from https://stackoverflow.com/a/3143231
const datetimeRegex = (args) => {
    if (args.precision) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
        }
    }
    else if (args.precision === 0) {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
        }
    }
    else {
        if (args.offset) {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
        }
        else {
            return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
        }
    }
};
function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
        return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
        return true;
    }
    return false;
}
class ZodString extends ZodType {
    constructor() {
        super(...arguments);
        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {
            validation,
            code: ZodIssueCode.invalid_string,
            ...errorUtil.errToObj(message),
        });
        /**
         * @deprecated Use z.string().min(1) instead.
         * @see {@link ZodString.min}
         */
        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));
        this.trim = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "trim" }],
        });
        this.toLowerCase = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toLowerCase" }],
        });
        this.toUpperCase = () => new ZodString({
            ...this._def,
            checks: [...this._def.checks, { kind: "toUpperCase" }],
        });
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx.parsedType,
            }
            //
            );
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "length") {
                const tooBig = input.data.length > check.value;
                const tooSmall = input.data.length < check.value;
                if (tooBig || tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    if (tooBig) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_big,
                            maximum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    else if (tooSmall) {
                        addIssueToContext(ctx, {
                            code: ZodIssueCode.too_small,
                            minimum: check.value,
                            type: "string",
                            inclusive: true,
                            exact: true,
                            message: check.message,
                        });
                    }
                    status.dirty();
                }
            }
            else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "emoji") {
                if (!emojiRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "emoji",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "cuid2") {
                if (!cuid2Regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid2",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ulid") {
                if (!ulidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ulid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "url") {
                try {
                    new URL(input.data);
                }
                catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "trim") {
                input.data = input.data.trim();
            }
            else if (check.kind === "includes") {
                if (!input.data.includes(check.value, check.position)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { includes: check.value, position: check.position },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "toLowerCase") {
                input.data = input.data.toLowerCase();
            }
            else if (check.kind === "toUpperCase") {
                input.data = input.data.toUpperCase();
            }
            else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { startsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: { endsWith: check.value },
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "datetime") {
                const regex = datetimeRegex(check);
                if (!regex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: "datetime",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "ip") {
                if (!isValidIP(input.data, check.version)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "ip",
                        code: ZodIssueCode.invalid_string,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
        var _a;
        if (typeof options === "string") {
            return this._addCheck({
                kind: "datetime",
                precision: null,
                offset: false,
                message: options,
            });
        }
        return this._addCheck({
            kind: "datetime",
            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex: regex,
            ...errorUtil.errToObj(message),
        });
    }
    includes(value, options) {
        return this._addCheck({
            kind: "includes",
            value: value,
            position: options === null || options === void 0 ? void 0 : options.position,
            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value: value,
            ...errorUtil.errToObj(message),
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message),
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message),
        });
    }
    length(len, message) {
        return this._addCheck({
            kind: "length",
            value: len,
            ...errorUtil.errToObj(message),
        });
    }
    get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodString.create = (params) => {
    var _a;
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return (valInt % stepInt) / Math.pow(10, decCount);
}
class ZodNumber extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        exact: false,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "finite") {
                if (!Number.isFinite(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_finite,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message),
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value: value,
            message: errorUtil.toString(message),
        });
    }
    finite(message) {
        return this._addCheck({
            kind: "finite",
            message: errorUtil.toString(message),
        });
    }
    safe(message) {
        return this._addCheck({
            kind: "min",
            inclusive: true,
            value: Number.MIN_SAFE_INTEGER,
            message: errorUtil.toString(message),
        })._addCheck({
            kind: "max",
            inclusive: true,
            value: Number.MAX_SAFE_INTEGER,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" ||
            (ch.kind === "multipleOf" && util.isInteger(ch.value)));
    }
    get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "finite" ||
                ch.kind === "int" ||
                ch.kind === "multipleOf") {
                return true;
            }
            else if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
            else if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return Number.isFinite(min) && Number.isFinite(max);
    }
}
ZodNumber.create = (params) => {
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodBigInt extends ZodType {
    constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
    }
    _parse(input) {
        if (this._def.coerce) {
            input.data = BigInt(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        let ctx = undefined;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                const tooSmall = check.inclusive
                    ? input.data < check.value
                    : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        type: "bigint",
                        minimum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                const tooBig = check.inclusive
                    ? input.data > check.value
                    : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        type: "bigint",
                        maximum: check.value,
                        inclusive: check.inclusive,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "multipleOf") {
                if (input.data % check.value !== BigInt(0)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message,
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return { status: status.value, value: input.data };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message),
                },
            ],
        });
    }
    _addCheck(check) {
        return new ZodBigInt({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: false,
            message: errorUtil.toString(message),
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: BigInt(0),
            inclusive: true,
            message: errorUtil.toString(message),
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message),
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max;
    }
}
ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params),
    });
};
class ZodBoolean extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodBoolean.create = (params) => {
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params),
    });
};
class ZodDate extends ZodType {
    _parse(input) {
        if (this._def.coerce) {
            input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_date,
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = undefined;
        for (const check of this._def.checks) {
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        minimum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        exact: false,
                        maximum: check.value,
                        type: "date",
                    });
                    status.dirty();
                }
            }
            else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime()),
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [...this._def.checks, check],
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message),
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "min") {
                if (min === null || ch.value > min)
                    min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
            if (ch.kind === "max") {
                if (max === null || ch.value < max)
                    max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
}
ZodDate.create = (params) => {
    return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params),
    });
};
class ZodSymbol extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.symbol,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodSymbol.create = (params) => {
    return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params),
    });
};
class ZodUndefined extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodUndefined.create = (params) => {
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params),
    });
};
class ZodNull extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodNull.create = (params) => {
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params),
    });
};
class ZodAny extends ZodType {
    constructor() {
        super(...arguments);
        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodAny.create = (params) => {
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params),
    });
};
class ZodUnknown extends ZodType {
    constructor() {
        super(...arguments);
        // required
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
}
ZodUnknown.create = (params) => {
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params),
    });
};
class ZodNever extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType,
        });
        return INVALID;
    }
}
ZodNever.create = (params) => {
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params),
    });
};
class ZodVoid extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return OK(input.data);
    }
}
ZodVoid.create = (params) => {
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params),
    });
};
class ZodArray extends ZodType {
    _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (def.exactLength !== null) {
            const tooBig = ctx.data.length > def.exactLength.value;
            const tooSmall = ctx.data.length < def.exactLength.value;
            if (tooBig || tooSmall) {
                addIssueToContext(ctx, {
                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
                    minimum: (tooSmall ? def.exactLength.value : undefined),
                    maximum: (tooBig ? def.exactLength.value : undefined),
                    type: "array",
                    inclusive: true,
                    exact: true,
                    message: def.exactLength.message,
                });
                status.dirty();
            }
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.minLength.message,
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    exact: false,
                    message: def.maxLength.message,
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all([...ctx.data].map((item, i) => {
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result) => {
                return ParseStatus.mergeArray(status, result);
            });
        }
        const result = [...ctx.data].map((item, i) => {
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: { value: minLength, message: errorUtil.toString(message) },
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: { value: maxLength, message: errorUtil.toString(message) },
        });
    }
    length(len, message) {
        return new ZodArray({
            ...this._def,
            exactLength: { value: len, message: errorUtil.toString(message) },
        });
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodArray.create = (schema, params) => {
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params),
    });
};
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: () => newShape,
        });
    }
    else if (schema instanceof ZodArray) {
        return new ZodArray({
            ...schema._def,
            type: deepPartialify(schema.element),
        });
    }
    else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    }
    else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    }
    else {
        return schema;
    }
}
class ZodObject extends ZodType {
    constructor() {
        super(...arguments);
        this._cached = null;
        /**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */
        this.nonstrict = this.passthrough;
        // extend<
        //   Augmentation extends ZodRawShape,
        //   NewOutput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
        //       ? Augmentation[k]["_output"]
        //       : k extends keyof Output
        //       ? Output[k]
        //       : never;
        //   }>,
        //   NewInput extends util.flatten<{
        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
        //       ? Augmentation[k]["_input"]
        //       : k extends keyof Input
        //       ? Input[k]
        //       : never;
        //   }>
        // >(
        //   augmentation: Augmentation
        // ): ZodObject<
        //   extendShape<T, Augmentation>,
        //   UnknownKeys,
        //   Catchall,
        //   NewOutput,
        //   NewInput
        // > {
        //   return new ZodObject({
        //     ...this._def,
        //     shape: () => ({
        //       ...this._def.shape(),
        //       ...augmentation,
        //     }),
        //   }) as any;
        // }
        /**
         * @deprecated Use `.extend` instead
         *  */
        this.augment = this.extend;
    }
    _getCached() {
        if (this._cached !== null)
            return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return (this._cached = { shape, keys });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever &&
            this._def.unknownKeys === "strip")) {
            for (const key in ctx.data) {
                if (!shapeKeys.includes(key)) {
                    extraKeys.push(key);
                }
            }
        }
        const pairs = [];
        for (const key of shapeKeys) {
            const keyValidator = shape[key];
            const value = ctx.data[key];
            pairs.push({
                key: { status: "valid", value: key },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
                alwaysSet: key in ctx.data,
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key of extraKeys) {
                    pairs.push({
                        key: { status: "valid", value: key },
                        value: { status: "valid", value: ctx.data[key] },
                    });
                }
            }
            else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys,
                    });
                    status.dirty();
                }
            }
            else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        }
        else {
            // run catchall validation
            const catchall = this._def.catchall;
            for (const key of extraKeys) {
                const value = ctx.data[key];
                pairs.push({
                    key: { status: "valid", value: key },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)
                    ),
                    alwaysSet: key in ctx.data,
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve()
                .then(async () => {
                const syncPairs = [];
                for (const pair of pairs) {
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet,
                    });
                }
                return syncPairs;
            })
                .then((syncPairs) => {
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...(message !== undefined
                ? {
                    errorMap: (issue, ctx) => {
                        var _a, _b, _c, _d;
                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                        if (issue.code === "unrecognized_keys")
                            return {
                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,
                            };
                        return {
                            message: defaultError,
                        };
                    },
                }
                : {}),
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip",
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough",
        });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
        return new ZodObject({
            ...this._def,
            shape: () => ({
                ...this._def.shape(),
                ...augmentation,
            }),
        });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: () => ({
                ...this._def.shape(),
                ...merging._def.shape(),
            }),
            typeName: ZodFirstPartyTypeKind.ZodObject,
        });
        return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
        return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index,
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).forEach((key) => {
            if (mask[key] && this.shape[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (!mask[key]) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => shape,
        });
    }
    /**
     * @deprecated
     */
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            const fieldSchema = this.shape[key];
            if (mask && !mask[key]) {
                newShape[key] = fieldSchema;
            }
            else {
                newShape[key] = fieldSchema.optional();
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    required(mask) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
            if (mask && !mask[key]) {
                newShape[key] = this.shape[key];
            }
            else {
                const fieldSchema = this.shape[key];
                let newField = fieldSchema;
                while (newField instanceof ZodOptional) {
                    newField = newField._def.innerType;
                }
                newShape[key] = newField;
            }
        });
        return new ZodObject({
            ...this._def,
            shape: () => newShape,
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
}
ZodObject.create = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params),
    });
};
class ZodUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            // return first issue-free validation if it exists
            for (const result of results) {
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result of results) {
                if (result.result.status === "dirty") {
                    // add issues from dirty option
                    ctx.common.issues.push(...result.ctx.common.issues);
                    return result.result;
                }
            }
            // return invalid
            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option) => {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx,
                    }),
                    ctx: childCtx,
                };
            })).then(handleResults);
        }
        else {
            let dirty = undefined;
            const issues = [];
            for (const option of options) {
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: [],
                    },
                    parent: null,
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx,
                });
                if (result.status === "valid") {
                    return result;
                }
                else if (result.status === "dirty" && !dirty) {
                    dirty = { result, ctx: childCtx };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues) => new ZodError(issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors,
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
}
ZodUnion.create = (types, params) => {
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params),
    });
};
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
//////////                                 //////////
//////////      ZodDiscriminatedUnion      //////////
//////////                                 //////////
/////////////////////////////////////////////////////
/////////////////////////////////////////////////////
const getDiscriminator = (type) => {
    if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
    }
    else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
    }
    else if (type instanceof ZodLiteral) {
        return [type.value];
    }
    else if (type instanceof ZodEnum) {
        return type.options;
    }
    else if (type instanceof ZodNativeEnum) {
        // eslint-disable-next-line ban/ban
        return Object.keys(type.enum);
    }
    else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
    }
    else if (type instanceof ZodUndefined) {
        return [undefined];
    }
    else if (type instanceof ZodNull) {
        return [null];
    }
    else {
        return null;
    }
};
class ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: Array.from(this.optionsMap.keys()),
                path: [discriminator],
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
        else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get options() {
        return this._def.options;
    }
    get optionsMap() {
        return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
        // Get all the valid discriminator values
        const optionsMap = new Map();
        // try {
        for (const type of options) {
            const discriminatorValues = getDiscriminator(type.shape[discriminator]);
            if (!discriminatorValues) {
                throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
            }
            for (const value of discriminatorValues) {
                if (optionsMap.has(value)) {
                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
                }
                optionsMap.set(value, type);
            }
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            optionsMap,
            ...processCreateParams(params),
        });
    }
}
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
        return { valid: true, data: a };
    }
    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util
            .objectKeys(a)
            .filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
    }
    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
            return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue = mergeValues(itemA, itemB);
            if (!sharedValue.valid) {
                return { valid: false };
            }
            newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
    }
    else if (aType === ZodParsedType.date &&
        bType === ZodParsedType.date &&
        +a === +b) {
        return { valid: true, data: a };
    }
    else {
        return { valid: false };
    }
}
class ZodIntersection extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types,
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                }),
            ]).then(([left, right]) => handleParsed(left, right));
        }
        else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            }));
        }
    }
}
ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
        left: left,
        right: right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params),
    });
};
class ZodTuple extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                exact: false,
                type: "array",
            });
            status.dirty();
        }
        const items = [...ctx.data]
            .map((item, itemIndex) => {
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema)
                return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        })
            .filter((x) => !!x); // filter nulls
        if (ctx.common.async) {
            return Promise.all(items).then((results) => {
                return ParseStatus.mergeArray(status, results);
            });
        }
        else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest,
        });
    }
}
ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params),
    });
};
class ZodRecord extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        }
        else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third),
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second),
        });
    }
}
class ZodMap extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"])),
            };
        });
        if (ctx.common.async) {
            const finalMap = new Map();
            return Promise.resolve().then(async () => {
                for (const pair of pairs) {
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return { status: status.value, value: finalMap };
            });
        }
        else {
            const finalMap = new Map();
            for (const pair of pairs) {
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
        }
    }
}
ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params),
    });
};
class ZodSet extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.minSize.message,
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    exact: false,
                    message: def.maxSize.message,
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements) {
            const parsedSet = new Set();
            for (const element of elements) {
                if (element.status === "aborted")
                    return INVALID;
                if (element.status === "dirty")
                    status.dirty();
                parsedSet.add(element.value);
            }
            return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements) => finalizeSet(elements));
        }
        else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: { value: minSize, message: errorUtil.toString(message) },
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: { value: maxSize, message: errorUtil.toString(message) },
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
}
ZodSet.create = (valueType, params) => {
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params),
    });
};
class ZodFunction extends ZodType {
    constructor() {
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error,
                },
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    errorMap,
                ].filter((x) => !!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error,
                },
            });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            return OK(async (...args) => {
                const error = new ZodError([]);
                const parsedArgs = await this._def.args
                    .parseAsync(args, params)
                    .catch((e) => {
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await fn(...parsedArgs);
                const parsedReturns = await this._def.returns._def.type
                    .parseAsync(result, params)
                    .catch((e) => {
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        }
        else {
            return OK((...args) => {
                const parsedArgs = this._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
                }
                const result = fn(...parsedArgs.data);
                const parsedReturns = this._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create()),
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType,
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    static create(args, returns, params) {
        return new ZodFunction({
            args: (args
                ? args
                : ZodTuple.create([]).rest(ZodUnknown.create())),
            returns: returns || ZodUnknown.create(),
            typeName: ZodFirstPartyTypeKind.ZodFunction,
            ...processCreateParams(params),
        });
    }
}
class ZodLazy extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
}
ZodLazy.create = (getter, params) => {
    return new ZodLazy({
        getter: getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params),
    });
};
class ZodLiteral extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
    get value() {
        return this._def.value;
    }
}
ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
        value: value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params),
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params),
    });
}
class ZodEnum extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
            enumValues[val] = val;
        }
        return enumValues;
    }
    extract(values) {
        return ZodEnum.create(values);
    }
    exclude(values) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
    }
}
ZodEnum.create = createZodEnum;
class ZodNativeEnum extends ZodType {
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string &&
            ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type,
            });
            return INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues,
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
}
ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
        values: values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params),
    });
};
class ZodPromise extends ZodType {
    unwrap() {
        return this._def.type;
    }
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise &&
            ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise
            ? ctx.data
            : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap,
            });
        }));
    }
}
ZodPromise.create = (schema, params) => {
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params),
    });
};
class ZodEffects extends ZodType {
    innerType() {
        return this._def.schema;
    }
    sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects
            ? this._def.schema.sourceType()
            : this._def.schema;
    }
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed) => {
                    return this._def.schema._parseAsync({
                        data: processed,
                        path: ctx.path,
                        parent: ctx,
                    });
                });
            }
            else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
        const checkCtx = {
            addIssue: (arg) => {
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                }
                else {
                    status.dirty();
                }
            },
            get path() {
                return ctx.path;
            },
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "refinement") {
            const executeRefinement = (acc
            // effect: RefinementEffect<any>
            ) => {
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inner.status === "aborted")
                    return INVALID;
                if (inner.status === "dirty")
                    status.dirty();
                // return value is ignored
                executeRefinement(inner.value);
                return { status: status.value, value: inner.value };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((inner) => {
                    if (inner.status === "aborted")
                        return INVALID;
                    if (inner.status === "dirty")
                        status.dirty();
                    return executeRefinement(inner.value).then(() => {
                        return { status: status.value, value: inner.value };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (!isValid(base))
                    return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return { status: status.value, value: result };
            }
            else {
                return this._def.schema
                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })
                    .then((base) => {
                    if (!isValid(base))
                        return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
                });
            }
        }
        util.assertNever(effect);
    }
}
ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params),
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params),
    });
};
class ZodOptional extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(undefined);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodOptional.create = (type, params) => {
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params),
    });
};
class ZodNullable extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
}
ZodNullable.create = (type, params) => {
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params),
    });
};
class ZodDefault extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
}
ZodDefault.create = (type, params) => {
    return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function"
            ? params.default
            : () => params.default,
        ...processCreateParams(params),
    });
};
class ZodCatch extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        // newCtx is used to not collect issues from inner types in ctx
        const newCtx = {
            ...ctx,
            common: {
                ...ctx.common,
                issues: [],
            },
        };
        const result = this._def.innerType._parse({
            data: newCtx.data,
            path: newCtx.path,
            parent: {
                ...newCtx,
            },
        });
        if (isAsync(result)) {
            return result.then((result) => {
                return {
                    status: "valid",
                    value: result.status === "valid"
                        ? result.value
                        : this._def.catchValue({
                            get error() {
                                return new ZodError(newCtx.common.issues);
                            },
                            input: newCtx.data,
                        }),
                };
            });
        }
        else {
            return {
                status: "valid",
                value: result.status === "valid"
                    ? result.value
                    : this._def.catchValue({
                        get error() {
                            return new ZodError(newCtx.common.issues);
                        },
                        input: newCtx.data,
                    }),
            };
        }
    }
    removeCatch() {
        return this._def.innerType;
    }
}
ZodCatch.create = (type, params) => {
    return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params),
    });
};
class ZodNaN extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType,
            });
            return INVALID;
        }
        return { status: "valid", value: input.data };
    }
}
ZodNaN.create = (params) => {
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params),
    });
};
const BRAND = Symbol("zod_brand");
class ZodBranded extends ZodType {
    _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx,
        });
    }
    unwrap() {
        return this._def.type;
    }
}
class ZodPipeline extends ZodType {
    _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
            const handleAsync = async () => {
                const inResult = await this._def.in._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx,
                });
                if (inResult.status === "aborted")
                    return INVALID;
                if (inResult.status === "dirty") {
                    status.dirty();
                    return DIRTY(inResult.value);
                }
                else {
                    return this._def.out._parseAsync({
                        data: inResult.value,
                        path: ctx.path,
                        parent: ctx,
                    });
                }
            };
            return handleAsync();
        }
        else {
            const inResult = this._def.in._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx,
            });
            if (inResult.status === "aborted")
                return INVALID;
            if (inResult.status === "dirty") {
                status.dirty();
                return {
                    status: "dirty",
                    value: inResult.value,
                };
            }
            else {
                return this._def.out._parseSync({
                    data: inResult.value,
                    path: ctx.path,
                    parent: ctx,
                });
            }
        }
    }
    static create(a, b) {
        return new ZodPipeline({
            in: a,
            out: b,
            typeName: ZodFirstPartyTypeKind.ZodPipeline,
        });
    }
}
const custom = (check, params = {}, 
/*
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */
fatal) => {
    if (check)
        return ZodAny.create().superRefine((data, ctx) => {
            var _a, _b;
            if (!check(data)) {
                const p = typeof params === "function"
                    ? params(data)
                    : typeof params === "string"
                        ? { message: params }
                        : params;
                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
                const p2 = typeof p === "string" ? { message: p } : p;
                ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
            }
        });
    return ZodAny.create();
};
const late = {
    object: ZodObject.lazycreate,
};
var ZodFirstPartyTypeKind;
(function (ZodFirstPartyTypeKind) {
    ZodFirstPartyTypeKind["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind["ZodPipeline"] = "ZodPipeline";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (
// const instanceOfType = <T extends new (...args: any[]) => any>(
cls, params = {
    message: `Input not instance of ${cls.name}`,
}) => custom((data) => data instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;
const ostring = () => stringType().optional();
const onumber = () => numberType().optional();
const oboolean = () => booleanType().optional();
const coerce = {
    string: ((arg) => ZodString.create({ ...arg, coerce: true })),
    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),
    boolean: ((arg) => ZodBoolean.create({
        ...arg,
        coerce: true,
    })),
    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),
    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),
};
const NEVER = INVALID;

var z = /*#__PURE__*/Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap: setErrorMap,
    getErrorMap: getErrorMap,
    makeIssue: makeIssue,
    EMPTY_PATH: EMPTY_PATH,
    addIssueToContext: addIssueToContext,
    ParseStatus: ParseStatus,
    INVALID: INVALID,
    DIRTY: DIRTY,
    OK: OK,
    isAborted: isAborted,
    isDirty: isDirty,
    isValid: isValid,
    isAsync: isAsync,
    get util () { return util; },
    get objectUtil () { return objectUtil; },
    ZodParsedType: ZodParsedType,
    getParsedType: getParsedType,
    ZodType: ZodType,
    ZodString: ZodString,
    ZodNumber: ZodNumber,
    ZodBigInt: ZodBigInt,
    ZodBoolean: ZodBoolean,
    ZodDate: ZodDate,
    ZodSymbol: ZodSymbol,
    ZodUndefined: ZodUndefined,
    ZodNull: ZodNull,
    ZodAny: ZodAny,
    ZodUnknown: ZodUnknown,
    ZodNever: ZodNever,
    ZodVoid: ZodVoid,
    ZodArray: ZodArray,
    ZodObject: ZodObject,
    ZodUnion: ZodUnion,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion,
    ZodIntersection: ZodIntersection,
    ZodTuple: ZodTuple,
    ZodRecord: ZodRecord,
    ZodMap: ZodMap,
    ZodSet: ZodSet,
    ZodFunction: ZodFunction,
    ZodLazy: ZodLazy,
    ZodLiteral: ZodLiteral,
    ZodEnum: ZodEnum,
    ZodNativeEnum: ZodNativeEnum,
    ZodPromise: ZodPromise,
    ZodEffects: ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional: ZodOptional,
    ZodNullable: ZodNullable,
    ZodDefault: ZodDefault,
    ZodCatch: ZodCatch,
    ZodNaN: ZodNaN,
    BRAND: BRAND,
    ZodBranded: ZodBranded,
    ZodPipeline: ZodPipeline,
    custom: custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late: late,
    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },
    coerce: coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    'enum': enumType,
    'function': functionType,
    'instanceof': instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    'null': nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean: oboolean,
    onumber: onumber,
    optional: optionalType,
    ostring: ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    'undefined': undefinedType,
    union: unionType,
    unknown: unknownType,
    'void': voidType,
    NEVER: NEVER,
    ZodIssueCode: ZodIssueCode,
    quotelessJson: quotelessJson,
    ZodError: ZodError
});



;// CONCATENATED MODULE: ../../../../../v-packages/packages/@nopixel-validation/dist/sdk/index.mjs
// src/modules/sdk/resource.ts

var SemVer = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
var ServerResourceInfoSchema = z.object({
  codename: z.string(),
  version: z.string().regex(SemVer),
  permissions: z.string().array()
});
var sdk_ResourceInfoSchema = ServerResourceInfoSchema.omit({
  permissions: true
});
var ResourceHandshakeResponseSchema = z.object({
  API_URL: z.string().url(),
  API_KEY: z.string(),
  KEYS: z.string().array()
});

// src/modules/sdk/rpc.ts

var RPCMetadataSchema = z.object({
  id: z.number(),
  origin: z.string()
});
var RPCRequestSchema = z.tuple([z.boolean(), z.any()]);
var RPCPendingResponseSchema = z.object({
  resolve: z["function"]().args(z.any()).returns(z["void"]()),
  reject: z["function"]().args(z.any()).returns(z["void"]()),
  timeout: z.number()
});

// src/modules/sdk/nui.ts

var NUIMetadataSchema = z.object({
  id: z.number(),
  resource: z.string()
});
var NUIRequestSchema = z.tuple([z.boolean(), z.any()]);
var NUIPendingResponseSchema = z.object({
  resolve: z["function"]().args(z.any()).returns(z["void"]()),
  reject: z["function"]().args(z.any()).returns(z["void"]()),
  timeout: z.number()
});


;// CONCATENATED MODULE: ../../../../../v-packages/packages/@nopixel-sdk/dist/client.mjs
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/core.js
var require_core = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/core.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports2, function() {
      var CryptoJS = CryptoJS || function(Math2, undefined2) {
        var create = Object.create || function() {
          function F() {
          }
          ;
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var i = 0; i < thatSigBytes; i += 4) {
                thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            var r = function(m_w) {
              var m_w = m_w;
              var m_z = 987654321;
              var mask = 4294967295;
              return function() {
                m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
                m_w = 18e3 * (m_w & 65535) + (m_w >> 16) & mask;
                var result = (m_z << 16) + m_w & mask;
                result /= 4294967296;
                result += 0.5;
                return result * (Math2.random() > 0.5 ? 1 : -1);
              };
            };
            for (var i = 0, rcache; i < nBytes; i += 4) {
              var _r = r((rcache || Math2.random()) * 4294967296);
              rcache = _r() * 987654071;
              words.push(_r() * 4294967296 | 0);
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              var processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/x64-core.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i = 0; i < wordsLength; i++) {
              words[i] = words[i].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/lib-typedarrays.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS.lib.WordArray;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/enc-utf16.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS.enc.Utf16;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/enc-base64.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS.enc.Base64;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/md5.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function GG(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function HH(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        function II(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS.MD5;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha1.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e = H[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i];
              if (i < 20) {
                t += (b & c | ~b & d) + 1518500249;
              } else if (i < 40) {
                t += (b ^ c ^ d) + 1859775393;
              } else if (i < 60) {
                t += (b & c | b & d | c & d) - 1894007588;
              } else {
                t += (b ^ c ^ d) - 899497514;
              }
              e = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS.SHA1;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha256.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e = H2[4];
            var f = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f ^ ~e & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e | 0;
            H2[5] = H2[5] + f | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS.SHA256;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha224.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS.SHA224;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha512.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wi = W[i];
              if (i < 16) {
                var Wih = Wi.high = M[offset + i * 2] | 0;
                var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                var Wil = gamma0l + Wi7l;
                var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                var Wil = Wil + gamma1l;
                var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                var Wil = Wil + Wi16l;
                var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS.SHA512;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha384.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS.SHA384;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/sha3.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
              ;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS.SHA3;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/ripemd160.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(Math2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H = hash.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS.RIPEMD160;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/hmac.js"(exports2, module) {
    "use strict";
    (function(root, factory) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pbkdf2.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA1 = C_algo.SHA1;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA1
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA1,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.PBKDF2;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/evpkdf.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              var block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS.EvpKDF;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/cipher-core.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.lib.Cipher || function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var iv = this._iv;
            if (iv) {
              var block = iv;
              this._iv = undefined2;
            } else {
              var block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              var modeCreator = mode.createEncryptor;
            } else {
              var modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              var finalProcessedBlocks = this._process(true);
            } else {
              var finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              var wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              var wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              var salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format) {
            if (typeof ciphertext == "string") {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-cfb.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CFB = function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var iv = this._iv;
          if (iv) {
            var keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            var keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS.mode.CFB;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-ctr.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTR = function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS.mode.CTR;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-ctr-gladman.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS.mode.CTRGladman;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-ofb.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.OFB = function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS.mode.OFB;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/mode-ecb.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.mode.ECB = function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS.mode.ECB;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-ansix923.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Ansix923;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-iso10126.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS.pad.Iso10126;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-iso97971.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS.lib.WordArray.create([2147483648], 1));
          CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS.pad.Iso97971;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-zeropadding.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255)) {
            i--;
          }
          data.sigBytes = i + 1;
        }
      };
      return CryptoJS.pad.ZeroPadding;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/pad-nopadding.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      CryptoJS.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS.pad.NoPadding;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/format-hex.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function(undefined2) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS.format.Hex;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/aes.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d[i] = i << 1;
            } else {
              d[i] = i << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES3 = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                var t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES3);
      })();
      return CryptoJS.AES;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/tripledes.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              for (var i = 0; i < 8; i++) {
                f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS.TripleDES;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/rc4.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + keyByte) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS.RC4;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/rabbit.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS.Rabbit;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/rabbit-legacy.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      (function() {
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS.RabbitLegacy;
    });
  }
});

// ../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "../../node_modules/.pnpm/crypto-js@3.1.9-1/node_modules/crypto-js/index.js"(exports2, module) {
    "use strict";
    (function(root, factory, undef) {
      if (typeof exports2 === "object") {
        module.exports = exports2 = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports2, function(CryptoJS) {
      return CryptoJS;
    });
  }
});

// src/shared/controls.ts
var ControlIndex = {
  "ESC": 322,
  "F1": 288,
  "F2": 289,
  "F3": 170,
  "F5": 166,
  "F6": 167,
  "F7": 168,
  "F8": 169,
  "F9": 56,
  "F10": 57,
  "~": 243,
  "#1": 157,
  "#2": 158,
  "#3": 160,
  "#4": 164,
  "#5": 165,
  "#6": 159,
  "#7": 161,
  "#8": 162,
  "#9": 163,
  "-": 84,
  "=": 83,
  "BACKSPACE": 177,
  "TAB": 37,
  "Q": 44,
  "W": 32,
  "E": 38,
  "R": 45,
  "T": 245,
  "Y": 246,
  "U": 303,
  "P": 199,
  "ENTER": 18,
  "CAPS": 137,
  "A": 34,
  "S": 8,
  "D": 9,
  "F": 23,
  "G": 47,
  "H": 74,
  "K": 311,
  "L": 182,
  "LEFTSHIFT": 21,
  "Z": 20,
  "X": 73,
  "C": 26,
  "V": 0,
  "B": 29,
  "N": 249,
  "M": 244,
  ",": 82,
  ".": 81,
  "LEFTCTRL": 36,
  "LEFTALT": 19,
  "SPACE": 22,
  "RIGHTCTRL": 70,
  "HOME": 213,
  "PAGEUP": 10,
  "PAGEDOWN": 11,
  "DELETE": 178,
  "LEFT": 174,
  "RIGHT": 175,
  "TOP": 27,
  "DOWN": 173,
  "NENTER": 201,
  "N4": 108,
  "N5": 60,
  "N6": 107,
  "N+": 96,
  "N-": 97,
  "N7": 117,
  "N8": 61,
  "N9": 118
};

// src/shared/logger.ts
var LOG_LEVELS = {
  warning: 1,
  log: 2,
  error: 3,
  debug: 4
};
var resourceLogLevel = typeof GetConvar === "function" ? GetConvar(`${GetCurrentResourceName()}_logLevel`, "") : "";
var logLevel = typeof GetConvar === "function" ? GetConvar("sv_loglevel", "warning") : "warning";
logLevel = (resourceLogLevel == null ? void 0 : resourceLogLevel.length) > 0 ? resourceLogLevel : logLevel;
(() => {
  if (!LOG_LEVELS[logLevel])
    throw new Error(`Invalid log level: ${logLevel}`);
})();
var warning = () => LOG_LEVELS[logLevel] >= LOG_LEVELS["warning"];
var log = () => LOG_LEVELS[logLevel] >= LOG_LEVELS["log"];
var error = () => LOG_LEVELS[logLevel] >= LOG_LEVELS["error"];
var debug = () => logLevel === "debug";
var Logger = {
  warning: (text, ...input) => {
    if (!warning())
      return;
    console.log(`^3[WARNING] ^7${text}`, ...input, "^0");
  },
  log: (text, ...input) => {
    if (!log())
      return;
    console.log(`^5[nopixel] ^7${text}`, ...input, "^0");
  },
  debug: (text, ...input) => {
    if (!debug())
      return;
    console.log(`^2[D] ${text}`, ...input, "^0");
  },
  error: (text, ...input) => {
    if (!error())
      return;
    console.log(`^1[ERROR] ${text}`, ...input, "^0");
  }
};

// src/shared/utils.ts




// src/shared/math.ts
var math_exports = {};
__export(math_exports, {
  MathUtils: () => MathUtils
});

// src/shared/classes/vector.ts
var _parseVectors, parseVectors_fn;
var _Vector3 = class _Vector3 {
  constructor(x, y, z) {
    __privateAdd(this, _parseVectors);
    const vectors = __privateMethod(this, _parseVectors, parseVectors_fn).call(this, x, y, z);
    this.x = vectors.x;
    this.y = vectors.y;
    this.z = vectors.z;
  }
  equals(x, y, z) {
    const vectors = __privateMethod(this, _parseVectors, parseVectors_fn).call(this, x, y, z);
    return this.x === vectors.x && this.y === vectors.y && this.z === vectors.z;
  }
  add(x, y, z, s) {
    let vectors = __privateMethod(this, _parseVectors, parseVectors_fn).call(this, x, y, z);
    this.x += s ? vectors.x * s : vectors.x;
    this.y += s ? vectors.y * s : vectors.y;
    this.z += s ? vectors.z * s : vectors.z;
    return this;
  }
  addScalar(scalar) {
    if (typeof scalar !== "number") {
      throw new Error("Invalid scalar");
    }
    this.x += scalar;
    this.y += scalar;
    this.z += scalar;
    return this;
  }
  sub(x, y, z, s) {
    const vectors = __privateMethod(this, _parseVectors, parseVectors_fn).call(this, x, y, z);
    this.x -= s ? vectors.x * s : vectors.x;
    this.y -= s ? vectors.y * s : vectors.y;
    this.z -= s ? vectors.z * s : vectors.z;
    return this;
  }
  subScalar(scalar) {
    if (typeof scalar !== "number") {
      throw new Error("Invalid scalar");
    }
    this.x -= scalar;
    this.y -= scalar;
    this.z -= scalar;
    return this;
  }
  multiply(x, y, z) {
    const vectors = __privateMethod(this, _parseVectors, parseVectors_fn).call(this, x, y, z);
    this.x *= vectors.x;
    this.y *= vectors.y;
    this.z *= vectors.z;
    return this;
  }
  multiplyScalar(scalar) {
    if (typeof scalar !== "number") {
      throw new Error("Invalid scalar");
    }
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  }
  divide(x, y, z) {
    const vectors = __privateMethod(this, _parseVectors, parseVectors_fn).call(this, x, y, z);
    this.x /= vectors.x;
    this.y /= vectors.y;
    this.z /= vectors.z;
    return this;
  }
  divideScalar(scalar) {
    if (typeof scalar !== "number") {
      throw new Error("Invalid scalar");
    }
    this.x /= scalar;
    this.y /= scalar;
    this.z /= scalar;
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }
  getCenter(x, y, z) {
    const vectors = __privateMethod(this, _parseVectors, parseVectors_fn).call(this, x, y, z);
    return new _Vector3((this.x + vectors.x) / 2, (this.y + vectors.y) / 2, (this.z + vectors.z) / 2);
  }
  getDistance(x, y, z) {
    const [x1, y1, z1] = x instanceof Array ? x : typeof x === "object" ? [x.x, x.y, x.z] : [x, y, z];
    if (typeof x1 !== "number" || typeof y1 !== "number" || typeof z1 !== "number") {
      throw new Error("Invalid vector coordinates");
    }
    const [dX, dY, dZ] = [this.x - x1, this.y - y1, this.z - z1];
    return Math.sqrt(dX * dX + dY * dY + dZ * dZ);
  }
  toArray(fractionDigits) {
    if (typeof fractionDigits === "number") {
      return [
        parseFloat(this.x.toFixed(fractionDigits)),
        parseFloat(this.y.toFixed(fractionDigits)),
        parseFloat(this.z.toFixed(fractionDigits))
      ];
    }
    return [this.x, this.y, this.z];
  }
  toJSON(fractionDigits) {
    if (typeof fractionDigits === "number") {
      return {
        x: parseFloat(this.x.toFixed(fractionDigits)),
        y: parseFloat(this.y.toFixed(fractionDigits)),
        z: parseFloat(this.z.toFixed(fractionDigits))
      };
    }
    return { x: this.x, y: this.y, z: this.z };
  }
  toString(fractionDigits) {
    return JSON.stringify(this.toJSON(fractionDigits));
  }
};
_parseVectors = new WeakSet();
parseVectors_fn = function(x, y, z) {
  let coords = { x: 0, y: 0, z: 0 };
  if (x instanceof _Vector3) {
    coords = x;
  } else if (x instanceof Array) {
    coords = { x: x[0], y: x[1], z: x[2] };
  } else if (typeof x === "object") {
    coords = x;
  } else {
    coords = { x, y, z };
  }
  if (typeof coords.x !== "number" || typeof coords.y !== "number" || typeof coords.z !== "number") {
    throw new Error("Invalid vector coordinates");
  }
  return coords;
};
var Vector3 = _Vector3;

// src/shared/math.ts
var clamp = (value, min, max) => {
  return Math.min(Math.max(value, min), max);
};
var getMapRange = (from, to, scale) => {
  return to[0] + (scale - from[0]) * (to[1] - to[0]) / (from[1] - from[0]);
};
var getDistance = ([aX, aY, aZ], [bX, bY, bZ]) => {
  const [dX, dY, dZ] = [aX - bX, aY - bY, aZ - bZ];
  return Math.sqrt(dX * dX + dY * dY + dZ * dZ);
};
var getRandomNumber = (pMin, pMax) => {
  return pMax ? Math.floor(Math.random() * (pMax - pMin + 1) + pMin) : Math.floor(Math.random() * pMin);
};
var parseVector3 = (x, y, z) => {
  if (x instanceof Vector3) {
    return x;
  } else if (x instanceof Array) {
    return new Vector3(x);
  } else if (typeof x === "object") {
    return new Vector3(x);
  }
  if (typeof x !== "number" || typeof y !== "number" || typeof z !== "number") {
    throw new Error("Invalid vector coordinates");
  }
  return new Vector3(x, y, z);
};
var MathUtils = {
  clamp,
  getMapRange,
  getDistance,
  getRandomNumber,
  parseVector3
};

// src/shared/utils.ts
function Cacheable(getValueCb, options) {
  const key = "_";
  const map = CacheableMap((ctx, _, ...args) => {
    return getValueCb(ctx, ...args);
  }, options);
  return {
    get: function(...args) {
      return map.get(key, ...args);
    },
    reset: function() {
      map.reset(key);
    }
  };
}
function CacheableMap(getValueCb, options) {
  const ttl = options.timeToLive || 6e4;
  const cachedValues = {};
  async function ensureCachedValue(key, ...args) {
    let cachedValue = cachedValues[key];
    if (!cachedValue) {
      cachedValue = { value: null, lastUpdated: 0 };
      cachedValues[key] = cachedValue;
    }
    const now = Date.now();
    if (cachedValue.lastUpdated === 0 || now - cachedValue.lastUpdated > ttl) {
      const [shouldCache, value] = await getValueCb(cachedValue, key, ...args);
      if (shouldCache) {
        cachedValue.lastUpdated = now;
        cachedValue.value = value;
      }
      return value;
    }
    return await new Promise((resolve) => setTimeout(() => resolve(cachedValue.value), 0));
  }
  return {
    get: async function(key, ...args) {
      return await ensureCachedValue(key, ...args);
    },
    reset: function(key) {
      const cachedValue = cachedValues[key];
      if (cachedValue)
        cachedValue.lastUpdated = 0;
    }
  };
}
function getUUID() {
  if (typeof global.crypto === "object") {
    return esm_browser_v4();
  } else {
    return new uuid(4).toString();
  }
}
function hashString(pString) {
  return esm_browser_v5(pString, esm_browser_v5.URL);
}
function WaitForCondition(conditionCallback, timeoutMS) {
  return new Promise((resolve, reject) => {
    const start = Date.now();
    const tickId = setInterval(() => {
      const hasTimedOut = Date.now() - start > timeoutMS;
      if (conditionCallback() || hasTimedOut) {
        clearInterval(tickId);
        return resolve(hasTimedOut);
      }
    }, 1);
  });
}
function client_Wait(pTime) {
  return new Promise((resolve) => setTimeout(() => resolve(), pTime));
}
function WaitForNextFrame() {
  return client_Wait(0);
}
var client_Utils = {
  cache: Cacheable,
  cacheableMap: CacheableMap,
  waitForCondition: WaitForCondition,
  getUUID,
  getStringHash: hashString,
  wait: client_Wait,
  waitForNextFrame: WaitForNextFrame,
  deflate: deflate_1,
  inflate: inflate_1,
  ...math_exports
};

// src/shared/classes/cache.ts
var _map, _ttl;
var client_Cache = class {
  constructor(ttl) {
    __privateAdd(this, _map, void 0);
    __privateAdd(this, _ttl, void 0);
    __privateSet(this, _ttl, ttl != null ? ttl : 5);
    __privateSet(this, _map, /* @__PURE__ */ new Map());
  }
  setTTL(ttl) {
    __privateSet(this, _ttl, ttl);
  }
  set(key, value, ttl) {
    __privateGet(this, _map).set(key, { value, expiration: Date.now() + (ttl != null ? ttl : __privateGet(this, _ttl)) * 1e3 });
    return this;
  }
  get(key, stale = false) {
    const entry = __privateGet(this, _map).get(key);
    const valid = entry ? stale ? true : entry.expiration > Date.now() : false;
    if (!entry || !valid) {
      if (entry)
        __privateGet(this, _map).delete(key);
      return;
    }
    return entry.value;
  }
  has(key, stale = false) {
    const entry = __privateGet(this, _map).get(key);
    const valid = entry ? stale ? true : entry.expiration > Date.now() : false;
    if (entry && !valid) {
      __privateGet(this, _map).delete(key);
    }
    return valid;
  }
  delete(key) {
    return __privateGet(this, _map).delete(key);
  }
  clear() {
    __privateGet(this, _map).clear();
  }
  values(stale = false) {
    const values = [];
    const date = Date.now();
    for (const entry of __privateGet(this, _map).values()) {
      if (stale || entry.expiration > date) {
        values.push(entry.value);
      }
    }
    return values;
  }
  keys(stale = false) {
    const keys = [];
    const date = Date.now();
    for (const [key, entry] of __privateGet(this, _map).entries()) {
      if (stale || entry.expiration > date) {
        keys.push(key);
      }
    }
    return keys;
  }
  entries(stale = false) {
    const entries = [];
    const date = Date.now();
    for (const [key, entry] of __privateGet(this, _map).entries()) {
      if (stale || entry.expiration > date) {
        entries.push([key, entry.value]);
      }
    }
    return entries;
  }
};
_map = new WeakMap();
_ttl = new WeakMap();

// src/shared/enums/inventory.ts
var BodySlot = /* @__PURE__ */ ((BodySlot2) => {
  BodySlot2[BodySlot2["hat"] = 0] = "hat";
  BodySlot2[BodySlot2["mask"] = 1] = "mask";
  BodySlot2[BodySlot2["glasses"] = 2] = "glasses";
  BodySlot2[BodySlot2["armor"] = 3] = "armor";
  BodySlot2[BodySlot2["shoes"] = 4] = "shoes";
  BodySlot2[BodySlot2["idcard"] = 5] = "idcard";
  BodySlot2[BodySlot2["mobilephone"] = 6] = "mobilephone";
  BodySlot2[BodySlot2["keyring"] = 7] = "keyring";
  BodySlot2[BodySlot2["bankcard"] = 8] = "bankcard";
  BodySlot2[BodySlot2["backpack"] = 9] = "backpack";
  return BodySlot2;
})(BodySlot || {});

// src/shared/fivem/exports.ts
var ReferenceCache = {};
var getExportEventName = (resourceName, exportName) => `__cfx_export_${resourceName}_${exportName}`;
var Async = new Proxy(
  (pKey, pCallback) => {
    const wrapperCB = (cb, ...args) => {
      const result = pCallback(...args);
      if (result instanceof Promise) {
        result.then((promiseResult) => cb(promiseResult));
      } else {
        cb(result);
      }
    };
    const resourceName = GetCurrentResourceName();
    if (resourceName == void 0) {
      throw new Error("Failed to get resource name, are you sure you are using this in a fivem resource?");
    }
    on(getExportEventName(resourceName, pKey), (cb) => {
      cb(wrapperCB);
    });
  },
  {
    apply: (cb, _, args) => {
      cb(...args);
    },
    get: (_, resource) => {
      if (ReferenceCache[resource] == void 0)
        ReferenceCache[resource] = {};
      return new Proxy(
        {},
        {
          get: (_2, key) => {
            const cacheId = `${key}_async`;
            return (...args) => {
              return new Promise(async (resolve, reject) => {
                const isNotRunning = await client_Utils.waitForCondition(() => GetResourceState(resource) === "started", 6e4);
                if (isNotRunning) {
                  return reject(`Resource ${resource} is not running`);
                }
                if (ReferenceCache[resource][cacheId] === void 0) {
                  emit(getExportEventName(resource, key), (reference) => {
                    ReferenceCache[resource][cacheId] = reference;
                  });
                  const notCached = await client_Utils.waitForCondition(() => ReferenceCache[resource][cacheId] !== void 0, 1e3);
                  if (notCached) {
                    return reject(`Failed to get export ${key} from resource ${resource}`);
                  }
                }
                try {
                  ReferenceCache[resource][cacheId](resolve, ...args);
                } catch (e) {
                  reject(e);
                }
              });
            };
          }
        }
      );
    }
  }
);
var Sync = new Proxy(
  (pKey, pCallback) => {
    const resourceName = GetCurrentResourceName();
    if (resourceName == void 0) {
      throw new Error("Failed to get resource name, are you sure you are using this in a fivem resource?");
    } else if (typeof pCallback !== "function") {
      throw new Error("Callback is not a function");
    } else if (typeof pKey !== "string") {
      throw new Error("Export name must be a string");
    }
    on(getExportEventName(resourceName, pKey), (cb) => {
      cb(pCallback);
    });
  },
  {
    apply: (cb, _, args) => {
      cb(...args);
    },
    get: (_, resource) => {
      if (ReferenceCache[resource] == void 0)
        ReferenceCache[resource] = {};
      return new Proxy(
        {},
        {
          get: (_2, key) => {
            const cacheId = `${key}_sync`;
            if (ReferenceCache[resource][cacheId] === void 0) {
              emit(getExportEventName(resource, key), (reference) => {
                ReferenceCache[resource][cacheId] = reference;
              });
              if (ReferenceCache[resource][cacheId] === void 0) {
                if (GetResourceState(resource) !== "started") {
                  throw new Error(`Resource ${resource} is not running`);
                } else {
                  throw new Error(`No such export ${key} in resource ${resource}`);
                }
              }
            }
            return (...args) => {
              try {
                return ReferenceCache[resource][cacheId](...args);
              } catch (e) {
                throw new Error(`An error occurred while calling export ${key} of resource ${resource} - see above for details`);
              }
            };
          }
        }
      );
    }
  }
);
on("onResourceStop", (resource) => ReferenceCache[resource] = void 0);
var Exports = {
  Async,
  Sync
};

// src/shared/hashing.ts
var import_crypto_js = __toESM(require_crypto_js());
var _H, _I, _O, _cache, _hashKey, hashKey_get, _decodeKey, decodeKey_get, _encodeKey, encodeKey_get, _encodeBase64, encodeBase64_fn, _decodeBase64, decodeBase64_fn, _encodeAES, encodeAES_fn, _decodeAES, decodeAES_fn, _generateKey, generateKey_fn;
var hashing_default = class {
  constructor(pToken, pSecret) {
    __privateAdd(this, _hashKey);
    __privateAdd(this, _decodeKey);
    __privateAdd(this, _encodeKey);
    __privateAdd(this, _encodeBase64);
    __privateAdd(this, _decodeBase64);
    __privateAdd(this, _encodeAES);
    __privateAdd(this, _decodeAES);
    __privateAdd(this, _generateKey);
    __privateAdd(this, _H, void 0);
    __privateAdd(this, _I, void 0);
    __privateAdd(this, _O, void 0);
    __privateAdd(this, _cache, {});
    const token = __privateMethod(this, _decodeBase64, decodeBase64_fn).call(this, pToken);
    const decoded = __privateMethod(this, _decodeAES, decodeAES_fn).call(this, token, pSecret);
    const [h, i, o] = decoded.split(":");
    __privateSet(this, _H, h);
    __privateSet(this, _I, i);
    __privateSet(this, _O, o);
  }
  hashString(string) {
    var _a;
    const key = __privateGet(this, _hashKey, hashKey_get);
    const cache = (_a = __privateGet(this, _cache)[key]) == null ? void 0 : _a[string];
    if (cache)
      return cache;
    if (!__privateGet(this, _cache)[key])
      __privateGet(this, _cache)[key] = {};
    const hash = __privateMethod(this, _encodeBase64, encodeBase64_fn).call(this, (0, import_crypto_js.HmacMD5)(string, key).toString());
    __privateGet(this, _cache)[key][string] = hash;
    if (IsDuplicityVersion()) {
      Logger.log(`[SDK] Hash Debug | Event: ${string} | Hash: ${hash}`);
    }
    return hash;
  }
  encode(payload) {
    let encoded;
    const key = __privateGet(this, _encodeKey, encodeKey_get);
    try {
      encoded = __privateMethod(this, _encodeAES, encodeAES_fn).call(this, JSON.stringify(payload), key);
    } catch (e) {
      Logger.error("Failed to encode payload");
    }
    return encoded;
  }
  decode(payload) {
    let decoded;
    const key = __privateGet(this, _decodeKey, decodeKey_get);
    try {
      decoded = JSON.parse(__privateMethod(this, _decodeAES, decodeAES_fn).call(this, payload, key));
    } catch (e) {
      Logger.error("Failed to decode payload");
    }
    return decoded;
  }
};
_H = new WeakMap();
_I = new WeakMap();
_O = new WeakMap();
_cache = new WeakMap();
_hashKey = new WeakSet();
hashKey_get = function() {
  var _a;
  return (_a = __privateGet(this, _H)) != null ? _a : __privateMethod(this, _generateKey, generateKey_fn).call(this);
};
_decodeKey = new WeakSet();
decodeKey_get = function() {
  var _a;
  return (_a = __privateGet(this, _I)) != null ? _a : __privateMethod(this, _generateKey, generateKey_fn).call(this);
};
_encodeKey = new WeakSet();
encodeKey_get = function() {
  var _a;
  return (_a = __privateGet(this, _O)) != null ? _a : __privateMethod(this, _generateKey, generateKey_fn).call(this);
};
_encodeBase64 = new WeakSet();
encodeBase64_fn = function(payload) {
  if (typeof payload !== "string")
    return "";
  return import_crypto_js.enc.Base64.stringify(import_crypto_js.enc.Utf8.parse(payload));
};
_decodeBase64 = new WeakSet();
decodeBase64_fn = function(payload) {
  if (typeof payload !== "string")
    return "";
  return import_crypto_js.enc.Utf8.stringify(import_crypto_js.enc.Base64.parse(payload));
};
_encodeAES = new WeakSet();
encodeAES_fn = function(payload, passphrase) {
  if (typeof payload !== "string" || typeof passphrase !== "string")
    return "";
  return import_crypto_js.AES.encrypt(payload, passphrase).toString();
};
_decodeAES = new WeakSet();
decodeAES_fn = function(payload, passphrase) {
  if (typeof payload !== "string" || typeof passphrase !== "string")
    return "";
  return import_crypto_js.AES.decrypt(payload, passphrase).toString(import_crypto_js.enc.Utf8);
};
_generateKey = new WeakSet();
generateKey_fn = function(length = 128) {
  return import_crypto_js.lib.WordArray.random(length / 8).toString(import_crypto_js.enc.Utf8);
};

// src/client/modules/events/controller.ts
var _hashing;
var controller_default = class {
  constructor() {
    __privateAdd(this, _hashing, void 0);
    const ResourceName2 = GetCurrentResourceName();
    const convarId = client_Utils.getStringHash(`__npx_sdk:${ResourceName2}:token`);
    const token = GetConvar(convarId, "");
    __privateSet(this, _hashing, new hashing_default(token, "0x97DE8E2"));
  }
  on(event, callback) {
    const hash = __privateGet(this, _hashing).hashString(event);
    return on(hash, callback);
  }
  onNet(event, callback) {
    const hash = __privateGet(this, _hashing).hashString(event);
    onNet(hash, callback);
    const hashCompressed = __privateGet(this, _hashing).hashString(`${event}-c`);
    onNet(hashCompressed, (payload) => {
      const decompressed = client_Utils.inflate(payload);
      const unpacked = msgpack_unpack(decompressed);
      return callback(...unpacked);
    });
  }
  emit(event, ...args) {
    const hash = __privateGet(this, _hashing).hashString(event);
    return emit(hash, ...args);
  }
  emitNet(event, ...args) {
    let payload = msgpack_pack(args);
    let byteLength = payload.length;
    const hash = __privateGet(this, _hashing).hashString(event);
    if (byteLength < 16e3) {
      TriggerServerEventInternal(hash, payload, payload.length);
    } else {
      TriggerLatentServerEventInternal(hash, payload, payload.length, 128e3);
    }
  }
};
_hashing = new WeakMap();

// src/client/modules/events/index.ts
var client_Events = new controller_default();

// src/client/modules/rpc/controller.ts
var _ready, _pending, _callCount, _resource, _hashing2, _on, on_fn, _emit, emit_fn, _init, init_fn;
var controller_default2 = class {
  constructor() {
    __privateAdd(this, _on);
    __privateAdd(this, _emit);
    __privateAdd(this, _init);
    __privateAdd(this, _ready, void 0);
    __privateAdd(this, _pending, void 0);
    __privateAdd(this, _callCount, void 0);
    __privateAdd(this, _resource, void 0);
    __privateAdd(this, _hashing2, void 0);
    __privateSet(this, _ready, false);
    __privateSet(this, _pending, /* @__PURE__ */ new Map());
    __privateSet(this, _callCount, GetGameTimer());
    __privateSet(this, _resource, GetCurrentResourceName());
    const convarId = client_Utils.getStringHash(`__npx_sdk:${__privateGet(this, _resource)}:token`);
    const token = GetConvar(convarId, "");
    __privateSet(this, _hashing2, new hashing_default(token, "0x97DE8E2"));
    __privateMethod(this, _init, init_fn).call(this);
  }
  register(event, callback) {
    __privateMethod(this, _on, on_fn).call(this, `__rpc_req:${event}`, async (meta, args) => {
      let response, success;
      const invokingResource = GetInvokingResource();
      if (invokingResource)
        return;
      const metadata = __privateGet(this, _hashing2).decode(meta);
      if (!(metadata == null ? void 0 : metadata.id) || !(metadata == null ? void 0 : metadata.origin)) {
        return Logger.error(`[RPC] ${event} - Invalid metadata received`);
      }
      try {
        response = await callback(...args);
        success = true;
      } catch (e) {
        response = e.message;
        success = false;
      }
      __privateMethod(this, _emit, emit_fn).call(this, `__rpc_res:${metadata.origin}`, metadata.id, [success, response]);
    });
  }
  execute(event, ...args) {
    const metadata = { id: ++__privateWrapper(this, _callCount)._, origin: __privateGet(this, _resource) };
    const promise = new Promise((resolve, reject) => {
      let timeout = +setTimeout(() => reject(new Error(`RPC timed out | ${event}`)), 6e4);
      __privateGet(this, _pending).set(metadata.id, { resolve, reject, timeout });
    });
    promise.finally(() => __privateGet(this, _pending).delete(metadata.id));
    __privateMethod(this, _emit, emit_fn).call(this, `__rpc_req:${event}`, __privateGet(this, _hashing2).encode(metadata), args);
    return promise;
  }
  executeCustom(event, options, ...args) {
    const metadata = { id: ++__privateWrapper(this, _callCount)._, origin: __privateGet(this, _resource) };
    const promise = new Promise((resolve, reject) => {
      var _a;
      let timeout = +setTimeout(() => reject(new Error(`RPC timed out | ${event}`)), (_a = options.timeout) != null ? _a : 6e4);
      __privateGet(this, _pending).set(metadata.id, { resolve, reject, timeout });
    });
    promise.finally(() => __privateGet(this, _pending).delete(metadata.id));
    __privateMethod(this, _emit, emit_fn).call(this, `__rpc_req:${event}`, __privateGet(this, _hashing2).encode(metadata), args);
    return promise;
  }
};
_ready = new WeakMap();
_pending = new WeakMap();
_callCount = new WeakMap();
_resource = new WeakMap();
_hashing2 = new WeakMap();
_on = new WeakSet();
on_fn = function(event, callback) {
  const hash = __privateGet(this, _hashing2).hashString(event);
  onNet(hash, callback);
  const hashCompressed = __privateGet(this, _hashing2).hashString(`${event}-c`);
  onNet(hashCompressed, (payload) => {
    const decompressed = client_Utils.inflate(payload);
    const unpacked = msgpack_unpack(decompressed);
    return callback(...unpacked);
  });
};
_emit = new WeakSet();
emit_fn = function(event, ...args) {
  let payload = msgpack_pack(args);
  let byteLength = payload.length;
  const hash = __privateGet(this, _hashing2).hashString(event);
  if (byteLength < 16e3) {
    TriggerServerEventInternal(hash, payload, payload.length);
  } else {
    TriggerLatentServerEventInternal(hash, payload, payload.length, 128e3);
  }
};
_init = new WeakSet();
init_fn = function() {
  if (__privateGet(this, _ready))
    return Logger.error("SDK RPC handlers already initialized");
  __privateMethod(this, _on, on_fn).call(this, `__rpc_res:${__privateGet(this, _resource)}`, (reqId, [success, response]) => {
    const pending = __privateGet(this, _pending).get(reqId);
    if (!pending)
      return;
    clearTimeout(pending.timeout);
    if (success) {
      pending.resolve(response);
    } else {
      pending.reject(new Error(response));
    }
  });
  __privateSet(this, _ready, true);
  Logger.debug("SDK RPC handlers initialized");
};

// src/client/modules/rpc/index.ts
var client_RPC = new controller_default2();

// src/shared/anime.ts
var import_crypto_js2 = __toESM(require_crypto_js());
var GenerateKey = (length = 128) => {
  return import_crypto_js2.lib.WordArray.random(length / 8).toString();
};
var EncodeAES = (payload, passphrase) => {
  if (typeof payload !== "string" || typeof passphrase !== "string")
    return "";
  return import_crypto_js2.AES.encrypt(payload, passphrase).toString();
};
var DecodeAES = (payload, passphrase) => {
  if (typeof payload !== "string" || typeof passphrase !== "string")
    return "";
  return import_crypto_js2.AES.decrypt(payload, passphrase).toString(import_crypto_js2.enc.Utf8);
};
var EncodeBase64 = (payload) => {
  if (typeof payload !== "string")
    return "";
  return import_crypto_js2.enc.Base64.stringify(import_crypto_js2.enc.Utf8.parse(payload));
};
var HashHMACMD5 = (payload, secret) => {
  return EncodeBase64((0, import_crypto_js2.HmacMD5)(payload, secret).toString());
};
var StringCache = {};
var EncodeString = (event, key = GenerateKey()) => {
  if (StringCache[event] === void 0) {
    StringCache[event] = HashHMACMD5(event, key);
  }
  return StringCache[event];
};
var EncodePayload = (payload, key = GenerateKey()) => {
  try {
    return EncodeAES(JSON.stringify(payload), key);
  } catch (e) {
    Logger.error("Failed to encode payload");
  }
};
var DecodePayload = (payload, key = GenerateKey()) => {
  try {
    return JSON.parse(DecodeAES(payload, key));
  } catch (e) {
    Logger.error("Failed to decode payload");
  }
};

// src/client/modules/nui/controller.ts
var _resource2, _H2, _I2, _O2, _ready2, _count, _queue, _pending2, _onRaw, onRaw_fn, _on2, on_fn2, _emitRaw, emitRaw_fn, _emit2, emit_fn2, _init2, init_fn2;
var controller_default3 = class {
  constructor() {
    __privateAdd(this, _onRaw);
    __privateAdd(this, _on2);
    __privateAdd(this, _emitRaw);
    __privateAdd(this, _emit2);
    __privateAdd(this, _init2);
    __privateAdd(this, _resource2, void 0);
    __privateAdd(this, _H2, void 0);
    __privateAdd(this, _I2, void 0);
    __privateAdd(this, _O2, void 0);
    __privateAdd(this, _ready2, void 0);
    __privateAdd(this, _count, void 0);
    __privateAdd(this, _queue, void 0);
    __privateAdd(this, _pending2, void 0);
    __privateSet(this, _resource2, GetCurrentResourceName());
    __privateSet(this, _H2, GenerateKey(64));
    __privateSet(this, _I2, GenerateKey(64));
    __privateSet(this, _O2, GenerateKey(64));
    __privateSet(this, _ready2, false);
    __privateSet(this, _count, 0);
    __privateSet(this, _queue, []);
    __privateSet(this, _pending2, /* @__PURE__ */ new Map());
    __privateMethod(this, _onRaw, onRaw_fn).call(this, "__npx_sdk:init", __privateMethod(this, _init2, init_fn2).bind(this));
  }
  async register(event, callback) {
    __privateMethod(this, _on2, on_fn2).call(this, `__nui_req:${event}`, async (meta, args) => {
      let response, success;
      const metadata = DecodePayload(meta, __privateGet(this, _I2));
      if (!(metadata == null ? void 0 : metadata.id) || !(metadata == null ? void 0 : metadata.resource)) {
        return Logger.error(`[NUI] ${event} - Invalid metadata received`);
      }
      try {
        response = await callback(...args);
        success = true;
      } catch (e) {
        response = e.message;
        success = false;
      }
      __privateMethod(this, _emit2, emit_fn2).call(this, `__nui_res:${metadata.resource}`, metadata.id, [success, response]);
    });
  }
  async execute(event, ...args) {
    const metadata = { id: ++__privateWrapper(this, _count)._, resource: __privateGet(this, _resource2) };
    const promise = new Promise((resolve, reject) => {
      let timeout;
      if (__privateGet(this, _ready2)) {
        timeout = +setTimeout(() => reject(new Error(`RPC timed out | ${event}`)), 6e4);
      } else {
        timeout = 0;
      }
      __privateGet(this, _pending2).set(metadata.id, { resolve, reject, timeout });
    });
    promise.finally(() => __privateGet(this, _pending2).delete(metadata.id));
    if (!__privateGet(this, _ready2)) {
      __privateGet(this, _queue).push({ type: "execute", event: `__nui_req:${event}`, metadata, args });
    } else {
      __privateMethod(this, _emit2, emit_fn2).call(this, `__nui_req:${event}`, EncodePayload(metadata, __privateGet(this, _O2)), args);
    }
    return promise;
  }
};
_resource2 = new WeakMap();
_H2 = new WeakMap();
_I2 = new WeakMap();
_O2 = new WeakMap();
_ready2 = new WeakMap();
_count = new WeakMap();
_queue = new WeakMap();
_pending2 = new WeakMap();
_onRaw = new WeakSet();
onRaw_fn = function(event, callback) {
  RegisterNuiCallback(event, ({ args }, cb) => {
    cb(true);
    return callback(...args);
  });
};
_on2 = new WeakSet();
on_fn2 = function(event, callback) {
  if (__privateGet(this, _ready2)) {
    const hash = EncodeString(event, __privateGet(this, _H2));
    return __privateMethod(this, _onRaw, onRaw_fn).call(this, hash, callback);
  }
  __privateGet(this, _queue).push({ type: "on", event, callback });
};
_emitRaw = new WeakSet();
emitRaw_fn = function(event, ...args) {
  SendNuiMessage(JSON.stringify({ event, args }, null));
};
_emit2 = new WeakSet();
emit_fn2 = function(event, ...args) {
  if (__privateGet(this, _ready2)) {
    const hash = EncodeString(event, __privateGet(this, _H2));
    return __privateMethod(this, _emitRaw, emitRaw_fn).call(this, hash, ...args);
  }
  __privateGet(this, _queue).push({ type: "emit", event, args });
};
_init2 = new WeakSet();
init_fn2 = async function() {
  if (__privateGet(this, _ready2))
    return Logger.error("[NUI] SDK already initialized");
  __privateSet(this, _ready2, true);
  __privateMethod(this, _on2, on_fn2).call(this, `__nui_res:${__privateGet(this, _resource2)}`, (id, [success, response]) => {
    const pending = __privateGet(this, _pending2).get(id);
    if (!pending)
      return Logger.error(`[NUI] Invalid response received`);
    clearTimeout(pending.timeout);
    if (success) {
      pending.resolve(response);
    } else {
      pending.reject(response);
    }
  });
  __privateMethod(this, _emitRaw, emitRaw_fn).call(this, "__npx_sdk:ready", EncodeBase64(`${__privateGet(this, _H2)}:${__privateGet(this, _I2)}:${__privateGet(this, _O2)}`));
  Logger.debug("[NUI] SDK initialized");
  for (const item of __privateGet(this, _queue)) {
    if (item.type === "on") {
      __privateMethod(this, _on2, on_fn2).call(this, item.event, item.callback);
    } else if (item.type === "emit") {
      setTimeout(() => __privateMethod(this, _emit2, emit_fn2).call(this, item.event, ...item.args), 1e3);
    } else if (item.type === "execute") {
      const pending = __privateGet(this, _pending2).get(item.metadata.id);
      if (!pending) {
        Logger.error(`[RPC] ${item.event} - Failed to execute queued RPC call`);
        continue;
      }
      pending.timeout = +setTimeout(() => pending.reject(new Error(`RPC timed out | ${item.event}`)), 6e4);
      setTimeout(() => __privateMethod(this, _emit2, emit_fn2).call(this, item.event, EncodePayload(item.metadata, __privateGet(this, _O2)), item.args), 1e3);
    }
  }
};

// src/client/modules/nui/index.ts
var NUI = new controller_default3();

// src/client/modules/sockets/controller.ts
var _API_URL, _API_KEY, _ready3;
var controller_default4 = class {
  constructor() {
    __privateAdd(this, _API_URL, void 0);
    __privateAdd(this, _API_KEY, void 0);
    __privateAdd(this, _ready3, void 0);
    __privateSet(this, _ready3, false);
    NUI.register("__npx_sdk:sockets:init", async () => {
      Logger.debug("Sockets", "Initializing sockets...");
      if (__privateGet(this, _ready3))
        return { url: __privateGet(this, _API_URL), API_KEY: __privateGet(this, _API_KEY) };
      const result = await new Promise((resolve) => {
        emit("__npx_core:sockets:init", resolve);
      });
      if (!(result == null ? void 0 : result.API_URL) || !(result == null ? void 0 : result.API_KEY))
        return;
      __privateSet(this, _API_URL, result.API_URL);
      __privateSet(this, _API_KEY, result.API_KEY);
      __privateSet(this, _ready3, true);
      Logger.debug("Sockets", "Sockets initialized.");
      return result;
    });
  }
  register(event, callback) {
    NUI.execute("__npx_sdk:sockets:register", event);
    NUI.register("__npx_sdk:sockets:pipe:" + event, async (data) => {
      return callback(data);
    });
  }
  async execute(event, data) {
    return NUI.execute("__npx_sdk:sockets:execute", event, data);
  }
};
_API_URL = new WeakMap();
_API_KEY = new WeakMap();
_ready3 = new WeakMap();

// src/client/modules/sockets/index.ts
var Sockets = new controller_default4();

// src/client/modules/inventory/index.ts
var Inventory = {
  HasItem: async (itemId, filterOptions) => {
    return await globalThis.exports["inventory"].HasItem(itemId, filterOptions);
  },
  GetItemStacks: async (itemId, filterOptions) => {
    return await globalThis.exports["inventory"].GetItemStacks(itemId, filterOptions);
  },
  GetAllItemStacks: async (filterOptions) => {
    return await globalThis.exports["inventory"].GetAllItemStacks(filterOptions);
  },
  GetItemList: async () => {
    return await globalThis.exports["inventory"].GetItemList();
  },
  GetPlayerInventories: async () => {
    return await globalThis.exports["inventory"].GetPlayerInventories();
  },
  GetWeaponsList: () => {
    return globalThis.exports["inventory"].GetWeaponsList();
  },
  GetWeapon: (weaponHash) => {
    return globalThis.exports["inventory"].GetWeapon(weaponHash);
  },
  OpenInventory: (inventoriesToOpen, openGround) => {
    globalThis.exports["inventory"].OpenInventory(inventoriesToOpen, openGround);
  },
  UseBodySlot: (slot) => {
    return Exports.Async["inventory"].UseBodySlot(slot);
  },
  SetBodySlotDisabled: (pSlot, pDisabled, pBlockId) => {
    Exports.Sync["inventory"].SetBodySlotDisabled(pSlot, pDisabled, pBlockId);
  },
  IsBodySlotDisabled: (pSlot, pBlockId) => {
    return Exports.Sync["inventory"].IsBodySlotDisabled(pSlot, pBlockId);
  }
};

// src/client/modules/classes/index.ts
var classes_exports = {};
__export(classes_exports, {
  Cache: () => client_Cache,
  Thread: () => client_Thread,
  Vector3: () => Vector3
});

// src/client/modules/classes/thread.ts
var client_Thread = class {
  constructor(pCallback, pDelay, pMode = "interval") {
    this.callback = pCallback;
    this.delay = pDelay;
    this.mode = pMode;
    this.scheduled = {};
    this.tick = 0;
    this.data = {};
    this.active = false;
    this.aborted = false;
    this.hooks = /* @__PURE__ */ new Map([
      ["active", []],
      ["preStop", []],
      ["preStart", []],
      ["afterStop", []],
      ["afterStart", []],
      ["stopAborted", []],
      ["startAborted", []]
    ]);
  }
  get isActive() {
    return this.active;
  }
  async start() {
    var _a, _b, _c, _d;
    if (this.active)
      return;
    this.aborted = false;
    this.scheduled = {};
    const preStart = (_a = this.hooks.get("preStart")) != null ? _a : [];
    try {
      for (const hook of preStart) {
        if (!this.aborted)
          await hook.call(this);
      }
    } catch (e) {
      this.aborted = true;
      console.log("Error while calling pre-start hook", e.message);
    }
    if (this.aborted) {
      try {
        const startAborted = (_b = this.hooks.get("startAborted")) != null ? _b : [];
        for (const hook of startAborted) {
          await hook.call(this);
        }
      } catch (e) {
        console.log("Error while calling start-aborted hook", e.message);
      }
      return;
    }
    this.active = true;
    const chain = (_c = this.hooks.get("active")) != null ? _c : [];
    switch (this.mode) {
      case "tick": {
        this.threadId = setTick(async () => {
          this.tick += 1;
          try {
            await this.callback.call(this);
            for (const hook of chain) {
              await hook.call(this);
            }
          } catch (e) {
            console.log("Error while calling active hook", e.message);
          }
          if (this.delay > 0) {
            await new Promise((resolve) => setTimeout(resolve, this.delay));
          }
        });
        break;
      }
      case "interval": {
        this.threadId = setInterval(async () => {
          this.tick += 1;
          try {
            await this.callback.call(this);
            for (const hook of chain) {
              await hook.call(this);
            }
          } catch (e) {
            console.log("Error while calling active hook", e.message);
          }
        }, this.delay);
        break;
      }
      case "timeout": {
        const f = () => {
          if (this.active) {
            this.threadId = setTimeout(async () => {
              this.tick += 1;
              try {
                await this.callback.call(this);
                for (const hook of chain) {
                  await hook.call(this);
                }
              } catch (e) {
                console.log("Error while calling active hook", e.message);
              }
              return f();
            }, this.delay);
          }
        };
        f();
        break;
      }
    }
    const afterStart = (_d = this.hooks.get("afterStart")) != null ? _d : [];
    try {
      for (const hook of afterStart) {
        await hook.call(this);
      }
    } catch (e) {
      console.log("Error while calling after-start hook", e.message);
    }
  }
  async stop() {
    var _a, _b, _c;
    if (!this.active)
      return;
    const preStop = (_a = this.hooks.get("preStop")) != null ? _a : [];
    try {
      for (const hook of preStop) {
        if (!this.aborted)
          await hook.call(this);
      }
    } catch (e) {
      this.aborted = true;
      console.log("Error while calling pre-stop hook", e.message);
    }
    this.active = false;
    switch (this.mode) {
      case "tick": {
        clearTick(this.threadId);
        break;
      }
      case "interval": {
        clearInterval(this.threadId);
        break;
      }
      case "timeout": {
        clearTimeout(this.threadId);
        break;
      }
    }
    if (this.aborted) {
      try {
        const stopAborted = (_b = this.hooks.get("stopAborted")) != null ? _b : [];
        for (const hook of stopAborted) {
          await hook.call(this);
        }
      } catch (e) {
        console.log("Error while calling stop-aborted hook", e.message);
      }
      return;
    }
    const afterStop = (_c = this.hooks.get("afterStop")) != null ? _c : [];
    try {
      for (const hook of afterStop) {
        await hook.call(this);
      }
    } catch (e) {
      console.log("Error while calling after-stop hook", e.message);
    }
  }
  abort() {
    this.aborted = true;
  }
  addHook(pHook, pCallback) {
    var _a;
    (_a = this.hooks.get(pHook)) == null ? void 0 : _a.push(pCallback);
  }
  setNextTick(pTickId, pTicks) {
    this.scheduled[pTickId] = this.tick + pTicks;
  }
  canTick(pTickId) {
    return this.scheduled[pTickId] === void 0 || this.tick >= this.scheduled[pTickId];
  }
};

// src/client/modules/game/index.ts
var game_exports = {};
__export(game_exports, {
  GetEntityStateValue: () => GetEntityStateValue,
  GetPlayerStateValue: () => GetPlayerStateValue,
  RegisterStatebagChangeHandler: () => RegisterStatebagChangeHandler,
  SetEntityStateValue: () => SetEntityStateValue,
  SetPlayerStateValue: () => SetPlayerStateValue
});

// src/shared/fivem/statebags.ts
var StatebagCache = new client_Cache(5e3);
function GetEntityStateBag(pEntity) {
  let statebag = StatebagCache.get(`ent-${pEntity}}`);
  if (statebag)
    return statebag;
  statebag = Entity(pEntity);
  StatebagCache.set(`ent-${pEntity}}`, statebag);
  return statebag;
}
function GetEntityStateValue(pEntity, pKey) {
  const statebag = GetEntityStateBag(pEntity);
  return statebag.state[pKey];
}
function SetEntityStateValue(pEntity, pKey, pValue, pReplicated = false) {
  const statebag = GetEntityStateBag(pEntity);
  statebag.state.set(pKey, pValue, pReplicated);
}
function GetPlayerStateBag(pServerId) {
  let statebag = StatebagCache.get(`ply-${pServerId}}`);
  if (statebag)
    return statebag;
  statebag = Player(pServerId);
  StatebagCache.set(`ply-${pServerId}}`, statebag);
  return statebag;
}
function GetPlayerStateValue(pServerId, pKey) {
  const statebag = GetPlayerStateBag(pServerId);
  return statebag.state[pKey];
}
function SetPlayerStateValue(pServerId, pKey, pValue, pReplicated = false) {
  const statebag = GetPlayerStateBag(pServerId);
  statebag.state.set(pKey, pValue, pReplicated);
}

// src/client/modules/game/statebags.ts
function RegisterStatebagChangeHandler(pBagKey, pOwned, pReplicated, pHandler) {
  return AddStateBagChangeHandler(pBagKey, null, async function(bagName, key, value, _, replicated) {
    if (pReplicated && !replicated)
      return;
    const isPlayer = bagName.startsWith("player");
    const netId = parseInt(bagName.substring(7));
    const handle = isPlayer ? GetPlayerFromStateBagName(bagName) : GetEntityFromStateBagName(bagName);
    if (!handle)
      return;
    const isOwned = isPlayer ? NetworkGetPlayerIndexFromPed(handle) === PlayerId() : NetworkGetEntityOwner(handle) === PlayerId();
    if (pOwned && !isOwned)
      return;
    pHandler(netId, handle, value);
  });
}

// src/client/modules/vehicles/index.ts
var vehicles_exports = {};
__export(vehicles_exports, {
  GetFuelLevel: () => GetFuelLevel,
  GetIdentifier: () => GetIdentifier,
  GetMetadata: () => GetMetadata,
  HasKey: () => HasKey,
  IsVinScratched: () => client_IsVinScratched,
  SwapSeat: () => SwapSeat,
  TurnOffEngine: () => client_TurnOffEngine,
  TurnOnEngine: () => client_TurnOnEngine
});
function client_TurnOnEngine(pVehicle) {
  Exports.Sync["np-vehicles"].TurnOnEngine(pVehicle);
}
function client_TurnOffEngine(pVehicle) {
  Exports.Sync["np-vehicles"].TurnOffEngine(pVehicle);
}
function HasKey(pVehicle) {
  return Exports.Sync["np-vehicles"].HasVehicleKey(pVehicle);
}
function GetMetadata(pVehicle, pKey) {
  const data = GetEntityStateValue(pVehicle, "data");
  return pKey ? data == null ? void 0 : data[pKey] : data;
}
function GetIdentifier(pVehicle) {
  return GetEntityStateValue(pVehicle, "vin");
}
function client_IsVinScratched(pVehicle) {
  return GetEntityStateValue(pVehicle, "vinScratched");
}
function SwapSeat(pSeat, pVehicle) {
  Exports.Sync["np-vehicles"].SwapVehicleSeat(pSeat, pVehicle);
}
function GetFuelLevel(pVehicle) {
  var _a;
  return (_a = GetMetadata(pVehicle, "fuel")) != null ? _a : 0;
}

// src/client/modules/streaming.ts
var client_LoadEntityModel = async (pModel) => {
  const modelHash = typeof pModel === "number" ? pModel : GetHashKey(pModel);
  if (HasModelLoaded(modelHash))
    return true;
  RequestModel(modelHash);
  const hasTimedOut = await client_Utils.waitForCondition(() => HasModelLoaded(modelHash), 3e3);
  return !hasTimedOut;
};
var LoadAnimationDictionary = async (pDict) => {
  if (HasAnimDictLoaded(pDict))
    return true;
  RequestAnimDict(pDict);
  const hasTimedOut = await client_Utils.waitForCondition(() => HasAnimDictLoaded(pDict), 3e3);
  return !hasTimedOut;
};
var LoadAnimationClipSet = async (pAnim) => {
  if (HasClipSetLoaded(pAnim))
    return true;
  RequestClipSet(pAnim);
  const hasTimedOut = await client_Utils.waitForCondition(() => HasClipSetLoaded(pAnim), 3e3);
  return !hasTimedOut;
};
var LoadTextureDictionary = async (pDict) => {
  if (HasStreamedTextureDictLoaded(pDict))
    return true;
  RequestStreamedTextureDict(pDict, true);
  const hasTimedOut = await client_Utils.waitForCondition(() => HasStreamedTextureDictLoaded(pDict), 3e3);
  return !hasTimedOut;
};
var LoadWeaponAsset = async (pWeaponAsset, p1, p2) => {
  const weaponHash = typeof pWeaponAsset === "number" ? pWeaponAsset : GetHashKey(pWeaponAsset);
  if (HasWeaponAssetLoaded(weaponHash))
    return true;
  RequestWeaponAsset(weaponHash, p1, p2);
  const hasTimedOut = await client_Utils.waitForCondition(() => HasWeaponAssetLoaded(weaponHash), 3e3);
  return !hasTimedOut;
};
var LoadNamedPtfxAsset = async (pFxName) => {
  if (HasNamedPtfxAssetLoaded(pFxName))
    return true;
  RequestNamedPtfxAsset(pFxName);
  const hasTimedOut = await client_Utils.waitForCondition(() => HasNamedPtfxAssetLoaded(pFxName), 3e3);
  return !hasTimedOut;
};
var client_Streaming = {
  loadModel: client_LoadEntityModel,
  loadTexture: LoadTextureDictionary,
  loadAnim: LoadAnimationDictionary,
  loadClipSet: LoadAnimationClipSet,
  loadWeaponAsset: LoadWeaponAsset,
  loadNamedPtfxAsset: LoadNamedPtfxAsset
};

// src/client/modules/hud/index.ts
var createBlip = (pType, ...args) => {
  switch (pType) {
    case "coord": {
      const [x, y, z] = args;
      return AddBlipForCoord(x, y, z);
    }
    case "area": {
      const [x, y, z, w, h] = args;
      return AddBlipForArea(x, y, z, w, h);
    }
    case "radius": {
      const [x, y, z, r] = args;
      return AddBlipForRadius(x, y, z, r);
    }
    case "pickup": {
      const [p] = args;
      return AddBlipForPickup(p);
    }
    case "entity": {
      const [e] = args;
      return AddBlipForEntity(e);
    }
    default: {
      console.error(new Error("Invalid Blip Type"));
      return 0;
    }
  }
};
var applyBlipSettings = (pBlip, pText, pSprite, pColor, pAlpha, pScale, pRoute, pShort) => {
  if (typeof pSprite === "number")
    SetBlipSprite(pBlip, pSprite);
  if (typeof pColor === "number")
    SetBlipColour(pBlip, pColor);
  if (typeof pAlpha === "number")
    SetBlipAlpha(pBlip, pAlpha);
  if (typeof pScale === "number")
    SetBlipScale(pBlip, pScale);
  if (typeof pRoute === "boolean")
    SetBlipRoute(pBlip, pRoute);
  if (typeof pShort === "boolean")
    SetBlipAsShortRange(pBlip, pShort);
  if (typeof pText === "string") {
    BeginTextCommandSetBlipName("STRING");
    AddTextComponentString(pText);
    EndTextCommandSetBlipName(pBlip);
  }
};
var client_Hud = {
  createBlip,
  applyBlipSettings
};

// src/client/modules/zones/index.ts
var ActiveZones = /* @__PURE__ */ new Set();
var ZoneHandlers = /* @__PURE__ */ new Map();
var NetworkedZones = /* @__PURE__ */ new Set();
var client_ResourceName = GetCurrentResourceName();
on("np-polyzone:enter", (zone, data) => {
  ActiveZones.add(zone);
  if (data == null ? void 0 : data.id)
    ActiveZones.add(`${zone}-${data.id}`);
  if (NetworkedZones.has(zone))
    client_Events.emitNet(`__sdk:zones:${zone}:enter`, data);
  const handlers = ZoneHandlers.get(`${zone}-enter`);
  if (handlers === void 0)
    return;
  for (const handler of handlers) {
    try {
      handler(data);
    } catch (e) {
      console.log(e);
    }
  }
});
on("np-polyzone:exit", (zone, data) => {
  ActiveZones.delete(zone);
  if (data == null ? void 0 : data.id)
    ActiveZones.delete(`${zone}-${data.id}`);
  if (NetworkedZones.has(zone))
    client_Events.emitNet(`__sdk:zones:${zone}:exit`, data);
  const handlers = ZoneHandlers.get(`${zone}-exit`);
  if (handlers === void 0)
    return;
  for (const handler of handlers) {
    try {
      handler(data);
    } catch (e) {
      console.log(e);
    }
  }
});
client_Events.onNet(`__sdk:${client_ResourceName}:zones:add`, (entry) => {
  registerZone(entry);
});
var HasActiveZone = (zone, id) => {
  return ActiveZones.has(id ? `${zone}-${id}` : zone);
};
var AddOnEnterHandler = (zone, cb) => {
  var _a;
  const id = `${zone}-enter`;
  const handlers = (_a = ZoneHandlers.get(id)) != null ? _a : [];
  if (!ZoneHandlers.has(id))
    ZoneHandlers.set(id, handlers);
  handlers.push(cb);
};
var AddOnExitHandler = (zone, cb) => {
  var _a;
  const id = `${zone}-exit`;
  const handlers = (_a = ZoneHandlers.get(id)) != null ? _a : [];
  if (!ZoneHandlers.has(id))
    ZoneHandlers.set(id, handlers);
  handlers.push(cb);
};
var AddPolyZone = (id, zone, vectors, options, data = {}) => {
  const opt = { ...options, data, id };
  opt.data["id"] = id;
  exports["np-polyzone"].AddPolyZone(zone, vectors, opt);
};
var AddBoxZone = (id, zone, vectors, length, width, options, data = {}) => {
  const opt = { ...options, data, id };
  opt.data["id"] = id;
  exports["np-polyzone"].AddBoxZone(zone, vectors, length, width, opt);
};
var AddBoxTarget = (id, zone, vectors, length, width, options, data = {}) => {
  const opt = { ...options, data, id };
  opt.data["id"] = id;
  exports["np-polytarget"].AddBoxZone(zone, vectors, length, width, opt);
};
var AddCircleZone = (id, zone, vectors, radius, options, data = {}) => {
  const opt = { ...options, data, id };
  opt.data["id"] = id;
  exports["np-polyzone"].AddCircleZone(zone, vectors, radius, opt);
};
var AddCircleTarget = (id, zone, vectors, radius, options, data = {}) => {
  const opt = { ...options, data, id };
  opt.data["id"] = id;
  exports["np-polytarget"].AddCircleZone(zone, vectors, radius, opt);
};
var AddEntityZone = (id, zone, entity, options, data = {}) => {
  const opt = { ...options, data };
  opt.data["id"] = id;
  exports["np-polyzone"].AddEntityZone(zone, entity, opt);
};
var registerZone = (entry) => {
  switch (entry.type) {
    case "circle": {
      const { type, id, zone, vectors, radius, data, ...options } = entry;
      AddCircleZone(id, zone, vectors, radius, options, data);
      NetworkedZones.add(zone);
      break;
    }
    case "box": {
      const { type, id, zone, vectors, length, width, data, ...options } = entry;
      AddBoxZone(id, zone, vectors, length, width, options, data);
      NetworkedZones.add(zone);
      break;
    }
    case "poly": {
      const { type, id, zone, vectors, data, ...options } = entry;
      AddPolyZone(id, zone, vectors, options, data);
      NetworkedZones.add(zone);
      break;
    }
  }
};
var RemoveZone = (zone, id) => {
  exports["np-polyzone"].RemoveZone(zone, id);
  ActiveZones.delete(`${zone}-${id}`);
  NetworkedZones.delete(zone);
};
on("onResourceStart", async (resource) => {
  if (client_ResourceName !== resource)
    return;
//   const zones = await client_RPC.execute(`__sdk:${client_ResourceName}:zones:fetch`);
//   Logger.debug(`[np-polyzone] [${client_ResourceName}] Loaded ${zones.length} zones`);
//   for (const entry of zones)
//     registerZone(entry);
});
var client_Zones = {
  isActive: HasActiveZone,
  onEnter: AddOnEnterHandler,
  onExit: AddOnExitHandler,
  addPolyZone: AddPolyZone,
  addBoxZone: AddBoxZone,
  addBoxTarget: AddBoxTarget,
  addCircleZone: AddCircleZone,
  addCircleTarget: AddCircleTarget,
  addEntityZone: AddEntityZone,
  removeZone: RemoveZone
};

// src/client/modules/interface.ts
var AddPeekEntryByModel = (pModels, pData, pOptions) => {
  globalThis.exports["np-interact"].AddPeekEntryByModel(pModels, pData, pOptions);
};
var AddPeekEntryByPolyTarget = (pEvent, pData, pOptions) => {
  globalThis.exports["np-interact"].AddPeekEntryByPolyTarget(pEvent, pData, pOptions);
};
var AddPeekEntryByFlag = (pFlags, pData, pOptions) => {
  globalThis.exports["np-interact"].AddPeekEntryByFlag(pFlags, pData, pOptions);
};
var AddPeekEntryByType = (pType, pData, pOptions) => {
  globalThis.exports["np-interact"].AddPeekEntryByEntityType(pType, pData, pOptions);
};
var AddInteraction = (id, coords, options, context) => {
  const data = {
    id,
    coords: [coords.x, coords.y, coords.z],
    options,
    context
  };
  globalThis.exports["interactions"].AddInteraction(data);
};
var AddInteractionByModel = (id, models, options, context) => {
  const data = {
    id,
    options,
    context
  };
  globalThis.exports["interactions"].AddInteractionByModel(models, data);
};
var AddPlayerInteraction = (id, options, context) => {
  const data = {
    id,
    options,
    context
  };
  data.context.isPlayer = true;
  globalThis.exports["interactions"].AddPedInteraction(data);
};
var AddPedInteraction = (id, options, context) => {
  const data = {
    id,
    options,
    context
  };
  globalThis.exports["interactions"].AddPedInteraction(data);
};
var AddVehicleInteraction = (id, options, context) => {
  const data = {
    id,
    options,
    context
  };
  globalThis.exports["interactions"].AddVehicleInteraction(data);
};
var RemoveInteraction = (id) => {
  globalThis.exports["interactions"].RemoveInteraction(id);
};
var RemoveVehicleInteraction = (id) => {
  globalThis.exports["interactions"].RemoveVehicleInteraction(id);
};
var RemovePedInteraction = (id) => {
  globalThis.exports["interactions"].RemovePedInteraction(id);
};
var client_Taskbar = (pLength, pName, pRunCheck = false, pDistCheck = null, pKeepWeapon = true, pVehicle = null) => {
  return new Promise((resolve) => {
    globalThis.exports["np-taskbar"].taskBar(
      pLength,
      pName,
      pRunCheck,
      pKeepWeapon,
      pVehicle,
      false,
      resolve,
      pDistCheck == null ? void 0 : pDistCheck.distance,
      pDistCheck == null ? void 0 : pDistCheck.entity
    );
  });
};
var client_DoPhoneConfirmation = (pTitle, pText, pIcon, pTimeout) => {
  return new Promise((resolve) => {
    globalThis.exports["np-phone"].DoPhoneConfirmation(pTitle, pText, pIcon, resolve, pTimeout);
  });
};
var DoPhoneNotification = (pTitle, pBody, pForced = true, pApp = "home-screen") => {
  globalThis.exports["np-ui"].SendUIMessage({
    source: "np-nui",
    app: "phone",
    data: {
      action: "notification",
      target_app: pApp,
      title: pTitle,
      body: pBody,
      show_even_if_app_active: pForced
    }
  });
};
var DrawTextJS = (x, y, text, color, scale, font, justification = 0, outline = true) => {
  SetTextColour(color[0], color[1], color[2], color[3]);
  if (outline) {
    SetTextOutline();
  }
  SetTextScale(0, scale);
  SetTextFont(font != null ? font : 0);
  SetTextJustification(justification);
  if (justification === 2)
    SetTextWrap(0, 0.575);
  SetTextEntry("STRING");
  AddTextComponentString(text != null ? text : "Dummy text");
  EndTextCommandDisplayText(x, y);
};
var DrawTextBox = (coords, distance, text, color, font = 4, outline = true, background) => {
  SetDrawOrigin(coords.x, coords.y, coords.z, 0);
  const scale = Math.max(MathUtils.getMapRange([0, 10], [0.4, 0.25], distance), 0.1);
  DrawTextJS(0, 0, text, color, scale, font, 0, outline);
  if (background) {
    DrawRect(
      2e-3,
      background.height / 2,
      background.width,
      background.height,
      background.color[0],
      background.color[1],
      background.color[2],
      background.color[3]
    );
  }
  ClearDrawOrigin();
};
var OpenCustomContact = (contactInfo, entity, dialogue, progression) => {
  globalThis.exports["contacts"].open(contactInfo, entity, dialogue, progression, true);
};
var client_Interface = {
  addPeekEntryByModel: AddPeekEntryByModel,
  addPeekEntryByTarget: AddPeekEntryByPolyTarget,
  addPeekEntryByFlag: AddPeekEntryByFlag,
  addPeekEntryByType: AddPeekEntryByType,
  addInteraction: AddInteraction,
  addInteractionByModel: AddInteractionByModel,
  addPlayerInteraction: AddPlayerInteraction,
  addPedInteraction: AddPedInteraction,
  addVehicleInteraction: AddVehicleInteraction,
  removeInteraction: RemoveInteraction,
  removePlayerInteraction: RemovePedInteraction,
  removePedInteraction: RemovePedInteraction,
  removeVehicleInteraction: RemoveVehicleInteraction,
  taskBar: client_Taskbar,
  phoneConfirmation: client_DoPhoneConfirmation,
  phoneNotification: DoPhoneNotification,
  drawText: DrawTextJS,
  drawText3D: DrawTextBox,
  customContact: OpenCustomContact
};

// src/client/modules/minigames.ts
var BankMinigame = async (options) => {
  return globalThis.exports["np-heists"].BankMinigame(options);
};
var DDRMinigame = async (options) => {
  return globalThis.exports["np-heists"].DDRMinigame(options);
};
var DirectionMinigame = async (options) => {
  return globalThis.exports["skillchecks"].DirectionMinigame(options);
};
var DrillingMinigame = async () => {
  return globalThis.exports["skillchecks"].DrillingMinigame();
};
var FlipMinigame = async (options) => {
  return globalThis.exports["skillchecks"].FlipMinigame(options);
};
var FloodMinigame = async (options) => {
  return globalThis.exports["skillchecks"].FloodMinigame(options);
};
var TaskBarMinigame = async (options) => {
  return globalThis.exports["skillchecks"].TaskBarMinigame(options.difficulty, options.gap, options.iterations, options.useReverse);
};
var MazeMinigame = async (options) => {
  return globalThis.exports["np-heists"].MazeMinigame(options);
};
var CrackSafe = async (options) => {
  return globalThis.exports["skillchecks"].CrackSafe(options.locks);
};
var SameMinigame = async (options) => {
  return globalThis.exports["skillchecks"].SameMinigame(options);
};
var ThermiteMinigame = async (options) => {
  return globalThis.exports["np-heists"].ThermiteMinigame(options);
};
var UntangleMinigame = async (options) => {
  return globalThis.exports["skillchecks"].UntangleMinigame(options);
};
var VarMinigame = async (options) => {
  return globalThis.exports["np-heists"].VarMinigame(options);
};
var WordsMinigame = async (options) => {
  return globalThis.exports["skillchecks"].WordsMinigame(options);
};
var AlphabetMinigame = async (options) => {
  return globalThis.exports["skillchecks"].AlphabetMinigame(options);
};
var LockpickMinigame = async (options) => {
  return globalThis.exports["skillchecks"].LockpickMinigame(options);
};
var Minigames = {
  BankMinigame,
  DDRMinigame,
  DirectionMinigame,
  DrillingMinigame,
  FlipMinigame,
  FloodMinigame,
  TaskBarMinigame,
  MazeMinigame,
  CrackSafe,
  SameMinigame,
  ThermiteMinigame,
  UntangleMinigame,
  VarMinigame,
  WordsMinigame,
  AlphabetMinigame,
  LockpickMinigame
};

// src/client/modules/permissions/index.ts
var Permissions = {
  async hasPermission(name, optionals = {}) {
    return await exports["permissions"].hasPermission(name, optionals);
  },
  async getUserPermissions() {
    return await exports["permissions"].getUserPermissions();
  },
  async getCharPermissions(characterId) {
    return await exports["permissions"].getCharPermissions();
  },
  async getTotalPermissions() {
    return await exports["permissions"].getTotalPermissions();
  }
};

// src/client/modules/index.ts

var _codename, _version, _resourceName, _projectName, _apiURL, _apiKey, _ready4, _onReadyCallbacks, _init3, init_fn3;
var Resource = class {
  constructor(resource) {
    __privateAdd(this, _init3);
    __privateAdd(this, _codename, void 0);
    __privateAdd(this, _version, void 0);
    __privateAdd(this, _resourceName, void 0);
    __privateAdd(this, _projectName, void 0);
    __privateAdd(this, _apiURL, void 0);
    __privateAdd(this, _apiKey, void 0);
    __privateAdd(this, _ready4, false);
    __privateAdd(this, _onReadyCallbacks, []);
    const info = ResourceInfoSchema.parse(resource);
    __privateSet(this, _codename, info.codename);
    __privateSet(this, _version, info.version);
    __privateSet(this, _resourceName, GetCurrentResourceName());
    __privateSet(this, _projectName, "np-vehicles");
    emit("__npx_core:handshake", info, __privateMethod(this, _init3, init_fn3).bind(this));
    NUI.register("__npx_core:handshake", async (info2) => {
      if (info2.codename !== __privateGet(this, _codename))
        return;
      const timedOut = await client_Utils.waitForCondition(() => __privateGet(this, _ready4), 1e4);
      if (timedOut)
        return;
      return { API_URL: __privateGet(this, _apiURL), API_KEY: __privateGet(this, _apiKey) };
    });
  }
  get codename() {
    return __privateGet(this, _codename);
  }
  get version() {
    return __privateGet(this, _version);
  }
  get isReady() {
    return __privateGet(this, _ready4);
  }
  onReady(callback) {
    if (__privateGet(this, _ready4))
      callback();
    else
      __privateGet(this, _onReadyCallbacks).push(callback);
  }
};
_codename = new WeakMap();
_version = new WeakMap();
_resourceName = new WeakMap();
_projectName = new WeakMap();
_apiURL = new WeakMap();
_apiKey = new WeakMap();
_ready4 = new WeakMap();
_onReadyCallbacks = new WeakMap();
_init3 = new WeakSet();
init_fn3 = async function(handshake) {
  __privateSet(this, _apiURL, handshake.API_URL);
  __privateSet(this, _apiKey, handshake.API_KEY);
  __privateSet(this, _ready4, true);
  for (const callback of __privateGet(this, _onReadyCallbacks))
    callback();
};

/*! Bundled license information:

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)
*/

;// CONCATENATED MODULE: ./src/client/controllers/state/garages.ts
function garages_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function garages_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function garages_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function garages_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                garages_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                garages_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function garages_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function garages_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function garages_sliced_to_array(arr, i) {
    return garages_array_with_holes(arr) || garages_iterable_to_array_limit(arr, i) || garages_unsupported_iterable_to_array(arr, i) || garages_non_iterable_rest();
}
function garages_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return garages_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return garages_array_like_to_array(o, minLen);
}
function garages_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}












var Garages = new Map();
var GarageVehicles = new Cache();
var CurrentGarage;
var PreviewVehicle;
var PreviewParkingSpot;
function InitGarages() {
    return _InitGarages.apply(this, arguments);
}
function _InitGarages() {
    _InitGarages = garages_async_to_generator(function() {
        var _result, result;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        Wait(3000)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        Procedures.execute("np:vehicles:getGarages")
                    ];
                case 2:
                    result = _state.sent();
                    (_result = result) === null || _result === void 0 ? void 0 : _result.forEach(function(garage) {
                        return AddGarage(garage.garage_id, garage);
                    });
                    console.log("[INIT] Garages Loaded:", Garages.size);
                    return [
                        2
                    ];
            }
        });
    });
    return _InitGarages.apply(this, arguments);
}
function AddGarage(pGarage, pInfo) {
    if (!Garages.has(pGarage)) {
        var location = pInfo.location;
        if (location.length) {
            PolyZone.addBoxZone(pGarage, location.vectors, location.length, location.width, location.options);
        } else {
            PolyZone.addCircleZone(pGarage, location.vectors, location.width, location.options);
        }
        if (pInfo.type === "public" && !location.hidden) {
            CreateBlip(pGarage, location.vectors, pInfo.name, {
                sprite: 357,
                color: 82,
                scale: 0.75,
                category: 10,
                short: true
            });
        }
    }
    Garages.set(pGarage, pInfo);
}
function RemoveGarage(pGarageId) {
    return Garages.delete(pGarageId);
}
function garages_GetGarage(pGarage) {
    return Garages.get(pGarage);
}
function GetAllGarages() {
    return Garages;
}
function EditParkingSpot(pGarageId, pSpotId, pChanges) {
    var garage = garages_GetGarage(pGarageId);
    if (garage) {
        var spot = garage.parkingSpots.find(function(spot) {
            return spot.id === pSpotId;
        });
        if (spot) {
            spot.type = pChanges.type;
            spot.size = pChanges.size;
            spot.coords = pChanges.coords;
            spot.distance = pChanges.distance;
            spot.heading = pChanges.heading;
        }
    }
}
function DeleteParkingSpot(pGarageId, pSpotId) {
    var garage = garages_GetGarage(pGarageId);
    if (garage) {
        var index = garage.parkingSpots.findIndex(function(spot) {
            return spot.id === pSpotId;
        });
        if (index !== -1) {
            garage.parkingSpots.splice(index, 1);
        }
    }
}
function ClearGarageCache(pGarage, pAll) {
    if (pAll) {
        GarageVehicles.clear();
    } else {
        GarageVehicles.delete(pGarage);
    }
}
function HasParkingSpace(pGarage, pVehicle) {
    return _HasParkingSpace.apply(this, arguments);
}
function _HasParkingSpace() {
    _HasParkingSpace = garages_async_to_generator(function(pGarage, pVehicle) {
        var garage, vin, owner, cid, vehicles, stored;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    garage = pGarage ? garages_GetGarage(pGarage) : garages_GetGarage(CurrentGarage);
                    vin = GetVehicleIdentifier(pVehicle);
                    owner = GetVehicleOwner(pVehicle);
                    cid = __webpack_require__.g.exports["isPed"].isPed("cid");
                    if (cid !== owner) return [
                        2,
                        true
                    ];
                    if (!(garage && vin)) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        GetPlayerVehicles(pGarage)
                    ];
                case 1:
                    vehicles = _state.sent();
                    stored = pVehicle ? vehicles.some(function(vehicle) {
                        return vehicle.vin === vin;
                    }) : false;
                    return [
                        2,
                        stored || vehicles.length + 1 <= garage.parkingLimit
                    ];
                case 2:
                    return [
                        2,
                        false
                    ];
            }
        });
    });
    return _HasParkingSpace.apply(this, arguments);
}
function HasGarageAccess(pGarage) {
    return _HasGarageAccess.apply(this, arguments);
}
function _HasGarageAccess() {
    _HasGarageAccess = garages_async_to_generator(function(pGarage) {
        var garage, result, _;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    garage = pGarage ? garages_GetGarage(pGarage) : garages_GetGarage(CurrentGarage);
                    if (!garage) return [
                        2,
                        false
                    ];
                    _ = garage.type;
                    switch(_){
                        case "housing":
                            return [
                                3,
                                1
                            ];
                        case "business":
                            return [
                                3,
                                3
                            ];
                        case "job":
                            return [
                                3,
                                5
                            ];
                        case "state":
                            return [
                                3,
                                7
                            ];
                        case "public":
                            return [
                                3,
                                8
                            ];
                    }
                    return [
                        3,
                        9
                    ];
                case 1:
                    return [
                        4,
                        new Promise(function(resolve) {
                            setTimeout(function() {
                                return resolve(false);
                            }, 5000);
                            emit("np:vehicles:hasHouseGarageAccess", garage.garage_id, resolve);
                        })
                    ];
                case 2:
                    // Maybe call an export instead?
                    result = _state.sent();
                    return [
                        3,
                        9
                    ];
                case 3:
                    // Maybe call an export instead?
                    if (garage.publicOverride) {
                        result = true;
                        return [
                            3,
                            9
                        ];
                    }
                    return [
                        4,
                        new Promise(function(resolve) {
                            setTimeout(function() {
                                return resolve(false);
                            }, 5000);
                            emit("np:vehicles:hasBusinessGarageAccess", garage.garage_id, resolve);
                        })
                    ];
                case 4:
                    result = _state.sent();
                    return [
                        3,
                        9
                    ];
                case 5:
                    return [
                        4,
                        new Promise(function(resolve) {
                            setTimeout(function() {
                                return resolve(false);
                            }, 5000);
                            emit("np:vehicles:hasJobGarageAccess", garage.garage_id, resolve);
                        })
                    ];
                case 6:
                    // Maybe call an export instead?
                    result = _state.sent();
                    return [
                        3,
                        9
                    ];
                case 7:
                    {
                        result = exports["jobmanager"].HasStateGarageAccess(garage.garage_id);
                        return [
                            3,
                            9
                        ];
                    }
                    _state.label = 8;
                case 8:
                    {
                        // TODO: parking lot business support
                        result = true;
                    }
                    _state.label = 9;
                case 9:
                    return [
                        2,
                        result
                    ];
            }
        });
    });
    return _HasGarageAccess.apply(this, arguments);
}
function GetEmptyParkingSpot(pGarage, pType, pSize) {
    var garage = garages_GetGarage(pGarage);
    if (garage) {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = garage.parkingSpots[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var spot = _step.value;
                var coords = spot.coords;
                if (spot.size >= pSize && !IsAnyVehicleNearPoint(coords.x, coords.y, coords.z, spot.distance)) {
                    return spot;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
}
function FindParkingSpot(pEntity, pEmpty, pRadius) {
    var parkingSpot, spotDistance;
    if (!CurrentGarage) {
        return [
            false,
            parkingSpot
        ];
    }
    var garage = garages_GetGarage(CurrentGarage);
    if (garage) {
        var _GetEntityCoords = garages_sliced_to_array(GetEntityCoords(pEntity, false), 3), x = _GetEntityCoords[0], y = _GetEntityCoords[1], z = _GetEntityCoords[2];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = garage.parkingSpots[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var spot = _step.value;
                var distance = GetDistanceBetweenCoords(spot.coords.x, spot.coords.y, spot.coords.z, x, y, z, true);
                var isEmpty = !IsAnyVehicleNearPoint(spot.coords.x, spot.coords.y, spot.coords.z, spot.distance);
                var radius = pRadius ? pRadius : spot.distance;
                if ((!pEmpty || isEmpty) && distance <= radius && (!parkingSpot || spotDistance > distance)) {
                    parkingSpot = spot;
                    spotDistance = distance;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    if (typeof parkingSpot !== "undefined") PreviewParkingSpot = parkingSpot;
    return [
        typeof parkingSpot !== "undefined",
        parkingSpot
    ];
}
__webpack_require__.g.exports("FindParkingSpot", FindParkingSpot);
function IsOnParkingSpot(pEntity) {
    var pEmpty = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false, pRadius = arguments.length > 2 ? arguments[2] : void 0;
    return FindParkingSpot(pEntity, pEmpty, pRadius)[0];
}
__webpack_require__.g.exports("IsOnParkingSpot", IsOnParkingSpot);
function ClearPreviewSpot() {
    PreviewParkingSpot = null;
}
function OpenGarageVehicleList(pNearby, pRadius) {
    return _OpenGarageVehicleList.apply(this, arguments);
}
function _OpenGarageVehicleList() {
    _OpenGarageVehicleList = garages_async_to_generator(function(pNearby, pRadius) {
        var pEmpty, hasAccess, _FindParkingSpot, found, info;
        var _arguments = arguments;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pEmpty = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : true;
                    return [
                        4,
                        HasGarageAccess(CurrentGarage)
                    ];
                case 1:
                    hasAccess = _state.sent();
                    if (!hasAccess) {
                        return [
                            2,
                            emit("DoLongHudText", "You don't have access to this parking spot.", 2)
                        ];
                    }
                    if (pNearby) {
                        _FindParkingSpot = garages_sliced_to_array(FindParkingSpot(PlayerPedId(), pEmpty, pRadius), 2), found = _FindParkingSpot[0], info = _FindParkingSpot[1];
                        if (found) {
                            PreviewParkingSpot = info;
                        }
                    }
                    ShowGarageMenu(CurrentGarage);
                    return [
                        2
                    ];
            }
        });
    });
    return _OpenGarageVehicleList.apply(this, arguments);
}
function SpawnGarageVehicle(pVIN, pGarage, pRaid) {
    return _SpawnGarageVehicle.apply(this, arguments);
}
function _SpawnGarageVehicle() {
    _SpawnGarageVehicle = garages_async_to_generator(function(pVIN, pGarage, pRaid) {
        var id, type, success;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    id = PreviewParkingSpot.id, type = PreviewParkingSpot.type;
                    return [
                        4,
                        RPC.execute("np:vehicles:spawnGarageVehicle", pVIN, pGarage, type, id, pRaid)
                    ];
                case 1:
                    success = _state.sent();
                    if (success) {
                        ClearGarageCache(pGarage);
                    } else emit("DoLongHudText", "Vehicle unavailable, Try again later.", 2);
                    DeleteEntity(PreviewVehicle);
                    PreviewParkingSpot = undefined;
                    return [
                        2,
                        success
                    ];
            }
        });
    });
    return _SpawnGarageVehicle.apply(this, arguments);
}
function StoreVehicleInGarage(pVehicle) {
    return _StoreVehicleInGarage.apply(this, arguments);
}
function _StoreVehicleInGarage() {
    _StoreVehicleInGarage = garages_async_to_generator(function(pVehicle) {
        var hasAccess, hasSpace, found, vin, job, isJobGarage, success;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        HasGarageAccess(CurrentGarage)
                    ];
                case 1:
                    hasAccess = _state.sent();
                    return [
                        4,
                        HasParkingSpace(CurrentGarage, pVehicle)
                    ];
                case 2:
                    hasSpace = _state.sent();
                    if (!hasAccess) {
                        return [
                            2,
                            emit("DoLongHudText", "You don't have access to this parking spot.", 2)
                        ];
                    } else if (!hasSpace) {
                        return [
                            2,
                            emit("DoLongHudText", "You ran out of parking space.", 2)
                        ];
                    }
                    found = IsOnParkingSpot(pVehicle);
                    if (GetVehicleNumberOfPassengers(pVehicle) > 0 || !IsVehicleSeatFree(pVehicle, -1)) {
                        return [
                            2,
                            emit("DoLongHudText", "The vehicle is not empty!", 2)
                        ];
                    }
                    if (!found) return [
                        2,
                        emit("DoLongHudText", "We cannot park here!", 2)
                    ];
                    vin = GetVehicleIdentifier(pVehicle);
                    job = GetVehicleMetadata(pVehicle, "job");
                    if (job) {
                        isJobGarage = Exports.Sync["np-jobs"].IsJobGarage(job, CurrentGarage);
                        if (!isJobGarage) {
                            return [
                                2,
                                emit("DoLongHudText", "You don't have access to this parking spot.", 2)
                            ];
                        }
                    }
                    if (!vin) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        RPC.execute("np:vehicles:storeVehicle", vin, CurrentGarage)
                    ];
                case 3:
                    success = _state.sent();
                    if (success) {
                        ClearGarageCache(CurrentGarage);
                    } else {
                        DoLongHudText("Cannot park the vehicle here.", 2);
                    }
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return _StoreVehicleInGarage.apply(this, arguments);
}
function HasVehicleData(pVIN, pGarage) {
    var _GarageVehicles_get;
    return (_GarageVehicles_get = GarageVehicles.get(pGarage)) === null || _GarageVehicles_get === void 0 ? void 0 : _GarageVehicles_get.some(function(vehicle) {
        return vehicle.vin === pVIN;
    });
}
function GetVehicleData(pVIN, pGarage) {
    var _garage;
    var garage = GarageVehicles.get(pGarage);
    return (_garage = garage) === null || _garage === void 0 ? void 0 : _garage.find(function(vehicle) {
        return vehicle.vin === pVIN;
    });
}
function GetPlayerVehicles(pGarage) {
    return _GetPlayerVehicles.apply(this, arguments);
}
function _GetPlayerVehicles() {
    _GetPlayerVehicles = garages_async_to_generator(function(pGarage) {
        var vehicles;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (GarageVehicles.has(pGarage) && !GarageVehicles.isExpired(pGarage)) return [
                        2,
                        GarageVehicles.get(pGarage)
                    ];
                    return [
                        4,
                        Procedures.execute("np:vehicles:getVehicles", pGarage)
                    ];
                case 1:
                    vehicles = _state.sent();
                    GarageVehicles.set(pGarage, vehicles, 1000 * 120);
                    return [
                        2,
                        vehicles
                    ];
            }
        });
    });
    return _GetPlayerVehicles.apply(this, arguments);
}
function SpawnVehiclePreview(pVIN, pGarage, pData) {
    return _SpawnVehiclePreview.apply(this, arguments);
}
function _SpawnVehiclePreview() {
    _SpawnVehiclePreview = garages_async_to_generator(function(pVIN, pGarage, pData) {
        var vehicleData, modelHash, coords, heading, vehicle;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vehicleData = pData !== null && pData !== void 0 ? pData : GetVehicleData(pVIN, pGarage);
                    if (!PreviewParkingSpot || PreviewParkingSpot.type !== vehicleData.type || PreviewParkingSpot.size < vehicleData.size) {
                        PreviewParkingSpot = GetEmptyParkingSpot(pGarage, vehicleData.type, vehicleData.size);
                    }
                    if (!(vehicleData && PreviewParkingSpot)) return [
                        3,
                        3
                    ];
                    modelHash = GetHashKey(vehicleData.model);
                    coords = PreviewParkingSpot.coords, heading = PreviewParkingSpot.heading;
                    return [
                        4,
                        tools_LoadEntityModel(modelHash)
                    ];
                case 1:
                    _state.sent();
                    vehicle = CreateVehicle(modelHash, coords.x, coords.y, coords.z - 50.0, heading, false, false);
                    FreezeEntityPosition(vehicle, true);
                    SetEntityCollision(vehicle, false, false);
                    SetVehicleDoorsLocked(vehicle, 3);
                    SetVehicleNumberPlateText(vehicle, vehicleData.plate);
                    RestoreVehicleDamage(vehicle, vehicleData.damage);
                    SetVehicleAppearance(vehicle, vehicleData.appearance);
                    SetMods(vehicle, vehicleData.mods);
                    return [
                        4,
                        Wait(100)
                    ];
                case 2:
                    _state.sent();
                    if (DoesEntityExist(PreviewVehicle)) DeleteEntity(PreviewVehicle);
                    SetEntityCoords(vehicle, coords.x, coords.y, coords.z, false, false, false, false);
                    PreviewVehicle = vehicle;
                    SetModelAsNoLongerNeeded(modelHash);
                    _state.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _SpawnVehiclePreview.apply(this, arguments);
}
var timeout;
var showNotif = false;
var notifShown = false;
on("np-polyzone:enter", function() {
    var _ref = garages_async_to_generator(function(pZone, pData) {
        var hasAccess;
        return garages_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!Garages.has(pZone)) return [
                        2
                    ];
                    CurrentGarage = pZone;
                    showNotif = true;
                    return [
                        4,
                        Wait(1000)
                    ];
                case 1:
                    _state.sent();
                    if (!showNotif) return [
                        2
                    ];
                    return [
                        4,
                        HasGarageAccess(CurrentGarage)
                    ];
                case 2:
                    hasAccess = _state.sent();
                    if (!hasAccess) return [
                        2
                    ];
                    __webpack_require__.g.exports["np-ui"].showInteraction("Parking");
                    notifShown = true;
                    return [
                        4,
                        Wait(5000)
                    ];
                case 3:
                    _state.sent();
                    if (!notifShown) return [
                        2
                    ];
                    notifShown = false;
                    __webpack_require__.g.exports["np-ui"].hideInteraction();
                    return [
                        2
                    ];
            }
        });
    });
    return function(pZone, pData) {
        return _ref.apply(this, arguments);
    };
}());
on("np-polyzone:exit", function(pZone) {
    if (CurrentGarage !== pZone) return;
    CurrentGarage = null;
    showNotif = false;
    if (!notifShown) return;
    notifShown = false;
    __webpack_require__.g.exports["np-ui"].hideInteraction();
});
on("onResourceStop", function(resource) {
    if (resource === GetCurrentResourceName()) {
        DeleteEntity(PreviewVehicle);
    }
});
__webpack_require__.g.exports("GetCurrentGarage", function() {
    return CurrentGarage;
});

;// CONCATENATED MODULE: ./src/client/controllers/events/stateJobEvents.ts
function stateJobEvents_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function stateJobEvents_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                stateJobEvents_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                stateJobEvents_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function stateJobEvents_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var StateJob;
var isMedic = true;
var isPolice = false;
var isDoc = false;
var isDoctor = false;
var isNews = false;
var isJudge = false;
function InitStateJobs() {
    return _InitStateJobs.apply(this, arguments);
}
function _InitStateJobs() {
    _InitStateJobs = stateJobEvents_async_to_generator(function() {
        return stateJobEvents_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitStateJobs.apply(this, arguments);
}
onNet("jobmanager:playerBecameJob", function(job) {
    if (isMedic && job !== "ems") {
        isMedic = false;
    } else if (isPolice && job !== "police") {
        isPolice = false;
    } else if (isDoc && job !== "doc") {
        isDoc = false;
    } else if (isDoctor && job !== "doctor") {
        isDoctor = false;
    } else if (isNews && job !== "news") {
        isNews = false;
    }
    if (job === "police") {
        isPolice = true;
    } else if (job === "ems") {
        isMedic = true;
    } else if (job === "news") {
        isNews = true;
    } else if (job === "doctor") {
        isDoctor = true;
    } else if (job === "doc") {
        isDoc = true;
    }
    StateJob = job;
});
onNet("isJudge", function() {
    isJudge = true;
});
onNet("isJudgeOff", function() {
    isJudge = false;
});
function IsLawEnforcer() {
    return isPolice || isDoctor;
}
function IsMedicalProvider() {
    return isDoctor || isMedic;
}

;// CONCATENATED MODULE: ./src/client/controllers/ui.ts
function ui_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function ui_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function ui_array_without_holes(arr) {
    if (Array.isArray(arr)) return ui_array_like_to_array(arr);
}
function ui_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function ui_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                ui_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                ui_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function ui_iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function ui_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function ui_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ui_non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ui_sliced_to_array(arr, i) {
    return ui_array_with_holes(arr) || ui_iterable_to_array_limit(arr, i) || ui_unsupported_iterable_to_array(arr, i) || ui_non_iterable_rest();
}
function ui_to_consumable_array(arr) {
    return ui_array_without_holes(arr) || ui_iterable_to_array(arr) || ui_unsupported_iterable_to_array(arr) || ui_non_iterable_spread();
}
function ui_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return ui_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ui_array_like_to_array(o, minLen);
}
function ui_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}









var IsMenuOpen = false;
function InitUI() {}
var closeUI = function() {
    if (IsMenuOpen) {
        IsMenuOpen = false;
        ClearPreviewSpot();
        DeleteEntity(PreviewVehicle);
        NUI.execute("np-vehicles:garages:close");
        SetNuiFocus(false, false);
    }
};
NUI.register("np-vehicles:garages:close", function() {
    var _ref = ui_async_to_generator(function(data) {
        return ui_ts_generator(this, function(_state) {
            if (IsMenuOpen) {
                IsMenuOpen = false;
                ClearPreviewSpot();
                DeleteEntity(PreviewVehicle);
                NUI.execute("np-vehicles:garages:close");
                SetNuiFocus(false, false);
            }
            return [
                2
            ];
        });
    });
    return function(data) {
        return _ref.apply(this, arguments);
    };
}());
NUI.register("np:vehicles:vehiclePreview", function() {
    var _ref = ui_async_to_generator(function(data) {
        var key;
        return ui_ts_generator(this, function(_state) {
            key = data.key;
            if (key.state === "stored") {
                SpawnVehiclePreview(key.vin, key.garage, key.data);
            }
            return [
                2
            ];
        });
    });
    return function(data) {
        return _ref.apply(this, arguments);
    };
}());
var attemptSpawn = false;
NUI.register("np:vehicles:spawnVehicle", function() {
    var _ref = ui_async_to_generator(function(param) {
        var key;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    key = param.key;
                    if (attemptSpawn) return [
                        2,
                        emit("DoLongHudText", "Vehicle is already being spawned.", 3)
                    ];
                    attemptSpawn = true;
                    if (!(key.state === "stored" && PreviewParkingSpot)) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        SpawnGarageVehicle(key.vin, key.garage, key.raid)
                    ];
                case 1:
                    _state.sent();
                    closeUI();
                    return [
                        3,
                        3
                    ];
                case 2:
                    emit("DoLongHudText", "Vehicle unavailable.", 3);
                    _state.label = 3;
                case 3:
                    attemptSpawn = false;
                    return [
                        2
                    ];
            }
        });
    });
    return function(_) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("vehicle:refuel:handler", function() {
    var _ref = ui_async_to_generator(function(data, cb) {
        var _data_key, pEntity, pCost, isJerryCan, isHeli, _ref, cash;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _data_key = data.key, pEntity = _data_key.pEntity, pCost = _data_key.pCost, isJerryCan = _data_key.isJerryCan, isHeli = _data_key.isHeli;
                    if (!pEntity) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        RPC.execute("GetCurrentCash")
                    ];
                case 1:
                    _ref = ui_sliced_to_array.apply(void 0, [
                        _state.sent(),
                        1
                    ]), cash = _ref[0];
                    if (Math.floor(pCost) === 0) {
                        emit("DoLongHudText", "You're already topped up.");
                    } else if (cash < pCost) {
                        emit("DoLongHudText", "You can't afford it, you're missing $".concat(pCost - cash), 1, 12000, {
                            i18n: [
                                "You can't afford it, you're missing"
                            ]
                        });
                    } else if (isJerryCan) {
                        RefillJerryCan(pEntity);
                    } else {
                        RefuelVehicle(pEntity, pCost, isHeli, false);
                    }
                    _state.label = 2;
                case 2:
                    cb({
                        data: {},
                        meta: {
                            ok: true,
                            message: ""
                        }
                    });
                    return [
                        2
                    ];
            }
        });
    });
    return function(data, cb) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np:vehicles:sale:accepted", function() {
    var _ref = ui_async_to_generator(function(data, cb) {
        var _saleData, saleData, vehicleIdentifier, transferredOwnership;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    saleData = data._data;
                    vehicleIdentifier = GetCurrentVehicleIdentifier();
                    if (vehicleIdentifier === undefined || vehicleIdentifier !== ((_saleData = saleData) === null || _saleData === void 0 ? void 0 : _saleData.vin)) {
                        return [
                            2,
                            cb({
                                data: {},
                                meta: {
                                    ok: false,
                                    message: "Couldn't find vehicle identifier"
                                }
                            })
                        ];
                    }
                    return [
                        4,
                        RPC.execute("np:vehicles:transferOwnershipVehicle", saleData.vin, saleData.sellerCID, data.character.id, data.price)
                    ];
                case 1:
                    transferredOwnership = _state.sent();
                    if (transferredOwnership) {
                        cb({
                            data: {},
                            meta: {
                                ok: true,
                                message: ""
                            }
                        });
                    } else {
                        cb({
                            data: {},
                            meta: {
                                ok: false,
                                message: "Couldn't transfer ownership"
                            }
                        });
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return function(data, cb) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np:vehicles:phoneSale:accepted", function() {
    var _ref = ui_async_to_generator(function(data, cb) {
        var _saleData, saleData, vehicleIdentifier, transferredOwnership;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    saleData = data._data;
                    vehicleIdentifier = (_saleData = saleData) === null || _saleData === void 0 ? void 0 : _saleData.vin;
                    if (vehicleIdentifier === undefined) {
                        return [
                            2,
                            cb({
                                data: {},
                                meta: {
                                    ok: false,
                                    message: "Couldn't find vehicle identifier"
                                }
                            })
                        ];
                    }
                    return [
                        4,
                        RPC.execute("np:vehicles:transferOwnershipVehicle", saleData.vin, saleData.sellerCID, data.character.id, data.price)
                    ];
                case 1:
                    transferredOwnership = _state.sent();
                    if (transferredOwnership) {
                        cb({
                            data: {},
                            meta: {
                                ok: true,
                                message: ""
                            }
                        });
                    } else {
                        cb({
                            data: {},
                            meta: {
                                ok: false,
                                message: "Couldn't transfer ownership"
                            }
                        });
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return function(data, cb) {
        return _ref.apply(this, arguments);
    };
}());
// np:vehicles:fetchParkingLogs
NUI.register("np-vehicles:fetchParkingLogs", function() {
    var _ref = ui_async_to_generator(function(data) {
        var key, logs, menu;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    key = data.key;
                    if (DoesEntityExist(PreviewVehicle)) {
                        ClearPreviewSpot();
                        DeleteEntity(PreviewVehicle);
                    }
                    return [
                        4,
                        RPC.execute("np:vehicles:fetchParkingLogs", key.vin, key.garage)
                    ];
                case 1:
                    logs = _state.sent();
                    menu = logs.map(function(log) {
                        return {
                            title: " State ID: ".concat(log.cid, " | Action: ").concat(log.action, " | Date: ").concat(new Date(log.timestamp).toLocaleString("en-US")),
                            description: "Engine: ".concat(log.data.engine, " | Body: ").concat(log.data.body, " | Fuel: ").concat(log.data.fuel)
                        };
                    });
                    return [
                        2,
                        menu
                    ];
            }
        });
    });
    return function(data) {
        return _ref.apply(this, arguments);
    };
}());
NUI.register("np-vehicles:retrieveVehicle", function() {
    var _ref = ui_async_to_generator(function(data) {
        var key, _ref, success, message;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    key = data.key;
                    return [
                        4,
                        RPC.execute("np:vehicles:attemptRetrieveVehicle", key.vin, key.garage)
                    ];
                case 1:
                    _ref = ui_sliced_to_array.apply(void 0, [
                        _state.sent(),
                        2
                    ]), success = _ref[0], message = _ref[1];
                    if (success) {
                        ClearGarageCache(key.garage);
                    }
                    return [
                        2,
                        emit("DoLongHudText", message, success ? 1 : 2)
                    ];
            }
        });
    });
    return function(data) {
        return _ref.apply(this, arguments);
    };
}());
NUI.register("np-vehicles:toggleVehicleLockdown", function() {
    var _ref = ui_async_to_generator(function(data) {
        var key;
        return ui_ts_generator(this, function(_state) {
            key = data.key;
            if (DoesEntityExist(PreviewVehicle)) {
                ClearPreviewSpot();
                DeleteEntity(PreviewVehicle);
            }
            RPC.execute("np:vehicles:toggleVehicleLockdown", key.vin);
            return [
                2
            ];
        });
    });
    return function(data) {
        return _ref.apply(this, arguments);
    };
}());
NUI.register("np-vehicles:lockdownPlayerGarage", function() {
    var _ref = ui_async_to_generator(function(data) {
        var key;
        return ui_ts_generator(this, function(_state) {
            key = data.key;
            if (DoesEntityExist(PreviewVehicle)) {
                ClearPreviewSpot();
                DeleteEntity(PreviewVehicle);
            }
            RPC.execute("np:vehicles:toggleGarageLockdown", key.characterId, key.garage, key.lock);
            return [
                2
            ];
        });
    });
    return function(data) {
        return _ref.apply(this, arguments);
    };
}());
NUI.register("np-vehicles:setDisplayVehicle", function() {
    var _ref = ui_async_to_generator(function(data) {
        var payload, garage, spot, vin, _payload_remove, remove;
        return ui_ts_generator(this, function(_state) {
            payload = data.key;
            garage = payload.garage;
            spot = PreviewParkingSpot.id;
            vin = payload.vin;
            remove = (_payload_remove = payload.remove) !== null && _payload_remove !== void 0 ? _payload_remove : false;
            if (DoesEntityExist(PreviewVehicle)) {
                ClearPreviewSpot();
                DeleteEntity(PreviewVehicle);
            }
            if (remove) {
                RPC.execute("np-vehicles:garages:removeDisplayVehicleVIN", garage, vin);
                return [
                    2
                ];
            }
            RPC.execute("np-vehicles:garages:setDisplayVehicle", garage, spot, vin);
            return [
                2
            ];
        });
    });
    return function(data) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np-vehicle:plateLookup", function() {
    var _ref = ui_async_to_generator(function(data, cb) {
        var _data_serviceData, _data, _data_serviceData1, _data1, _success, _message, licensePlate, _data_serviceData_amount, amount, _ref, success, _$data, _data2, _data3, _data4, _data_first_name, _data_last_name, _data_phone_number;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    _success = true;
                    _message = "Failed successfully";
                    licensePlate = (_data = data) === null || _data === void 0 ? void 0 : (_data_serviceData = _data.serviceData) === null || _data_serviceData === void 0 ? void 0 : _data_serviceData.licensePlate;
                    amount = (_data_serviceData_amount = (_data1 = data) === null || _data1 === void 0 ? void 0 : (_data_serviceData1 = _data1.serviceData) === null || _data_serviceData1 === void 0 ? void 0 : _data_serviceData1.amount) !== null && _data_serviceData_amount !== void 0 ? _data_serviceData_amount : 30;
                    if (!licensePlate) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        RPC.execute("np:vehicles:plateLookup", amount, licensePlate.trim().toUpperCase())
                    ];
                case 1:
                    _ref = ui_sliced_to_array.apply(void 0, [
                        _state.sent(),
                        2
                    ]), success = _ref[0], _$data = _ref[1];
                    if (success) {
                        ;
                        ;
                        emit("phone:emailReceived", "BozoWeb", "License Plate Lookup", "\n                License Plate: ".concat(licensePlate !== null && licensePlate !== void 0 ? licensePlate : "UNKNOWN", "\n                Name: ").concat((_data_first_name = (_data2 = _$data) === null || _data2 === void 0 ? void 0 : _data2.first_name) !== null && _data_first_name !== void 0 ? _data_first_name : "UNKNOWN", " ").concat((_data_last_name = (_data3 = _$data) === null || _data3 === void 0 ? void 0 : _data3.last_name) !== null && _data_last_name !== void 0 ? _data_last_name : "UNKNOWN", "\n                Phone Number: ").concat((_data_phone_number = (_data4 = _$data) === null || _data4 === void 0 ? void 0 : _data4.phone_number) !== null && _data_phone_number !== void 0 ? _data_phone_number : "UNKNOWN", "\n                "), {
                            i18n: [
                                "License Plate Lookup",
                                "License Plate",
                                "Name",
                                "Phone Number",
                                "UNKNOWN"
                            ]
                        });
                    } else {
                        _success = false;
                        _message = "Failed to lookup license plate " + _$data;
                    }
                    return [
                        3,
                        3
                    ];
                case 2:
                    _success = false;
                    _message = "You did not supply a license plate?";
                    _state.label = 3;
                case 3:
                    cb({
                        data: {},
                        meta: {
                            ok: _success,
                            message: _message
                        }
                    });
                    return [
                        2
                    ];
            }
        });
    });
    return function(data, cb) {
        return _ref.apply(this, arguments);
    };
}());
function GetVehicleStatus(pDamage) {
    var _pDamage, _pDamage1;
    return "Engine: ".concat(Math.floor(((_pDamage = pDamage) === null || _pDamage === void 0 ? void 0 : _pDamage.engine) / 1000 * 100), "% | Body: ").concat(Math.floor(((_pDamage1 = pDamage) === null || _pDamage1 === void 0 ? void 0 : _pDamage1.body) / 1000 * 100), "%");
}
function BuildVehicleList(pVehicles, pCategory) {
    var pShared = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, pRaid = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false, pDisplay = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
    var policeVehicles = config_GetModuleConfig("np-police").policeVehicles;
    var cid = __webpack_require__.g.exports["isPed"].isPed("cid");
    return pVehicles.reduce(function(list, vehicle) {
        var _vehicle, _vehicle1;
        if (vehicle.type !== pCategory) return list;
        var entry = {
            title: vehicle.name ? vehicle.name : GetLabelText(GetDisplayNameFromVehicleModel(vehicle.model)),
            description: "",
            plate: vehicle.plate,
            key: {
                state: vehicle.state,
                garage: vehicle.garage,
                vin: vehicle.vin,
                data: !HasVehicleData(vehicle.vin, vehicle.garage) ? vehicle : undefined,
                owned: vehicle.cid === cid
            },
            action: "np:vehicles:vehiclePreview",
            children: [
                {
                    title: "Take Out Vehicle",
                    description: "",
                    action: "np:vehicles:spawnVehicle",
                    disabled: pRaid ? vehicle.state !== "stored" && vehicle.state !== "locked" : vehicle.state !== "stored",
                    key: {
                        state: vehicle.state,
                        garage: vehicle.garage,
                        vin: vehicle.vin,
                        raid: pRaid
                    },
                    children: []
                },
                {
                    title: "Vehicle Status",
                    description: "".concat(Capitalize((_vehicle = vehicle) === null || _vehicle === void 0 ? void 0 : _vehicle.state), " | ").concat(GetVehicleStatus((_vehicle1 = vehicle) === null || _vehicle1 === void 0 ? void 0 : _vehicle1.damage)),
                    children: []
                }
            ]
        };
        if (pDisplay) {
            entry.children.push({
                title: "Set as Display Vehicle",
                description: "",
                children: [],
                action: "np-vehicles:setDisplayVehicle",
                disabled: vehicle.state !== "stored",
                key: {
                    vin: vehicle.vin,
                    garage: vehicle.garage,
                    state: vehicle.state
                }
            });
            entry.children.push({
                title: "Remove Display Vehicle",
                description: "",
                children: [],
                action: "np-vehicles:setDisplayVehicle",
                disabled: vehicle.state !== "showcase",
                key: {
                    vin: vehicle.vin,
                    garage: vehicle.garage,
                    state: vehicle.state,
                    remove: true
                }
            });
        }
        if (pRaid) {
            entry.children.push({
                title: "Toggle Vehicle Lockdown",
                description: "",
                children: [],
                action: "np-vehicles:toggleVehicleLockdown",
                disabled: vehicle.state !== "stored" && vehicle.state !== "locked",
                key: {
                    vin: vehicle.vin,
                    garage: vehicle.garage,
                    state: vehicle.state
                }
            });
        }
        if (policeVehicles && policeVehicles[vehicle.model] && isPolice && [
            "pd_shared",
            "pd_shared_bike"
        ].includes(vehicle.garage)) {
            entry.children.push({
                title: "Retrieve Vehicle",
                description: "",
                children: [],
                action: "np-vehicles:retrieveVehicle",
                disabled: vehicle.state === "stored",
                key: {
                    vin: vehicle.vin,
                    garage: vehicle.garage
                }
            });
        }
        if (pShared || pRaid) {
            entry.children.push({
                title: "Vehicle Parking Log",
                description: "",
                children: [],
                action: "np-vehicles:fetchParkingLogs",
                key: {
                    vin: vehicle.vin,
                    garage: vehicle.garage,
                    state: vehicle.state
                }
            });
        }
        list.push(entry);
        return list;
    }, []);
}
function GetGarageMenuEntries(pVehicles, pTypes) {
    var pShared = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, pRaid = arguments.length > 3 ? arguments[3] : void 0, pDisplay = arguments.length > 4 ? arguments[4] : void 0;
    var list;
    var _pTypes = ui_sliced_to_array(pTypes, 1), type = _pTypes[0];
    list = BuildVehicleList(pVehicles, type, pShared, pRaid, pDisplay);
    return list;
}
function ShowGarageMenu(pGarage) {
    return _ShowGarageMenu.apply(this, arguments);
}
function _ShowGarageMenu() {
    _ShowGarageMenu = ui_async_to_generator(function(pGarage) {
        var _PreviewParkingSpot, _PreviewParkingSpot1, garage, listType, displaySpot, entries, vehicles;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    garage = garages_GetGarage(pGarage);
                    listType = ((_PreviewParkingSpot = PreviewParkingSpot) === null || _PreviewParkingSpot === void 0 ? void 0 : _PreviewParkingSpot.type) ? [
                        PreviewParkingSpot.type
                    ] : garage.vehicleTypes;
                    displaySpot = ((_PreviewParkingSpot1 = PreviewParkingSpot) === null || _PreviewParkingSpot1 === void 0 ? void 0 : _PreviewParkingSpot1.display) === true;
                    entries = [];
                    return [
                        4,
                        GetPlayerVehicles(pGarage)
                    ];
                case 1:
                    vehicles = _state.sent();
                    console.log("vehicles, listType, garage.shared, false, displaySpot", vehicles, listType, garage.shared, false, displaySpot)
                    entries = GetGarageMenuEntries(vehicles, listType, garage.shared, false, displaySpot);
                    if (entries.length === 0) {
                        return [
                            2,
                            emit("DoLongHudText", "You don't have any vehicles parked here.", 2)
                        ];
                    }
                    IsMenuOpen = true;
                    NUI.execute("np-vehicles:garages:data", entries);
                    SetNuiFocus(true, true);
                    return [
                        2
                    ];
            }
        });
    });
    return _ShowGarageMenu.apply(this, arguments);
}
function OpenPlayerGarage(pCharacterId, pGarage, pSpot) {
    return _OpenPlayerGarage.apply(this, arguments);
}
function _OpenPlayerGarage() {
    _OpenPlayerGarage = ui_async_to_generator(function(pCharacterId, pGarage, pSpot) {
        var pRaid, garage, vehicles, isGarageShared, garageVehicles, listType, entries;
        var _arguments = arguments;
        return ui_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pRaid = _arguments.length > 3 && _arguments[3] !== void 0 ? _arguments[3] : false;
                    garage = garages_GetGarage(pGarage);
                    if (!garage) return [
                        2,
                        emit("DoLongHudText", "Not in a garage", 2)
                    ];
                    vehicles = [];
                    return [
                        4,
                        RPC.execute("np:vehicles:isGarageShared", pGarage)
                    ];
                case 1:
                    isGarageShared = _state.sent();
                    if (!(typeof isGarageShared === "boolean" && isGarageShared === true)) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        Procedures.execute("np:vehicles:getVehicles", pGarage)
                    ];
                case 2:
                    vehicles = _state.sent();
                    return [
                        3,
                        5
                    ];
                case 3:
                    return [
                        4,
                        RPC.execute("np:vehicles:getPlayerVehicles", pCharacterId)
                    ];
                case 4:
                    vehicles = _state.sent();
                    _state.label = 5;
                case 5:
                    garageVehicles = vehicles.filter(function(vehicle) {
                        return vehicle.garage === pGarage;
                    });
                    if (garageVehicles.length === 0) emit("DoLongHudText", "No vehicles found in this Garage");
                    listType = pSpot.type ? [
                        pSpot.type
                    ] : garage.vehicleTypes;
                    entries = GetGarageMenuEntries(garageVehicles, listType, garage.shared, pRaid);
                    if (pRaid) {
                        entries.push({
                            title: "Lockdown Player Garage",
                            description: "Lock player vehicles found in this garage.",
                            children: [
                                {
                                    title: "Lock Vehicles",
                                    key: {
                                        characterId: pCharacterId,
                                        garage: garage.garage_id,
                                        lock: true
                                    },
                                    action: "np-vehicles:lockdownPlayerGarage"
                                },
                                {
                                    title: "Unlock Vehicles",
                                    key: {
                                        characterId: pCharacterId,
                                        garage: garage.garage_id,
                                        lock: false
                                    },
                                    action: "np-vehicles:lockdownPlayerGarage"
                                }
                            ]
                        });
                    }
                    IsMenuOpen = true;
                    SendUIMessage({
                        source: "np-nui",
                        app: "contextmenu",
                        data: {
                            options: ui_to_consumable_array(entries),
                            position: "right"
                        },
                        show: true
                    });
                    SetUIFocus(true, true);
                    return [
                        2
                    ];
            }
        });
    });
    return _OpenPlayerGarage.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/systems/harness.ts
function harness_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function harness_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function harness_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function harness_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                harness_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                harness_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function harness_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function harness_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function harness_sliced_to_array(arr, i) {
    return harness_array_with_holes(arr) || harness_iterable_to_array_limit(arr, i) || harness_unsupported_iterable_to_array(arr, i) || harness_non_iterable_rest();
}
function harness_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return harness_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return harness_array_like_to_array(o, minLen);
}
function harness_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




var HasSeatBeltOn = false;
var HasHarnessOn = false;
function InitHarness() {
    return _InitHarness.apply(this, arguments);
}
function _InitHarness() {
    _InitHarness = harness_async_to_generator(function() {
        return harness_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitHarness.apply(this, arguments);
}
function VehicleHasHarness(pVehicle) {
    var harness = GetVehicleMetadata(pVehicle, "harness");
    return harness ? harness > 0 : false;
}
function GetHarnessLevel(pVehicle) {
    var harness = GetVehicleMetadata(pVehicle, "harness");
    return typeof harness === "number" ? harness : 0;
}
function DoHarnessDamage(pAmount) {
    var netId = NetworkGetNetworkIdFromEntity(CurrentVehicle);
    if (!netId) return;
    emitNet("np:vehicles:reduceHarness", netId, pAmount);
}
__webpack_require__.g.exports("GetHarnessLevel", GetHarnessLevel);
__webpack_require__.g.exports("VehicleHasHarness", VehicleHasHarness);
function SetSeatBelt(pEnabled) {
    if (pEnabled && !InVehicle) return;
    HasSeatBeltOn = pEnabled;
    playSeatbeltAnim(pEnabled);
    emit("seatbelt", pEnabled);
}
__webpack_require__.g.exports("SetSeatBelt", SetSeatBelt);
function SetHarness(pEnabled) {
    if (pEnabled && (!InVehicle || !VehicleHasHarness(CurrentVehicle))) return;
    HasHarnessOn = pEnabled;
    emit("harness", pEnabled, pEnabled ? GetHarnessLevel(CurrentVehicle) : 0);
}
__webpack_require__.g.exports("SetHarness", SetHarness);
driver_DriverThread.addHook("preStart", function() {
    this.data.harnessTick = 0;
    this.data.harnessLevel = GetHarnessLevel(this.data.vehicle);
});
driver_DriverThread.addHook("active", function() {
    if (++this.data.harnessTick < 3) return;
    this.data.harnessTick = 0;
    this.data.harnessLevel = GetHarnessLevel(this.data.vehicle);
    if (this.data.harnessLevel <= 0 && HasHarnessOn) {
        SetHarness(false);
    }
});
driver_DriverThread.addHook("afterStop", function() {
    this.data.harnessTick = 0;
});
function EjectLUL(pVehicle, pVelocity) {
    var playerPed = PlayerPedId();
    var _GetOffsetFromEntityInWorldCoords = harness_sliced_to_array(GetOffsetFromEntityInWorldCoords(pVehicle, 1.0, 0.0, 1.0), 3), x = _GetOffsetFromEntityInWorldCoords[0], y = _GetOffsetFromEntityInWorldCoords[1], z = _GetOffsetFromEntityInWorldCoords[2];
    SetEntityCoords(playerPed, x, y, z, false, false, false, false);
    SetPedToRagdoll(playerPed, 5511, 5511, 0, false, false, false); // TODO: Replace with animation
    SetEntityVelocity(playerPed, pVelocity.x, pVelocity.y, pVelocity.z);
    var ejectSpeed = Math.ceil(GetEntitySpeed(playerPed) * 1.5);
    var health = GetEntityHealth(playerPed) - ejectSpeed;
    var ped = PlayerPedId();
    exports["wounds"].setEntityHealth(ped, health >= 0 ? health : 0);
}
var playSeatbeltAnim = function() {
    var _ref = harness_async_to_generator(function(pEnabled) {
        var failed, isLeftSideSeat, isDriver, anim;
        return harness_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!pEnabled) return [
                        2
                    ];
                    RequestAnimDict("new@anim@carseatbelt");
                    return [
                        4,
                        Utils.waitForCondition(function() {
                            return HasAnimDictLoaded("new@anim@carseatbelt");
                        }, 5000)
                    ];
                case 1:
                    failed = _state.sent();
                    if (failed) return [
                        2
                    ];
                    isLeftSideSeat = CurrentSeat === 0 || CurrentSeat === 2;
                    isDriver = CurrentSeat === -1;
                    anim = null;
                    if (!isLeftSideSeat) anim = "seatbelt_left";
                    if (isLeftSideSeat) {
                        anim = Math.random() < 0.2 ? "seatbelt_right_struggle" : "seatbelt_right";
                    }
                    if (isDriver) anim = "seatbelt_driver";
                    if (!anim) return [
                        2
                    ];
                    TaskPlayAnim(PlayerPedId(), "new@anim@carseatbelt", anim, 8.0, 8.0, 1500, 48, 0, false, false, false);
                    return [
                        2
                    ];
            }
        });
    });
    return function playSeatbeltAnim(pEnabled) {
        return _ref.apply(this, arguments);
    };
}();
RegisterCommand("+toggleSeatbelt", /*#__PURE__*/ harness_async_to_generator(function() {
    var hasHarness, isDriver, result, result1;
    return harness_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                if (!InVehicle) return [
                    2
                ];
                hasHarness = VehicleHasHarness(CurrentVehicle);
                isDriver = CurrentSeat == -1;
                if (!(!HasHarnessOn && hasHarness && isDriver)) return [
                    3,
                    2
                ];
                return [
                    4,
                    Taskbar(5000, "Putting on Harness")
                ];
            case 1:
                result = _state.sent();
                if (result !== 100) return [
                    2
                ];
                SetHarness(true);
                SetSeatBelt(true);
                TriggerEvent("InteractSound_CL:PlayOnOne", "seatbelt", 0.7);
                return [
                    3,
                    5
                ];
            case 2:
                if (!HasHarnessOn) return [
                    3,
                    4
                ];
                return [
                    4,
                    Taskbar(1000, "Taking off Harness")
                ];
            case 3:
                result1 = _state.sent();
                if (result1 !== 100) return [
                    2
                ];
                SetHarness(false);
                SetSeatBelt(false);
                TriggerEvent("InteractSound_CL:PlayOnOne", "seatbeltoff", 0.7);
                return [
                    3,
                    5
                ];
            case 4:
                if (!HasSeatBeltOn && !hasHarness) {
                    // Put on seatbelt
                    SetSeatBelt(true);
                    TriggerEvent("InteractSound_CL:PlayOnOne", "seatbelt", 0.7);
                } else if (HasSeatBeltOn && !hasHarness) {
                    // Remove seatbelt
                    SetSeatBelt(false);
                    TriggerEvent("InteractSound_CL:PlayOnOne", "seatbeltoff", 0.7);
                }
                _state.label = 5;
            case 5:
                return [
                    2
                ];
        }
    });
}), false);
RegisterCommand("-toggleSeatbelt", function() {}, false);
setImmediate(function() {
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Seatbelt Toggle", "+toggleSeatbelt", "-toggleSeatbelt", "B");
});

;// CONCATENATED MODULE: ./src/client/controllers/others/stats.ts
function stats_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function stats_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                stats_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                stats_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function stats_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function stats_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var VEHICLE_CLASS_OVERRIDES = stats_define_property({}, GetHashKey("npolmm"), "M");
function InitVehicleStats() {
    return _InitVehicleStats.apply(this, arguments);
}
function _InitVehicleStats() {
    _InitVehicleStats = stats_async_to_generator(function() {
        return stats_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitVehicleStats.apply(this, arguments);
}
function GetVehicleStats(pVehicle) {
    var cleanHandling = GetCleanHandling(pVehicle);
    var fBrakeForce = cleanHandling.fBrakeForce;
    var fInitialDragCoeff = cleanHandling.fInitialDragCoeff;
    var fInitialDriveForce = cleanHandling.fInitialDriveForce;
    var fInitialDriveMaxFlatVel = cleanHandling.fInitialDriveMaxFlatVel;
    var fSuspensionReboundDamp = cleanHandling.fSuspensionReboundDamp;
    var fTractionCurveMax = cleanHandling.fTractionCurveMax;
    var fTractionCurveMin = cleanHandling.fTractionCurveMin;
    var category = GetVehicleClass(pVehicle);
    var force = fInitialDriveForce;
    if (fInitialDriveForce > 0 && fInitialDriveForce < 1) force *= 1.1;
    var acceleration = fInitialDriveMaxFlatVel * force / 10;
    var speed = fInitialDriveMaxFlatVel / fInitialDragCoeff * (fTractionCurveMax + fTractionCurveMin) / 40;
    var handling = (fTractionCurveMax + fSuspensionReboundDamp) * fTractionCurveMin;
    if (category == 8) handling /= 2;
    var braking = fTractionCurveMin / fInitialDragCoeff * fBrakeForce * 7;
    return {
        force: force,
        acceleration: acceleration,
        speed: speed,
        handling: handling,
        braking: braking,
        category: category
    };
}
__webpack_require__.g.exports("GetVehicleStats", GetVehicleStats);
function GetRatingClass(pRating) {
    var pBike = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    if (pBike) {
        return "M";
    } else if (pRating > 900) {
        return "X";
    } else if (pRating > 700) {
        return "S";
    } else if (pRating > 550) {
        return "A";
    } else if (pRating > 400) {
        return "B";
    } else if (pRating > 325) {
        return "C";
    } else {
        return "D";
    }
}
__webpack_require__.g.exports("GetRatingClass", GetRatingClass);
function GetVehicleRatingNumber(pVehicle) {
    var stats = typeof pVehicle === "number" ? GetVehicleStats(pVehicle) : pVehicle;
    if (!stats) return 0;
    return Math.round((stats.acceleration * 5 + stats.speed + stats.handling + stats.braking) * 15);
}
__webpack_require__.g.exports("GetVehicleRatingNumber", GetVehicleRatingNumber);
function GetVehicleRatingClass(pVehicle) {
    var stats = typeof pVehicle === "number" ? GetVehicleStats(pVehicle) : pVehicle;
    var vehicleModel = typeof pVehicle === "number" ? GetEntityModel(pVehicle) : null;
    if (!stats) return "D";
    if (vehicleModel && VEHICLE_CLASS_OVERRIDES[vehicleModel]) return VEHICLE_CLASS_OVERRIDES[vehicleModel];
    var rating = GetVehicleRatingNumber(stats);
    return GetRatingClass(rating, stats.category === 8);
}
__webpack_require__.g.exports("GetVehicleRatingClass", GetVehicleRatingClass);
function GetVehicleRating(pVehicle) {
    var stats = typeof pVehicle === "number" ? GetVehicleStats(pVehicle) : pVehicle;
    var vehicleModel = typeof pVehicle === "number" ? GetEntityModel(pVehicle) : null;
    if (!stats) return {
        power: 0,
        class: "D"
    };
    var rating = GetVehicleRatingNumber(stats);
    if (vehicleModel && VEHICLE_CLASS_OVERRIDES[vehicleModel]) return {
        power: rating,
        class: VEHICLE_CLASS_OVERRIDES[vehicleModel]
    };
    return {
        power: rating,
        class: GetRatingClass(rating, stats.category === 8)
    };
}
__webpack_require__.g.exports("GetVehicleRating", GetVehicleRating);

;// CONCATENATED MODULE: ./src/client/controllers/systems/mileage.ts
function mileage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function mileage_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                mileage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                mileage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function mileage_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitMileage() {
    return _InitMileage.apply(this, arguments);
}
function _InitMileage() {
    _InitMileage = mileage_async_to_generator(function() {
        return mileage_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitMileage.apply(this, arguments);
}
function mileage_GetVehicleMileage(pVehicle) {
    return GetVehicleMetadata(pVehicle, "mileage") || 0;
}
function UpdateVehicleMileage(pVehicle, pCurrentMiles) {
    var previousMileage = mileage_GetVehicleMileage(pVehicle);
    var milesAdded = pCurrentMiles - previousMileage;
    var totalMiles = previousMileage + milesAdded;
    if (milesAdded <= 0) return;
    DoRandomDegradation(pVehicle, milesAdded * 2, true, totalMiles);
    TriggerServerEvent("np:vehicles:addMileage", NetworkGetNetworkIdFromEntity(pVehicle), milesAdded);
}
driver_DriverThread.addHook("preStart", function() {
    this.data.mileageTick = 0;
    this.data.mileage = mileage_GetVehicleMileage(this.data.vehicle);
    this.data.speedCount = 0;
    this.data.averageSpeed = 0;
    CalculatePartMaxHealth(this.data.vehicle, this.data.mileage);
});
driver_DriverThread.addHook("active", function() {
    this.data.speedCount += this.data.speed;
    this.data.averageSpeed = this.data.speedCount / 30 * 2.236936;
    this.data.speedCount = 0;
    if (this.data.averageSpeed <= 0) return;
    this.data.mileage += this.data.averageSpeed * 0.00833;
});
driver_DriverThread.addHook("preStop", function() {
    UpdateVehicleMileage(this.data.vehicle, this.data.mileage);
});
driver_DriverThread.addHook("afterStop", function() {
    this.data.mileage = 0;
    this.data.mileageTick = 0;
    this.data.speedCount = 0;
    this.data.averageSpeed = 0;
});

;// CONCATENATED MODULE: ./src/shared/items.ts
var CarPolishVariants = [
    {
        tier: "high",
        days: 8
    },
    {
        tier: "medium",
        days: 4
    },
    {
        tier: "low",
        days: 1
    }
];
var IllegalUpgrades = [
    {
        name: "turbokit",
        type: "turbo",
        health: 1000,
        temp: false
    },
    {
        name: "turbotempkit",
        type: "turbo",
        health: 1000,
        temp: true
    },
    {
        name: "enginekit",
        type: "engine",
        health: 1000,
        temp: false
    },
    {
        name: "enginetempkit",
        type: "engine",
        health: 1000,
        temp: true
    },
    {
        name: "transmissionkit",
        type: "transmission",
        health: 1000,
        temp: false
    },
    {
        name: "transmissiontempkit",
        type: "transmission",
        health: 1000,
        temp: true
    }
];
var RepairRatingClasses = {
    "M": 4,
    "X": 5,
    "S": 6,
    "A": 7,
    "B": 8,
    "C": 9,
    "D": 10
};
var DegradationRepairItems = [
    {
        name: "fixbrake",
        part: "brakes",
        amount: 10,
        description: "Brakes will be less effective."
    },
    {
        name: "fixaxle",
        part: "axle",
        amount: 10,
        description: "Vehicle will be less stable."
    },
    {
        name: "fixradiator",
        part: "radiator",
        amount: 10,
        description: "Vehicle will overheat."
    },
    {
        name: "fixclutch",
        part: "clutch",
        amount: 10,
        description: "Vehicle will be less responsive."
    },
    {
        name: "fixtransmission",
        part: "transmission",
        amount: 10,
        description: "Vehicle will be less responsive."
    },
    {
        name: "fixelectronics",
        part: "electronics",
        amount: 10,
        description: "Vehicle will be less responsive."
    },
    {
        name: "fixinjector",
        part: "injector",
        amount: 10,
        description: "Vehicle will be less responsive."
    },
    {
        name: "fixtire",
        part: "tyres",
        amount: 10,
        description: "Vehicle will be less responsive."
    },
    {
        name: "fixbody",
        part: "body",
        amount: 10,
        description: "Vehicle will be less responsive."
    },
    {
        name: "fixengine",
        part: "engine",
        amount: 10,
        description: "Vehicle will be less responsive."
    }
];
var RepairItems = (/* unused pure expression or super */ null && ([
    "advrepairkit",
    "repairkit",
    "tirerepairkit",
    "helicopterrepairkit",
    "bodyrepairkit"
]));

;// CONCATENATED MODULE: ./src/client/controllers/systems/damage.ts
function damage_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function damage_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function damage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function damage_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                damage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                damage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function damage_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function damage_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function damage_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            damage_define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function damage_sliced_to_array(arr, i) {
    return damage_array_with_holes(arr) || damage_iterable_to_array_limit(arr, i) || damage_unsupported_iterable_to_array(arr, i) || damage_non_iterable_rest();
}
function damage_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return damage_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return damage_array_like_to_array(o, minLen);
}
function damage_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}








function InitDamage() {
    return _InitDamage.apply(this, arguments);
}
function _InitDamage() {
    _InitDamage = damage_async_to_generator(function() {
        return damage_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitDamage.apply(this, arguments);
}
var MILES_THRESHOLD = 2500;
NUI.register("np-vehicles:inspection:close", /*#__PURE__*/ damage_async_to_generator(function() {
    return damage_ts_generator(this, function(_state) {
        SetNuiFocus(false, false);
        NUI.execute("np-vehicles:inspection:show", false);
        return [
            2
        ];
    });
}));
function GetVehicleDegradation(pVehicle) {
    var _bag_state;
    if (!DoesEntityExist(pVehicle)) return;
    var bag = GetStateBag(pVehicle);
    return (_bag_state = bag.state) === null || _bag_state === void 0 ? void 0 : _bag_state.degradation;
}
function SetVehicleDegradation(pVehicle, pDegradation) {
    if (!DoesEntityExist(pVehicle)) return;
    Entity(pVehicle).state.set("degradation", pDegradation, true);
}
__webpack_require__.g.exports("GetVehicleDegradation", GetVehicleDegradation);
function DoesPartNeedsReplace(pVehicle, part) {
    var degradation = GetVehicleDegradation(pVehicle);
    var mileage = GetVehicleMileage(pVehicle);
    if (!degradation) return false;
    var initialMileage = degradation[part].installedAt;
    var overMileage = mileage - initialMileage > MILES_THRESHOLD;
    return overMileage;
}
function ShowVehicleDegradation(pVehicle) {
    return _ShowVehicleDegradation.apply(this, arguments);
}
function _ShowVehicleDegradation() {
    _ShowVehicleDegradation = damage_async_to_generator(function(pVehicle) {
        var mileage, degradation, rating, itemsList;
        return damage_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    mileage = mileage_GetVehicleMileage(pVehicle);
                    CalculatePartMaxHealth(pVehicle, mileage);
                    degradation = GetVehicleDegradation(pVehicle);
                    if (!degradation) return [
                        2
                    ];
                    rating = GetVehicleRating(pVehicle);
                    if (!rating) return [
                        2
                    ];
                    return [
                        4,
                        Inventory.GetItemList()
                    ];
                case 1:
                    itemsList = _state.sent();
                    Object.entries(degradation).forEach(function(param) {
                        var _param = damage_sliced_to_array(param, 2), key = _param[0], value = _param[1];
                        var degradationRepairItem = DegradationRepairItems.find(function(item) {
                            return item.part === key;
                        });
                        if (!degradationRepairItem) return;
                        var itemData = itemsList[degradationRepairItem.name];
                        var itemVariant = itemsList[degradationRepairItem.name].variants["".concat(degradationRepairItem.name, "_repair")];
                        var percentage = value.health / value.defaultHealth * 100;
                        var maxHealth = value.maxHealth / value.defaultHealth * 100;
                        degradation[key] = _object_spread_props(_object_spread({}, value), {
                            maxHealth: Math.floor(maxHealth),
                            percentage: percentage.toFixed(2),
                            description: degradationRepairItem.description,
                            itemData: _object_spread_props(_object_spread({}, itemData), {
                                label: itemVariant.name,
                                name: "".concat(rating.class.toLowerCase()).concat(degradationRepairItem.name),
                                description: itemData.description,
                                image: itemVariant.image,
                                amount: Math.floor((100 - percentage) / 10)
                            })
                        });
                    });
                    SetNuiFocus(true, true);
                    NUI.execute("np-vehicles:inspection:show", true, {
                        degradation: degradation,
                        rating: rating,
                        mileage: mileage
                    });
                    return [
                        2
                    ];
            }
        });
    });
    return _ShowVehicleDegradation.apply(this, arguments);
}
__webpack_require__.g.exports("ShowVehicleDegradation", ShowVehicleDegradation);
function CalculatePartMaxHealth(pVehicle, mileage) {
    SetVehicleDegradation(pVehicle, 100);
}
function DoRandomDegradation(pVehicle, pLimit, pForced, mileage) {
    if (!pForced && GetRandom(100) > 20) return;
    var degradation = GetVehicleDegradation(pVehicle);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.entries(degradation)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = damage_sliced_to_array(_step.value, 2), key = _step_value[0], value = _step_value[1];
            value.health = Number((value.health - GetRandom(pLimit / 2, pLimit)).toFixed(2));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    CalculatePartMaxHealth(pVehicle, mileage);
    SetVehicleDegradation(pVehicle, degradation);
    // Applying degen changes to current vehicle.
    ApplyDegen(pVehicle);
}
function SaveDegradation(pVehicle) {
    return _SaveDegradation.apply(this, arguments);
}
function _SaveDegradation() {
    _SaveDegradation = damage_async_to_generator(function(pVehicle) {
        var degradation, netId;
        return damage_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    degradation = GetVehicleDegradation(pVehicle);
                    if (!degradation) return [
                        2
                    ];
                    netId = NetworkGetNetworkIdFromEntity(pVehicle);
                    return [
                        4,
                        RPC.execute("np:vehicles:saveDegradation", netId, degradation)
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _SaveDegradation.apply(this, arguments);
}
function DoRandomTyreDamage(pVehicle, pTyre, pMin, pMax) {
    var currentHealth = GetVehicleWheelHealth(pVehicle, pTyre);
    var damage = pMax ? GetRandom(pMin, pMax) : GetRandom(pMin);
    var health = currentHealth - damage;
    SetVehicleWheelHealth(pVehicle, pTyre, health);
    if (health < 300 && !IsVehicleTyreBurst(pVehicle, pTyre, false)) {
        SetVehicleTyreBurst(pVehicle, pTyre, true, 100.0);
    }
    return health;
}
function HasDisabledDegradation(pClass) {
    return pClass == 13 || pClass == 14 || pClass == 15 || pClass == 16;
}
var DegenVehicle = 0;
var DegenEffected = false;
//axle: brakes: clutch: electronics: injector: radiator: tyres: transmission:
// false increase the handling float
// true decreases the handling float
// penis cock lil pussy in me ass
var DegenList = {
    axle: [
        [
            "fTractionBiasFront",
            false
        ]
    ],
    brakes: [
        [
            "fBrakeForce",
            true
        ],
        [
            "fHandBrakeForce",
            true
        ]
    ],
    clutch: [
        [
            "fClutchChangeRateScaleUpShift",
            true
        ]
    ],
    electronics: [],
    injector: [
        [
            "fInitialDriveMaxFlatVel",
            true
        ]
    ],
    radiator: [
        [
            "fEngineDamageMult",
            false
        ]
    ],
    tyres: [
        [
            "fLowSpeedTractionLossMult",
            false
        ]
    ],
    engine: [
        [
            "fInitialDriveForce",
            true
        ]
    ],
    body: [
        [
            "fDeformationDamageMult",
            false
        ],
        [
            "fCollisionDamageMult",
            false
        ]
    ],
    transmission: [
        [
            "fClutchChangeRateScaleDownShift",
            true
        ],
        [
            "fInitialDragCoeff",
            false
        ]
    ]
};
var ApplyDegen = function(pVehicle) {
    var CurrentDegen = GetVehicleDegradation(pVehicle);
    DegenEffected = false;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        var _loop = function() {
            var _step_value = damage_sliced_to_array(_step.value, 2), key = _step_value[0], entries = _step_value[1];
            entries.forEach(function(entry) {
                var percentage = CurrentDegen[key].health / CurrentDegen[key].defaultHealth * 100;
                var multiplier = 1.0;
                if (percentage <= 75) {
                    DegenEffected = true;
                    if (entry[1]) {
                        multiplier -= (1.0 - percentage / 100) / 2;
                    } else {
                        multiplier += (1.0 - percentage / 100) / 2;
                    }
                }
                handling_SetHandlingContextMultiplier(pVehicle, entry[0], "degradation", "multiplier", multiplier, 0);
            });
        };
        for(var _iterator = Object.entries(DegenList)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    handling_ApplyHandlingMultipliers(pVehicle);
};
var ApplyDegenEffect = function(pVehicle) {
    var CurrentDegen = GetVehicleDegradation(pVehicle);
    var brakesPercentage = CurrentDegen.brakes.health / CurrentDegen.brakes.defaultHealth * 100;
    var clutchPercentage = CurrentDegen.clutch.health / CurrentDegen.clutch.defaultHealth * 100;
    var electronicsPercentage = CurrentDegen.electronics.health / CurrentDegen.electronics.defaultHealth * 100;
    var injectorPercentage = CurrentDegen.injector.health / CurrentDegen.injector.defaultHealth * 100;
    var radiatorPercentage = CurrentDegen.radiator.health / CurrentDegen.radiator.defaultHealth * 100;
    var bodyPercentage = CurrentDegen.body.health / CurrentDegen.body.defaultHealth * 100;
    var transmissionPercentage = CurrentDegen.transmission.health / CurrentDegen.transmission.defaultHealth * 100;
    if (brakesPercentage < 60 && GetRandom(1, 4) > 3) {
        SetVehicleBrakeLights(pVehicle, true);
    }
    if (clutchPercentage < 60 && GetRandom(1, 4) > 3) {
        SetVehicleHandbrake(pVehicle, true);
        setTimeout(function() {
            SetVehicleHandbrake(pVehicle, false);
        }, 1000);
        SetVehicleEngineHealth(pVehicle, GetVehicleEngineHealth(pVehicle) - 50);
    }
    if (electronicsPercentage < 60) {
        SetVehicleLightMultiplier(pVehicle, GetRandom(0, 10) / 10);
        SetVehicleIndicatorLights(pVehicle, GetRandom(0, 1), true);
    }
    if (electronicsPercentage < 30 && GetRandom(1, 4) > 3) {
        SetVehicleEngineOn(pVehicle, false, true, true);
    }
    if (injectorPercentage < 60 && GetRandom(1, 4) > 3) {
        SetVehicleEngineOn(pVehicle, false, true, true);
        SetVehicleEngineHealth(pVehicle, GetVehicleEngineHealth(pVehicle) - 50);
    }
    if (injectorPercentage < 30 && GetRandom(1, 20) > 19) {
        SetVehiclePetrolTankHealth(pVehicle, 500);
    }
    if (radiatorPercentage < 60 && GetRandom(1, 4) > 3) {
        SetVehicleEngineHealth(pVehicle, GetVehicleEngineHealth(pVehicle) - 50);
    }
    if (bodyPercentage < 50 && GetRandom(1, 20) > 19) {
        SetVehicleDoorBroken(pVehicle, GetRandom(0, 5), false);
    }
    if (transmissionPercentage < 40 && GetRandom(1, 4) > 3) {
        SetVehicleBurnout(pVehicle, true);
        setTimeout(function() {
            SetVehicleBurnout(pVehicle, false);
        }, 2000);
        SetVehicleEngineHealth(pVehicle, GetVehicleEngineHealth(pVehicle) - 50);
    }
};
driver_DriverThread.addHook("preStart", function() {
    this.data.damage = {};
    this.data.damageTick = 0;
});
driver_DriverThread.addHook("afterStart", function() {
    // start degen tick rate and set defaults for new vehicle entry.
    this.data.degenTick = 0;
    // flag for when we want to allow the loop to run extra if statements
    DegenEffected = false;
    DegenVehicle = this.data.vehicle;
    SetDisableVehiclePetrolTankDamage(DegenVehicle, true);
    SetVehicleEngineCanDegrade(DegenVehicle, false);
    if (HasDisabledDegradation(this.data.vehicleClass) || this.data.isInvincible) return;
    //Reapply current degen stats.
    ApplyDegen(DegenVehicle);
});
driver_DriverThread.addHook("active", function() {
    if (HasDisabledDegradation(this.data.vehicleClass) || this.data.isInvincible) return;
    if (++this.data.damageTick > 30) {
        this.data.damageTick = 0;
        var distance = this.data.averageSpeed * 0.00833;
        var offset = distance * 25 / 100 + this.data.averageSpeed * 5 / 100;
        var wheels = GetVehicleNumberOfWheels(this.data.vehicle);
        for(var i = 0; i < wheels; i += 1){
            DoRandomTyreDamage(this.data.vehicle, i, distance + offset);
        }
    } else if (++this.data.degenTick > 10 && DegenEffected) {
        ApplyDegenEffect(this.data.vehicle);
        this.data.degenTick = 0;
    }
});
driver_DriverThread.addHook("preStop", function() {
    if (HasDisabledDegradation(this.data.vehicleClass) || this.data.isInvincible) return;
    SaveDegradation(this.data.vehicle);
});
driver_DriverThread.addHook("afterStop", function() {
    DegenEffected = false;
    this.data.damageTick = 0;
    this.data.degenTick = 0;
});

;// CONCATENATED MODULE: ./src/client/controllers/others/licenseplate.ts
function licenseplate_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function licenseplate_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function licenseplate_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function licenseplate_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                licenseplate_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                licenseplate_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function licenseplate_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function licenseplate_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function licenseplate_sliced_to_array(arr, i) {
    return licenseplate_array_with_holes(arr) || licenseplate_iterable_to_array_limit(arr, i) || licenseplate_unsupported_iterable_to_array(arr, i) || licenseplate_non_iterable_rest();
}
function licenseplate_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return licenseplate_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return licenseplate_array_like_to_array(o, minLen);
}
function licenseplate_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

function InitLicensePlate() {
    return _InitLicensePlate.apply(this, arguments);
}
function _InitLicensePlate() {
    _InitLicensePlate = licenseplate_async_to_generator(function() {
        return licenseplate_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitLicensePlate.apply(this, arguments);
}
function GetLicensePlate(pVIN) {
    return _GetLicensePlate.apply(this, arguments);
}
function _GetLicensePlate() {
    _GetLicensePlate = licenseplate_async_to_generator(function(pVIN) {
        var _ref, hasVehicleInfo, licensePlate;
        return licenseplate_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!pVIN) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        RPC.execute("np:vehicles:getLicensePlate", pVIN)
                    ];
                case 1:
                    _ref = licenseplate_sliced_to_array.apply(void 0, [
                        _state.sent(),
                        2
                    ]), hasVehicleInfo = _ref[0], licensePlate = _ref[1];
                    return [
                        2,
                        {
                            hasVehicleInfo: hasVehicleInfo,
                            licensePlate: licensePlate
                        }
                    ];
                case 2:
                    return [
                        2
                    ];
            }
        });
    });
    return _GetLicensePlate.apply(this, arguments);
}
function SetVehicleFakeLicensePlate(pVehicle, pSetFakeLicensePlate) {
    return _SetVehicleFakeLicensePlate.apply(this, arguments);
}
function _SetVehicleFakeLicensePlate() {
    _SetVehicleFakeLicensePlate = licenseplate_async_to_generator(function(pVehicle, pSetFakeLicensePlate) {
        var anime, result, netId, couldApply;
        return licenseplate_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    anime = new AnimationTask(PlayerPedId(), "normal", pSetFakeLicensePlate ? "Adding fake plates" : "Removing fake plates", 5000, "anim@amb@clubhouse@tutorial@bkr_tut_ig3@", "machinic_loop_mechandplayer");
                    return [
                        4,
                        anime.start()
                    ];
                case 1:
                    result = _state.sent();
                    if (!(result === 100)) return [
                        3,
                        3
                    ];
                    netId = NetworkGetNetworkIdFromEntity(pVehicle);
                    return [
                        4,
                        RPC.execute("np:vehicles:setFakeLicensePlate", netId, pSetFakeLicensePlate)
                    ];
                case 2:
                    couldApply = _state.sent();
                    //FIXME: Convert to new inventory
                    if (couldApply) TriggerEvent("inventory:removeItem", "fakeplate", 1);
                    _state.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _SetVehicleFakeLicensePlate.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/systems/lockpicking.ts
function lockpicking_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function lockpicking_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                lockpicking_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                lockpicking_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function lockpicking_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function lockpicking_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            lockpicking_define_property(target, key, source[key]);
        });
    }
    return target;
}
function lockpicking_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}






var Hotwiring = false;
var HackingListener = {
    active: false,
    data: {
        success: false,
        stage: 0
    }
};
var POLICE_VEHICLE_MAP = null;
var isPoliceVehicle = function(pVehicle) {
    if (!POLICE_VEHICLE_MAP) {
        POLICE_VEHICLE_MAP = {};
        var conf = config_GetModuleConfig("np-police");
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = Object.keys(conf.policeVehicles)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var k = _step.value;
                POLICE_VEHICLE_MAP[GetHashKey(k)] = true;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return !!POLICE_VEHICLE_MAP[GetEntityModel(pVehicle)];
};
function InitHotwire() {}
function ToggleLockState(pVehicle, pSound) {
    return _ToggleLockState.apply(this, arguments);
}
function _ToggleLockState() {
    _ToggleLockState = lockpicking_async_to_generator(function(pVehicle, pSound) {
        var lockState, isUnlocked;
        return lockpicking_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!HasVehicleKey(pVehicle)) return [
                        3,
                        2
                    ];
                    lockState = GetVehicleDoorLockStatus(pVehicle);
                    isUnlocked = lockState === 0 || lockState === 1;
                    __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleDoorsLocked", pVehicle, isUnlocked ? 2 : 1);
                    if (!pSound) return [
                        3,
                        2
                    ];
                    return [
                        4,
                        LoadAnimationModel("anim@heists@keycard@")
                    ];
                case 1:
                    _state.sent();
                    TaskPlayAnim(PlayerPedId(), "anim@heists@keycard@", "exit", 8.0, 1.0, -1, 48, 0, false, false, false);
                    client_Events.emitNet("np-fx:sound:playCarLocking", NetworkGetNetworkIdFromEntity(pVehicle), isUnlocked);
                    _state.label = 2;
                case 2:
                    return [
                        2
                    ];
            }
        });
    });
    return _ToggleLockState.apply(this, arguments);
}
function HotwireVehicle(pVehicle) {
    return _HotwireVehicle.apply(this, arguments);
}
function _HotwireVehicle() {
    _HotwireVehicle = lockpicking_async_to_generator(function(pVehicle) {
        var pItemType, isForced, pCallback, pItemSlot, pItemInv, hotwireId, isDriver, result, res;
        var _arguments = arguments;
        return lockpicking_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pItemType = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : "lockpick", isForced = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : false, pCallback = _arguments.length > 3 ? _arguments[3] : void 0, pItemSlot = _arguments.length > 4 ? _arguments[4] : void 0, pItemInv = _arguments.length > 5 ? _arguments[5] : void 0;
                    if (Hotwiring) return [
                        2
                    ];
                    Hotwiring = true;
                    return [
                        4,
                        RPC.execute("np:vehicles:hotwireVehicle")
                    ];
                case 1:
                    hotwireId = _state.sent();
                    isDriver = pVehicle > 0 && GetPedInVehicleSeat(pVehicle, -1) === PlayerPedId();
                    result = {
                        success: false,
                        stage: 0
                    };
                    if (!pVehicle || !isDriver) {
                        if (pCallback) pCallback(result);
                        Hotwiring = false;
                        return [
                            2,
                            result
                        ];
                    }
                    if (!(hotwireId && typeof hotwireId === "number")) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        pItemType === "hackingdevice" ? hackingGame(pVehicle, isForced) : lockpickGame(pVehicle, pItemType, isForced)
                    ];
                case 2:
                    result = _state.sent();
                    return [
                        4,
                        RPC.execute("np:vehicles:hotwireVehicle", hotwireId, result)
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    if (pCallback) pCallback(result);
                    if (!!isForced) return [
                        3,
                        6
                    ];
                    return [
                        4,
                        client_RPC.execute("vehicles:lockpickResult", pItemType, result.success, pItemSlot, pItemInv)
                    ];
                case 5:
                    res = _state.sent();
                    if (!res) {
                        Hotwiring = false;
                        return [
                            2,
                            result
                        ];
                    }
                    _state.label = 6;
                case 6:
                    Hotwiring = false;
                    return [
                        2,
                        result
                    ];
            }
        });
    });
    return _HotwireVehicle.apply(this, arguments);
}
__webpack_require__.g.exports("HotwireVehicle", function(pVehicle) {
    var pItemType = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "lockpick", isForced = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, pCallback = arguments.length > 3 ? arguments[3] : void 0, pItemSlot = arguments.length > 4 ? arguments[4] : void 0, pItemInv = arguments.length > 5 ? arguments[5] : void 0;
    return HotwireVehicle(pVehicle, pItemType, isForced, pCallback, pItemSlot, pItemInv);
});
function LockpickVehicleDoor(pVehicle, pOptions, pCallback) {
    return _LockpickVehicleDoor.apply(this, arguments);
}
function _LockpickVehicleDoor() {
    _LockpickVehicleDoor = lockpicking_async_to_generator(function(pVehicle, pOptions, pCallback) {
        var _pOptions, _pOptions1, _pOptions2, _pOptions_itemType, itemType, _pOptions_isForced, isForced, _pOptions_itemSlot, itemSlot, _pOptions_invItem, invItem, variant, model, _GetVehicleModelValue, price, result, _tmp, res, vehicleDriver, result1;
        return lockpicking_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (Hotwiring) return [
                        2
                    ];
                    itemType = (_pOptions_itemType = (_pOptions = pOptions) === null || _pOptions === void 0 ? void 0 : _pOptions.itemType) !== null && _pOptions_itemType !== void 0 ? _pOptions_itemType : "lockpick";
                    isForced = (_pOptions_isForced = (_pOptions1 = pOptions) === null || _pOptions1 === void 0 ? void 0 : _pOptions1.isForced) !== null && _pOptions_isForced !== void 0 ? _pOptions_isForced : false;
                    itemSlot = (_pOptions_itemSlot = (_pOptions2 = pOptions) === null || _pOptions2 === void 0 ? void 0 : _pOptions2.itemSlot) !== null && _pOptions_itemSlot !== void 0 ? _pOptions_itemSlot : 0;
                    invItem = (_pOptions_invItem = pOptions.invItem) !== null && _pOptions_invItem !== void 0 ? _pOptions_invItem : "";
                    variant = pOptions.variant;
                    Hotwiring = true;
                    model = GetEntityModel(pVehicle);
                    price = (_GetVehicleModelValue = GetVehicleModelValue(model)) !== null && _GetVehicleModelValue !== void 0 ? _GetVehicleModelValue : 50000;
                    if (!(price <= 20000)) return [
                        3,
                        1
                    ];
                    result = {
                        success: true,
                        stage: 1
                    };
                    return [
                        3,
                        6
                    ];
                case 1:
                    if (!(itemType === "hackingdevice")) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        hackingGame(pVehicle, isForced)
                    ];
                case 2:
                    _tmp = _state.sent();
                    return [
                        3,
                        5
                    ];
                case 3:
                    return [
                        4,
                        lockpickGame(pVehicle, itemType, isForced)
                    ];
                case 4:
                    _tmp = _state.sent();
                    _state.label = 5;
                case 5:
                    result = _tmp;
                    _state.label = 6;
                case 6:
                    emit("np-vehicle:client:doorLockpicking", NetworkGetNetworkIdFromEntity(pVehicle));
                    ClearPedTasksImmediately(PlayerPedId());
                    if (pCallback) pCallback(result);
                    if (!!isForced) return [
                        3,
                        8
                    ];
                    return [
                        4,
                        client_RPC.execute("vehicles:lockpickResult", itemType, result.success, itemSlot, invItem, variant)
                    ];
                case 7:
                    res = _state.sent();
                    if (!res) {
                        Hotwiring = false;
                        return [
                            2,
                            result
                        ];
                    }
                    _state.label = 8;
                case 8:
                    if (!result.success) return [
                        3,
                        12
                    ];
                    vehicleDriver = GetPedInVehicleSeat(pVehicle, -1);
                    if (!(vehicleDriver !== 0 && IsEntityDead(vehicleDriver))) return [
                        3,
                        11
                    ];
                    __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleDoorsLocked", pVehicle, 0);
                    setTimeout(function() {
                        return SetControlNormal(0, 23, 2.0);
                    }, 500);
                    return [
                        4,
                        new Promise(function() {
                            var _ref = lockpicking_async_to_generator(function(resolve) {
                                var progress;
                                return lockpicking_ts_generator(this, function(_state) {
                                    switch(_state.label){
                                        case 0:
                                            return [
                                                4,
                                                Taskbar(5000, "Taking car keys", false)
                                            ];
                                        case 1:
                                            progress = _state.sent();
                                            resolve(progress === 100);
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                            return function(resolve) {
                                return _ref.apply(this, arguments);
                            };
                        }())
                    ];
                case 9:
                    result1 = _state.sent();
                    emit("civilian:alertPolice", 20.0, "lockpick", pVehicle);
                    if (!isForced) {
                        __webpack_require__.g.exports["np-flags"].SetVehicleFlag(pVehicle, "isStolenVehicle", true);
                    }
                    if (!result1) return [
                        3,
                        11
                    ];
                    emit("keys:addNew", pVehicle, GetVehicleNumberPlateText(pVehicle));
                    DoLongHudText("Got the vehicle keys.", 1);
                    return [
                        4,
                        RPC.execute("np-vehicles:lockPickVehicleDoor", NetworkGetNetworkIdFromEntity(pVehicle))
                    ];
                case 10:
                    _state.sent();
                    _state.label = 11;
                case 11:
                    __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleDoorsLocked", pVehicle, 1);
                    DoLongHudText("Vehicle Unlocked.", 1);
                    emit("InteractSound_CL:PlayOnOne", "unlock", 0.1);
                    _state.label = 12;
                case 12:
                    Hotwiring = false;
                    return [
                        2,
                        result
                    ];
            }
        });
    });
    return _LockpickVehicleDoor.apply(this, arguments);
}
var calculateLockpickDifficulty = function() {
    var _ref = lockpicking_async_to_generator(function(pVehicle) {
        var itemType, isForced;
        var _arguments = arguments;
        return lockpicking_ts_generator(this, function(_state) {
            itemType = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : "lockpick", isForced = _arguments.length > 2 ? _arguments[2] : void 0;
            if (isForced) {
                return [
                    2,
                    1
                ];
            }
            if (isPoliceVehicle(pVehicle)) {
                return [
                    2,
                    0.05
                ];
            }
            // const vehicleData: ShowroomVehicle = await RPC.execute('np-showroom:getCarConfigByHash', GetEntityModel(pVehicle));
            // const config = GetModuleConfig<LockpickConfig>('np-vehicles:lockpicking');
            // if (!vehicleData || Array.isArray(vehicleData)) {
            //     const vehicleClass = GetVehicleClass(pVehicle);
            //     return Number(config.classes[vehicleClass.toString()]?.difficulties?.lockpick ?? 0.5);
            // }
            // if (itemType === 'advlockpick' && vehicleData.retail_price >= config.dividers.advlockpick.minimum) {
            //     return 1 - Math.min(0.95, (vehicleData.retail_price - config.dividers.advlockpick.deduct) / config.dividers.advlockpick.divider);
            // }
            // if (itemType === 'advlockpick') {
            //     return 1;
            // }
            // if (vehicleData.retail_price > config.dividers.lockpick.minimum) {
            //     return 1 - Math.min(0.95, (vehicleData.retail_price - config.dividers.lockpick.deduct) / config.dividers.lockpick.divider);
            // }
            return [
                2,
                0.5
            ];
        });
    });
    return function calculateLockpickDifficulty(pVehicle) {
        return _ref.apply(this, arguments);
    };
}();
var hackingGame = function() {
    var _ref = lockpicking_async_to_generator(function(pVehicle, isForced) {
        var secondRemoval, subTime;
        return lockpicking_ts_generator(this, function(_state) {
            secondRemoval = 0;
            subTime = 60000 - secondRemoval * 1000;
            __webpack_require__.g.exports["np-ui"].openApplication("minigame-sequence", {
                gameCompletedEvent: "np-vehicles:lockpicking:completeHacking",
                timeToComplete: Math.max(1, subTime < 10000 || isPoliceVehicle(pVehicle) ? 10000 : subTime),
                shiftInterval: 1500,
                parameters: {
                    vehicle: pVehicle
                }
            });
            HackingListener.active = true;
            return [
                2,
                new Promise(function() {
                    var _ref = lockpicking_async_to_generator(function(resolve) {
                        return lockpicking_ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    if (!HackingListener.active) return [
                                        3,
                                        2
                                    ];
                                    return [
                                        4,
                                        Wait(50)
                                    ];
                                case 1:
                                    _state.sent();
                                    return [
                                        3,
                                        0
                                    ];
                                case 2:
                                    resolve(lockpicking_object_spread({}, HackingListener.data));
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                    return function(resolve) {
                        return _ref.apply(this, arguments);
                    };
                }())
            ];
        });
    });
    return function hackingGame(pVehicle, isForced) {
        return _ref.apply(this, arguments);
    };
}();
RegisterUICallback("np-vehicles:lockpicking:completeHacking", function(data, cb) {
    __webpack_require__.g.exports["np-ui"].SetUIFocus(false, false);
    HackingListener.active = false;
    HackingListener.data = {
        success: data.success,
        stage: 1
    };
    cb({
        data: {},
        meta: {
            ok: true,
            message: ""
        }
    });
});
var lockpickGame = function() {
    var _ref = lockpicking_async_to_generator(function(pVehicle, itemType, isForced) {
        var difficultyMultiplier;
        return lockpicking_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        calculateLockpickDifficulty(pVehicle, itemType, isForced)
                    ];
                case 1:
                    difficultyMultiplier = _state.sent();
                    if (difficultyMultiplier === -1) {
                        return [
                            2,
                            Promise.resolve({
                                success: false,
                                stage: 1
                            })
                        ];
                    }
                    return [
                        2,
                        new Promise(function() {
                            var _ref = lockpicking_async_to_generator(function(resolve) {
                                var success;
                                return lockpicking_ts_generator(this, function(_state) {
                                    switch(_state.label){
                                        case 0:
                                            return [
                                                4,
                                                Minigames.LockpickMinigame({
                                                    numLocks: (1 - difficultyMultiplier) * 24,
                                                    numLevels: 4,
                                                    gameTimeoutDuration: difficultyMultiplier * 60000
                                                })
                                            ];
                                        case 1:
                                            success = _state.sent();
                                            resolve({
                                                success: success,
                                                stage: 4
                                            });
                                            return [
                                                2
                                            ];
                                    }
                                });
                            });
                            return function(resolve) {
                                return _ref.apply(this, arguments);
                            };
                        }())
                    ];
            }
        });
    });
    return function lockpickGame(pVehicle, itemType, isForced) {
        return _ref.apply(this, arguments);
    };
}();
__webpack_require__.g.exports("LockpickVehicleDoor", function(pVehicle, pOptions, pCallback) {
    return LockpickVehicleDoor(pVehicle, pOptions, pCallback);
});
function DoorLockCheck(pVehicle) {
    return _DoorLockCheck.apply(this, arguments);
}
function _DoorLockCheck() {
    _DoorLockCheck = lockpicking_async_to_generator(function(pVehicle) {
        var vehicleDriver, lockStatus;
        return lockpicking_ts_generator(this, function(_state) {
            if (!HasVehicleKey(pVehicle)) {
                vehicleDriver = GetPedInVehicleSeat(pVehicle, -1);
                if (vehicleDriver !== 0 && !IsPedAPlayer(vehicleDriver)) {
                    lockStatus = GetVehicleDoorLockStatus(pVehicle);
                    if (lockStatus === 1) {
                        __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleDoorsLocked", pVehicle, 2);
                    }
                }
            }
            return [
                2
            ];
        });
    });
    return _DoorLockCheck.apply(this, arguments);
}
RegisterCommand("+vehicleLock", /*#__PURE__*/ lockpicking_async_to_generator(function() {
    var vehicle, pedVehicle;
    return lockpicking_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                if (!(vehicle && DoesEntityExist(vehicle))) return [
                    3,
                    2
                ];
                return [
                    4,
                    ToggleLockState(vehicle, true)
                ];
            case 1:
                _state.sent();
                return [
                    3,
                    4
                ];
            case 2:
                if (!(pedVehicle = GetVehiclePedIsIn(PlayerPedId(), false))) return [
                    3,
                    4
                ];
                return [
                    4,
                    ToggleLockState(pedVehicle, true)
                ];
            case 3:
                _state.sent();
                _state.label = 4;
            case 4:
                return [
                    2
                ];
        }
    });
}), false);
RegisterCommand("-vehicleLock", function() {}, false);
setImmediate(function() {
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Lock Doors", "+vehicleLock", "-vehicleLock", "L");
});
on("np-vehicles:checkTampering", function(args, entity) {
    if (!isPolice) return;
    var hasStolenFlag = __webpack_require__.g.exports["np-flags"].HasVehicleFlag(entity, "isStolenVehicle");
    if (hasStolenFlag) {
        return emit("DoLongHudText", "This vehicle has signs of forced break-in");
    }
    return emit("DoLongHudText", "This vehicle has not been tampered with");
});

;// CONCATENATED MODULE: ./src/client/controllers/threads/traffic.ts
function traffic_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function traffic_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                traffic_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                traffic_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function traffic_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

function InitTraffic() {
    return _InitTraffic.apply(this, arguments);
}
function _InitTraffic() {
    _InitTraffic = traffic_async_to_generator(function() {
        return traffic_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitTraffic.apply(this, arguments);
}
var TrafficThread = new Thread(/*#__PURE__*/ traffic_async_to_generator(function() {
    return traffic_ts_generator(this, function(_state) {
        // Disables Ambient City Sounds
        StartAudioScene("CHARACTER_CHANGE_IN_SKY_SCENE");
        SetParkedVehicleDensityMultiplierThisFrame(0);
        SetVehicleDensityMultiplierThisFrame(0);
        SetRandomVehicleDensityMultiplierThisFrame(0);
        SetPedDensityMultiplierThisFrame(0);
        SetScenarioPedDensityMultiplierThisFrame(0, 0);
        return [
            2
        ];
    });
}), 0, "tick");
TrafficThread.addHook("afterStop", function() {
    SetRandomEventFlag(true);
    SetGarbageTrucks(true);
    SetRandomBoats(true);
    scenarios.forEach(function(s) {
        return SetScenarioTypeEnabled(s, true);
    });
});
TrafficThread.addHook("preStart", function() {
    console.log("TrafficThread preStart");
    SetRandomEventFlag(false);
    SetGarbageTrucks(false);
    SetRandomBoats(false);
    scenarios.forEach(function(s) {
        return SetScenarioTypeEnabled(s, false);
    });
});
// Supposedly disables all vehicles
var scenarios = [
    "WORLD_VEHICLE_ATTRACTOR",
    "WORLD_VEHICLE_AMBULANCE",
    "WORLD_VEHICLE_BICYCLE_BMX",
    "WORLD_VEHICLE_BICYCLE_BMX_BALLAS",
    "WORLD_VEHICLE_BICYCLE_BMX_FAMILY",
    "WORLD_VEHICLE_BICYCLE_BMX_HARMONY",
    "WORLD_VEHICLE_BICYCLE_BMX_VAGOS",
    "WORLD_VEHICLE_BICYCLE_MOUNTAIN",
    "WORLD_VEHICLE_BICYCLE_ROAD",
    "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE",
    "WORLD_VEHICLE_BIKER",
    "WORLD_VEHICLE_BOAT_IDLE",
    "WORLD_VEHICLE_BOAT_IDLE_ALAMO",
    "WORLD_VEHICLE_BOAT_IDLE_MARQUIS",
    "WORLD_VEHICLE_BOAT_IDLE_MARQUIS",
    "WORLD_VEHICLE_BROKEN_DOWN",
    "WORLD_VEHICLE_BUSINESSMEN",
    "WORLD_VEHICLE_HELI_LIFEGUARD",
    "WORLD_VEHICLE_CLUCKIN_BELL_TRAILER",
    "WORLD_VEHICLE_CONSTRUCTION_SOLO",
    "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS",
    "WORLD_VEHICLE_DRIVE_PASSENGERS",
    "WORLD_VEHICLE_DRIVE_PASSENGERS_LIMITED",
    "WORLD_VEHICLE_DRIVE_SOLO",
    "WORLD_VEHICLE_FIRE_TRUCK",
    "WORLD_VEHICLE_EMPTY",
    "WORLD_VEHICLE_MARIACHI",
    "WORLD_VEHICLE_MECHANIC",
    "WORLD_VEHICLE_MILITARY_PLANES_BIG",
    "WORLD_VEHICLE_MILITARY_PLANES_SMALL",
    "WORLD_VEHICLE_PARK_PARALLEL",
    "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN",
    "WORLD_VEHICLE_PASSENGER_EXIT",
    "WORLD_VEHICLE_POLICE_BIKE",
    "WORLD_VEHICLE_POLICE_CAR",
    "WORLD_VEHICLE_POLICE",
    "WORLD_VEHICLE_POLICE_NEXT_TO_CAR",
    "WORLD_VEHICLE_QUARRY",
    "WORLD_VEHICLE_SALTON",
    "WORLD_VEHICLE_SALTON_DIRT_BIKE",
    "WORLD_VEHICLE_SECURITY_CAR",
    "WORLD_VEHICLE_STREETRACE",
    "WORLD_VEHICLE_TOURBUS",
    "WORLD_VEHICLE_TOURIST",
    "WORLD_VEHICLE_TANDL",
    "WORLD_VEHICLE_TRACTOR",
    "WORLD_VEHICLE_TRACTOR_BEACH",
    "WORLD_VEHICLE_TRUCK_LOGS",
    "WORLD_VEHICLE_TRUCKS_TRAILERS",
    "WORLD_VEHICLE_DISTANT_EMPTY_GROUND"
];

;// CONCATENATED MODULE: ./src/client/controllers/events/admin.ts
function admin_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function admin_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                admin_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                admin_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function admin_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function InitAdminEvents() {}
RPC.register("np-vehicles:fixVehicle", function(pNetId) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (!vehicle || !DoesEntityExist(vehicle)) return;
    __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleEngineHealth", vehicle, 1000);
    __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleBodyHealth", vehicle, 1000);
    __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleDeformationFixed", vehicle);
    __webpack_require__.g.exports["np-sync"].SyncedExecution("SetVehicleFixed", vehicle);
});
RegisterCommand("toggleTraffic", /*#__PURE__*/ admin_async_to_generator(function() {
    var cb;
    return admin_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    Procedures.execute("np-vehicles:admin:toggleTraffic")
                ];
            case 1:
                cb = _state.sent();
                emit("DoLongHudText", "Toggled Traffic: " + cb, cb ? 1 : 2);
                return [
                    2
                ];
        }
    });
}), false);
on("np-spawn:characterSpawned", function() {
    var _ref = admin_async_to_generator(function(pCharacterId) {
        var cb;
        return admin_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        Procedures.execute("np-vehicles:admin:getTraffic")
                    ];
                case 1:
                    cb = _state.sent();
                    if (cb) {
                        emit("np-vehicles:toggleTraffic", cb);
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return function(pCharacterId) {
        return _ref.apply(this, arguments);
    };
}());
on("np-vehicles:toggleTraffic", function(pValue) {
    if (pValue) {
        TrafficThread.start();
    } else {
        TrafficThread.stop();
    }
});
onNet("np-vehicles:admin:toggleTraffic", function(pValue) {
    if (pValue) {
        TrafficThread.start();
    } else {
        TrafficThread.stop();
    }
});

;// CONCATENATED MODULE: ./src/client/controllers/threads/aircraft.ts
function aircraft_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function aircraft_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                aircraft_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                aircraft_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function aircraft_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var AircraftThread = new Thread(/*#__PURE__*/ aircraft_async_to_generator(function() {
    return aircraft_ts_generator(this, function(_state) {
        this.data.bodyHealth = GetVehicleBodyHealth(this.data.vehicle);
        if (this.data.bodyHealth <= 100) {
            SetVehicleBodyHealth(this.data.vehicle, 120);
        }
        return [
            2
        ];
    });
}), 100);
AircraftThread.addHook("preStart", function() {
    this.data.vehicle = CurrentVehicle;
    this.data.seat = CurrentSeat;
    this.data.isAircraft = IsAnAircraft(this.data.vehicle);
    if (this.data.isAircraft !== true) {
        return this.abort();
    }
});
function IsAnAircraft(pVehicle) {
    var vehicleClass = GetVehicleClass(pVehicle);
    return vehicleClass === 15 || vehicleClass === 16;
}

;// CONCATENATED MODULE: ./src/client/controllers/systems/pursuitModes/pursuitData.ts
function pursuitData_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function pursuitData_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                pursuitData_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                pursuitData_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function pursuitData_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var PursuitModels = new Map();
var PursuitPresets = new Map();
function InitPursuitModeData() {
    return _InitPursuitModeData.apply(this, arguments);
}
function _InitPursuitModeData() {
    _InitPursuitModeData = pursuitData_async_to_generator(function() {
        var config;
        return pursuitData_ts_generator(this, function(_state) {
            config = config_GetModuleConfig("np-vehicles:pursuitModes");
            if (config === undefined) return [
                2
            ];
            PursuitPresets = new Map(config.presets.map(function(preset) {
                return [
                    preset.id,
                    preset.modes
                ];
            }));
            PursuitModels = new Map(config.vehicles.map(function(vehicle) {
                return [
                    GetHashKey(vehicle.model),
                    vehicle.preset
                ];
            }));
            return [
                2
            ];
        });
    });
    return _InitPursuitModeData.apply(this, arguments);
}
on("np-config:configLoaded", function() {
    var _ref = pursuitData_async_to_generator(function(pConfigId) {
        return pursuitData_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (pConfigId !== "np-vehicles:pursuitModes") return [
                        2
                    ];
                    return [
                        4,
                        InitPursuitModeData()
                    ];
                case 1:
                    _state.sent();
                    RefreshPursuitMode();
                    return [
                        2
                    ];
            }
        });
    });
    return function(pConfigId) {
        return _ref.apply(this, arguments);
    };
}());
function IsPursuitModel(pModelHash) {
    return PursuitModels.has(pModelHash);
}
function GetPursuitModelPreset(pModelHash) {
    var preset = PursuitModels.get(pModelHash);
    if (preset === undefined) return;
    return PursuitPresets.get(preset);
}

;// CONCATENATED MODULE: ./src/client/controllers/systems/pursuitModes/pursuitController.ts
function pursuitController_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function pursuitController_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                pursuitController_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                pursuitController_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function pursuitController_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}






function InitPursuitController() {
    return _InitPursuitController.apply(this, arguments);
}
function _InitPursuitController() {
    _InitPursuitController = pursuitController_async_to_generator(function() {
        return pursuitController_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitPursuitController.apply(this, arguments);
}
function ApplyPursuitPresetMode(pVehicle, pMode) {
    SetMods(pVehicle, pMode.mods);
    var _pMode_appearance;
    SetVehicleAppearance(pVehicle, (_pMode_appearance = pMode.appearance) !== null && _pMode_appearance !== void 0 ? _pMode_appearance : {});
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = pMode.handling[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var handling = _step.value;
            handling_SetHandlingContextMultiplier(pVehicle, handling.field, "pursuitMode", "multiplier", handling.multiplier, 2);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    handling_ApplyHandlingMultipliers(pVehicle);
}
function CyclePursuitMode() {
    if (!driver_DriverThread.isActive || driver_DriverThread.data.isPursuitVehicle !== true) return;
    var data = driver_DriverThread.data;
    var presetModes = data.pursuitPreset;
    if (presetModes === undefined) return;
    presetModes[data.pursuitMode + 1] ? ++data.pursuitMode : data.pursuitMode = 0;
    var mode = data.pursuitPreset[data.pursuitMode];
    if (mode === undefined) {
        return console.error("Invalid Pursuit Mode");
    }
    DecorSetInt(data.vehicle, "Vehicle:PursuitMode", data.pursuitMode);
    ApplyPursuitPresetMode(data.vehicle, mode);
    emit("np-vehicles:pursuitMode", true, data.pursuitMode, data.pursuitPreset.length);
    DoLongHudText("Pursuit Mode: ".concat(mode.name), 1);
}
function RefreshPursuitMode() {
    if (!driver_DriverThread.isActive || driver_DriverThread.data.isPursuitVehicle !== true) return;
    var data = driver_DriverThread.data;
    data.pursuitPreset = GetPursuitModelPreset(data.vehicleModel);
    var mode = data.pursuitPreset[data.pursuitMode];
    ApplyPursuitPresetMode(data.vehicle, mode);
}
driver_DriverThread.addHook("preStart", function() {
    this.data.isPursuitVehicle = IsPursuitModel(this.data.vehicleModel);
});
driver_DriverThread.addHook("afterStart", function() {
    if (this.data.isPursuitVehicle !== true) return;
    this.data.pursuitPreset = GetPursuitModelPreset(this.data.vehicleModel);
    this.data.pursuitMode = DecorGetInt(this.data.vehicle, "Vehicle:PursuitMode");
    var mode = this.data.pursuitPreset[this.data.pursuitMode];
    ApplyPursuitPresetMode(this.data.vehicle, mode);
    emit("np-vehicles:pursuitMode", true, this.data.pursuitMode, this.data.pursuitPreset.length);
});
driver_DriverThread.addHook("afterStop", function() {
    if (this.data.isPursuitVehicle !== true) return;
    this.data.isPursuitVehicle = undefined;
    this.data.pursuitPreset = undefined;
    this.data.pursuitMode = undefined;
    emit("np-vehicles:pursuitMode", false);
});

;// CONCATENATED MODULE: ./src/client/controllers/threads/nitro.ts
function nitro_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function nitro_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                nitro_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                nitro_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function nitro_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}









function InitNitroThread() {
    return _InitNitroThread.apply(this, arguments);
}
function _InitNitroThread() {
    _InitNitroThread = nitro_async_to_generator(function() {
        return nitro_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitNitroThread.apply(this, arguments);
}
var NitroThread = new Thread(/*#__PURE__*/ nitro_async_to_generator(function() {
    return nitro_ts_generator(this, function(_state) {
        return [
            2
        ];
    });
}), 1000, "tick");
// Stuff that can be tweak on run time
var nitro_Config = {
    mode: "Purge",
    flowRate: 10,
    blowoutTickThreshold: 15,
    blowoutPercentage: 5,
    blowoutSpeed: 95,
    highBurstSpeed: 15,
    lowBurstSpeed: 100,
    tractionLossSpeed: 65,
    tractionLossMultiplier: 5,
    highBurst: 0.8,
    lowBurst: 0.1
};
NitroThread.addHook("active", function() {
    if (!this.data.driver || --this.data.nitroLevel <= 0) return this.stop();
    var speed = this.data.driver.speed * 2.236936;
    var temperature = this.data.driver.temperature;
    if (this.data.mode === "Boost" && speed > nitro_Config.highBurstSpeed) {
        var burstMode = speed >= nitro_Config.lowBurstSpeed ? nitro_Config.lowBurst : nitro_Config.highBurst;
        var multiplier = 1.0 + burstMode * (nitro_Config.flowRate * 10) / 100;
        if (!this.data.nosDisabled) {
            if (this.data.multiplier !== multiplier) {
                this.data.multiplier = multiplier;
                handling_SetHandlingContextMultiplier(this.data.vehicle, "fInitialDriveForce", "nitro", "multiplier", multiplier, 2);
                handling_ApplyHandlingMultipliers(this.data.vehicle, "fInitialDriveForce");
            }
            if (speed < 65) {
                this.data.tractionLoss = true;
                var tractionLoss = (nitro_Config.tractionLossSpeed - speed) / nitro_Config.tractionLossSpeed * nitro_Config.tractionLossMultiplier + multiplier * nitro_Config.tractionLossMultiplier;
                handling_SetHandlingContextMultiplier(this.data.vehicle, "fLowSpeedTractionLossMult", "nitro", "multiplier", tractionLoss, 2);
                handling_ApplyHandlingMultipliers(this.data.vehicle, "fLowSpeedTractionLossMult");
            } else if (this.data.tractionLoss) {
                this.data.tractionLoss = false;
                handling_ResetHandlingContextMultipier(this.data.vehicle, "fLowSpeedTractionLossMult", "nitro");
                handling_ApplyHandlingMultipliers(this.data.vehicle, "fLowSpeedTractionLossMult");
            }
        }
        ++this.data.driver.temperature;
    }
    if (speed > nitro_Config.blowoutSpeed && temperature > nitro_Config.blowoutTickThreshold) {
        var random = GetRandom(100);
        var vehicle = this.data.vehicle;
        var health = GetVehicleEngineHealth(vehicle);
        if (health <= 0 || random <= nitro_Config.blowoutPercentage) {
            SetVehicleEngineHealth(vehicle, 0.0);
            TurnOffEngine(vehicle);
            tools_PlayEntitySound(vehicle, "Engine_fail", "DLC_PILOT_ENGINE_FAILURE_SOUNDS", 5000);
        } else if (random > 25) {
            SetVehicleEngineHealth(vehicle, health - 50);
            tools_PlayEntitySound(vehicle, "Landing_Tone", "DLC_PILOT_ENGINE_FAILURE_SOUNDS", 1000);
        }
    }
    this.delay = 1500 - nitro_Config.flowRate * 100;
});
driver_DriverThread.addHook("afterStart", /*#__PURE__*/ nitro_async_to_generator(function() {
    return nitro_ts_generator(this, function(_state) {
        NitroThread.data.driver = this.data;
        NitroThread.data.vehicle = CurrentVehicle;
        NitroThread.data.netId = NetworkGetNetworkIdFromEntity(this.data.vehicle);
        NitroThread.data.exhausts = GetVehicleExhausts(this.data.vehicle);
        return [
            2
        ];
    });
}));
driver_DriverThread.addHook("afterStop", /*#__PURE__*/ nitro_async_to_generator(function() {
    return nitro_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    NitroThread.stop()
                ];
            case 1:
                _state.sent();
                NitroThread.data.driver = null;
                NitroThread.data.vehicle = null;
                NitroThread.data.netId = null;
                NitroThread.data.exhausts = null;
                return [
                    2
                ];
        }
    });
}));
NitroThread.addHook("preStart", function() {
    this.data.nitroLevel = GetNitroLevel(this.data.vehicle);
    if (!this.data.vehicle || this.data.nitroLevel <= 0) return this.abort();
    this.data.mode = nitro_Config.mode;
    this.data.nosDisabled = GetResourceConfig("nosDisabled");
    this.data.particleId = !this.data.particleId ? 1 : ++this.data.particleId;
    SetVehicleBoostActive(this.data.vehicle, true);
    if (this.data.mode === "Purge") {
        emitNet("fx:purgeL", this.data.particleId, this.data.netId, nitro_Config.flowRate);
        emitNet("fx:purgeR", this.data.particleId, this.data.netId, nitro_Config.flowRate);
    } else if (this.data.mode === "Boost") {
        emitNet("fx:nitroSound", this.data.particleId, this.data.netId, this.data.exhausts, GetEntityPitch(CurrentVehicle));
        emitNet("fx:nitrous", this.data.particleId, this.data.netId, this.data.exhausts, GetEntityPitch(CurrentVehicle), nitro_Config.flowRate);
    }
    emit("noshud", this.data.nitroLevel, true);
    emit("vehicles:nitro:started");
});
NitroThread.addHook("preStop", function() {
    this.data.multiplier = null;
    var nitroLevel = GetNitroLevel(this.data.vehicle);
    var nitroUsed = nitroLevel - this.data.nitroLevel;
    SetVehicleBoostActive(this.data.vehicle, false);
    if (!this.data.nosDisabled) {
        handling_ResetHandlingContextMultipier(this.data.vehicle, "fInitialDriveForce", "nitro");
        handling_ApplyHandlingMultipliers(this.data.vehicle, "fInitialDriveForce");
        handling_ResetHandlingContextMultipier(this.data.vehicle, "fLowSpeedTractionLossMult", "nitro");
        handling_ApplyHandlingMultipliers(this.data.vehicle, "fLowSpeedTractionLossMult");
    }
    if (this.data.mode === "Purge") {
        emitNet("fx:stopToggle", this.data.particleId, "purgeL");
        emitNet("fx:stopToggle", this.data.particleId, "purgeR");
    } else if (this.data.mode === "Boost") {
        emitNet("fx:stopToggle", this.data.particleId, "nitro");
        emitNet("fx:stopToggle", this.data.particleId, "nitroSound");
    }
    emit("vehicles:nitro:stopped");
    emit("noshud", this.data.nitroLevel, false);
    emitNet("np:vehicles:nitroUsed", this.data.netId, nitroUsed);
});
function StartVehicleNitro() {
    if (!CurrentVehicle || CurrentSeat !== -1 || IsThrottled("nitro")) return;
    NitroThread.start();
}
function StopVehicleNitro() {
    if (!NitroThread.isActive) return;
    NitroThread.stop();
    Throttle("nitro", nitro_Config.mode === "Boost" ? 1500 : 150);
}
function ToggleNitroMode() {
    if (CurrentSeat !== -1) return;
    if (!VehicleHasNitro(CurrentVehicle)) {
        return CyclePursuitMode();
    }
    if (NitroThread.isActive) StopVehicleNitro();
    nitro_Config.mode = nitro_Config.mode === "Boost" ? "Purge" : "Boost";
    DoLongHudText("Nitro mode: ".concat(nitro_Config.mode), 1);
}
function IncreaseNitroFlow() {
    if (CurrentSeat !== -1 || !VehicleHasNitro(CurrentVehicle)) return;
    nitro_Config.flowRate + 1 <= 10 ? nitro_Config.flowRate++ : 10;
    emit("DoLongHudText", "Nitrous flow rate: ".concat(nitro_Config.flowRate), 1, 12000, {
        i18n: [
            "Nitrous flow rate"
        ]
    });
}
function DecreaseNitroFlow() {
    if (CurrentSeat !== -1 || !VehicleHasNitro(CurrentVehicle)) return;
    nitro_Config.flowRate - 1 >= 1 ? nitro_Config.flowRate-- : 1;
    emit("DoLongHudText", "Nitrous flow rate: ".concat(nitro_Config.flowRate), 1, 12000, {
        i18n: [
            "Nitrous flow rate"
        ]
    });
}
// Nitro related Keybinds
RegisterCommand("+useNitro", StartVehicleNitro, false);
RegisterCommand("-useNitro", StopVehicleNitro, false);
RegisterCommand("+increaseNitroFlow", IncreaseNitroFlow, false);
RegisterCommand("-increaseNitroFlow", function() {}, false);
RegisterCommand("+decreaseNitroFlow", DecreaseNitroFlow, false);
RegisterCommand("-decreaseNitroFlow", function() {}, false);
RegisterCommand("+toggleNitroMode", ToggleNitroMode, false);
RegisterCommand("-toggleNitroMode", function() {}, false);
setImmediate(function() {
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Toggle Nos / Purge Mode", "+toggleNitroMode", "-toggleNitroMode");
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Nos Flow Increase", "+increaseNitroFlow", "-increaseNitroFlow");
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Nos Flow Decrease", "+decreaseNitroFlow", "-decreaseNitroFlow");
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Activate Nos", "+useNitro", "-useNitro", "LSHIFT");
});

;// CONCATENATED MODULE: ../../npx/lib/server/index.ts
// @ts-ignore
var server_NPX = globalThis.NPX;
var server_Utils = server_NPX.Utils;
var Base = server_NPX.Base;
var server_Events = server_NPX.Events;
var server_Procedures = server_NPX.Procedures;
var DB = server_NPX.DB;
var API = server_NPX.API;
var Tebex = server_NPX.Tebex;
var Discord = server_NPX.Discord;
var Hooks = server_NPX.Hooks;
/* harmony default export */ const server = ((/* unused pure expression or super */ null && (server_NPX)));

;// CONCATENATED MODULE: ./src/client/utils/business.ts
function business_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function business_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                business_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                business_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function business_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

var IsEmployeeAt = server_Utils.cacheableMap(function() {
    var _ref = business_async_to_generator(function(pCtx, pKey) {
        var result;
        return business_ts_generator(this, function(_state) {
            result = __webpack_require__.g.exports["np-business"].IsEmployedAt(pKey);
            return [
                2,
                [
                    true,
                    result
                ]
            ];
        });
    });
    return function(pCtx, pKey) {
        return _ref.apply(this, arguments);
    };
}(), {
    timeToLive: 60 * 1000
});
var HasPermission = server_Utils.cacheableMap(function() {
    var _ref = business_async_to_generator(function(pCtx, pKey, business, permission) {
        var result;
        return business_ts_generator(this, function(_state) {
            result = __webpack_require__.g.exports["np-business"].HasPermission(business, permission);
            return [
                2,
                [
                    true,
                    result
                ]
            ];
        });
    });
    return function(pCtx, pKey, business, permission) {
        return _ref.apply(this, arguments);
    };
}(), {
    timeToLive: 60 * 1000
});

;// CONCATENATED MODULE: ./src/client/controllers/systems/nitro.ts
function systems_nitro_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function systems_nitro_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                systems_nitro_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                systems_nitro_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function systems_nitro_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




function InitNitro() {
    return _InitNitro.apply(this, arguments);
}
function _InitNitro() {
    _InitNitro = systems_nitro_async_to_generator(function() {
        return systems_nitro_ts_generator(this, function(_state) {
            __webpack_require__.g.exports["np-polytarget"].AddBoxZone("nitro_refill", {
                x: 137.51,
                y: -3051.41,
                z: 7.04
            }, 0.8, 0.6, {
                heading: 30,
                minZ: 5.84,
                maxZ: 7.44,
                data: {
                    id: "tuner_refill",
                    business: "tuner"
                }
            });
            __webpack_require__.g.exports["np-polytarget"].AddBoxZone("nitro_refill", {
                x: 1185.08,
                y: 2636.82,
                z: 37.76
            }, 0.6, 0.6, {
                heading: 4,
                minZ: 36.76,
                maxZ: 38.16,
                data: {
                    id: "harmony_refill",
                    business: "harmony_repairs"
                }
            });
            __webpack_require__.g.exports["np-polytarget"].AddBoxZone("nitro_refill", {
                x: 831.17,
                y: -824.1,
                z: 26.34
            }, 0.8, 0.6, {
                heading: 0,
                minZ: 25.34,
                maxZ: 26.54,
                data: {
                    id: "ottos_auto",
                    business: "ottos_auto"
                }
            });
            __webpack_require__.g.exports["np-interact"].AddPeekEntryByPolyTarget("nitro_refill", [
                {
                    id: "np-vehicles:client:refillNoS",
                    event: "np-vehicles:client:refillNoS",
                    icon: "fill",
                    label: "Refill Nitro (2 GNE)"
                }
            ], {
                distance: {
                    radius: 3.5
                },
                isEnabled: function(pEntity, pContext) {
                    var _pContext_zones_nitro_refill, _pContext_zones, _pContext;
                    var business = (_pContext = pContext) === null || _pContext === void 0 ? void 0 : (_pContext_zones = _pContext.zones) === null || _pContext_zones === void 0 ? void 0 : (_pContext_zones_nitro_refill = _pContext_zones.nitro_refill) === null || _pContext_zones_nitro_refill === void 0 ? void 0 : _pContext_zones_nitro_refill.business;
                    return business && IsEmployeeAt.get(business);
                }
            });
            return [
                2
            ];
        });
    });
    return _InitNitro.apply(this, arguments);
}
function VehicleHasNitro(pVehicle) {
    var nitro = GetVehicleMetadata(pVehicle, "nitro");
    return nitro ? nitro > 0 : false;
}
function GetNitroLevel(pVehicle) {
    var nitro = GetVehicleMetadata(pVehicle, "nitro");
    return typeof nitro === "number" ? nitro : 0;
}
function IsUsingNitro() {
    return NitroThread.isActive;
}
function RefillNOSCan(pAmount) {
    return _RefillNOSCan.apply(this, arguments);
}
function _RefillNOSCan() {
    _RefillNOSCan = systems_nitro_async_to_generator(function(pAmount) {
        var _data, hasNitroCan, itemInfo, _JSON_parse_Status, status, nosQty, totalPrice, accepted, result, data, _data1;
        return systems_nitro_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!pAmount) return [
                        2,
                        false
                    ];
                    hasNitroCan = __webpack_require__.g.exports["inventory"].hasEnoughOfItem("nitrous", 1);
                    if (!hasNitroCan) {
                        DoLongHudText("You need a Nitrous can to refill the Nitro.");
                        return [
                            2,
                            false
                        ];
                    }
                    itemInfo = __webpack_require__.g.exports["inventory"].GetInfoForFirstItemOfName("nitrous");
                    if (!itemInfo) return [
                        2
                    ];
                    status = (_JSON_parse_Status = JSON.parse(itemInfo.information).Status) !== null && _JSON_parse_Status !== void 0 ? _JSON_parse_Status : "Filled";
                    if (status === "Filled") {
                        DoLongHudText("Nitrous can is already full.", 2);
                        return [
                            2,
                            false
                        ];
                    }
                    nosQty = itemInfo.quantity;
                    totalPrice = nosQty * 2;
                    return [
                        4,
                        DoPhoneConfirmation("Nitrous Refill (".concat(nosQty, " cans)"), "Will cost ".concat(totalPrice, " GNE"), "file-invoice-dollar")
                    ];
                case 1:
                    accepted = _state.sent();
                    if (!accepted) return [
                        2,
                        false
                    ];
                    emit("animation:PlayAnimation", "type");
                    return [
                        4,
                        Taskbar(5000, "Refill NOS Can")
                    ];
                case 2:
                    result = _state.sent();
                    ClearPedTasks(PlayerPedId());
                    if (result !== 100) return [
                        2
                    ];
                    return [
                        4,
                        RPC.execute("np-vehicles:chargeForNOSRefill", totalPrice)
                    ];
                case 3:
                    data = _state.sent();
                    if (!((_data = data) === null || _data === void 0 ? void 0 : _data.success)) {
                        ;
                        DoLongHudText((_data1 = data) === null || _data1 === void 0 ? void 0 : _data1.message, 2);
                        return [
                            2,
                            false
                        ];
                    }
                    //FIXME: Convert to new inventory
                    emit("inventory:updateItem", "nitrous", itemInfo.slot, JSON.stringify({
                        Status: "Filled"
                    }));
                    DoLongHudText("Successfully refilled nitrous can.");
                    return [
                        2,
                        true
                    ];
            }
        });
    });
    return _RefillNOSCan.apply(this, arguments);
}
__webpack_require__.g.exports("GetNitroLevel", GetNitroLevel);
__webpack_require__.g.exports("IsUsingNitro", IsUsingNitro);
__webpack_require__.g.exports("VehicleHasNitro", VehicleHasNitro);
__webpack_require__.g.exports("RefillNOSCan", RefillNOSCan);

;// CONCATENATED MODULE: ./src/client/controllers/systems/invincible.ts


var VehicleGodMode = false;
var InvincibleModels = new Set();
function Init(pConfig) {
    var _config;
    var config = pConfig !== null && pConfig !== void 0 ? pConfig : GetResourceConfig();
    if (!((_config = config) === null || _config === void 0 ? void 0 : _config.invincibleModels)) return;
    InvincibleModels.clear();
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = config.invincibleModels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var model = _step.value;
            InvincibleModels.add(GetHashKey(model));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
on("np-config:configLoaded", function(pConfigId, pConfig) {
    if (pConfigId !== "np-vehicles") return;
    Init(pConfig);
});
function IsModelInvincible(pVehicle) {
    var model = GetEntityModel(pVehicle);
    return InvincibleModels.has(model);
}
function SeVehicleGodMode(pEnabled) {
    VehicleGodMode = pEnabled;
    if (!DriverThread.isActive || DriverThread.data.isInvincible && IsModelInvincible(DriverThread.data.vehicle)) return;
    DriverThread.data.isInvincible = pEnabled;
    SetEntityInvincible(DriverThread.data.vehicle, pEnabled);
}
driver_DriverThread.addHook("preStart", function() {
    this.data.isInvincible = IsModelInvincible(this.data.vehicle) || VehicleGodMode;
    SetEntityInvincible(this.data.vehicle, this.data.isInvincible);
});
driver_DriverThread.addHook("active", function() {
    if (!this.data.isInvincible) return;
    if (this.data.bodyHealth < 1000 || this.data.health < 1000) {
        SetVehicleBodyHealth(this.data.vehicle, 1000);
        SetVehicleEngineHealth(this.data.vehicle, 1000);
        SetVehicleFixed(this.data.vehicle);
        SetVehicleDeformationFixed(this.data.vehicle);
    }
    if (!this.data.trailer) return;
    if (this.data.trailerBodyHealth < 1000 || this.data.trailerHealth < 1000) {
        SetVehicleBodyHealth(this.data.trailer, 1000);
        SetVehicleEngineHealth(this.data.trailer, 1000);
        SetVehicleFixed(this.data.trailer);
        SetVehicleDeformationFixed(this.data.trailer);
    }
});

;// CONCATENATED MODULE: ./src/client/controllers/systems/selfdriving.ts
function selfdriving_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function selfdriving_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function selfdriving_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function selfdriving_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                selfdriving_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                selfdriving_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function selfdriving_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function selfdriving_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function selfdriving_sliced_to_array(arr, i) {
    return selfdriving_array_with_holes(arr) || selfdriving_iterable_to_array_limit(arr, i) || selfdriving_unsupported_iterable_to_array(arr, i) || selfdriving_non_iterable_rest();
}
function selfdriving_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return selfdriving_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return selfdriving_array_like_to_array(o, minLen);
}
function selfdriving_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}





var VehicleModels = new Set();
var ludicrousMode = false;
function selfdriving_Init() {
    var config = config_GetModuleConfig("np-vehicles", "selfDrivingModels");
    if (config === undefined) return;
    SetUpVehicleModels(config);
}
var GetMaxSpeed = function(pVehicle) {
    if (ludicrousMode) {
        return GetVehicleEstimatedMaxSpeed(pVehicle);
    } else {
        var model = GetEntityModel(pVehicle);
        return GetVehicleModelMaxSpeed(model);
    }
};
function StartSelfDrive() {
    var pDriveMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
    var vehicle = CurrentVehicle;
    if (vehicle === undefined || !driver_DriverThread.isActive) return;
    var coords = GetWaypointCoords();
    var modelMaxSpeed = GetMaxSpeed(vehicle);
    var playerPed = PlayerPedId();
    ClearPedTasks(playerPed);
    SetDriverAbility(playerPed, 1.0);
    SetDriverAggressiveness(playerPed, ludicrousMode ? 1.0 : 0.0);
    if (ludicrousMode) {
        SetDriveTaskMaxCruiseSpeed(playerPed, 120.0);
    }
    if (!driver_DriverThread.data.selfDriving) {
        emit("np-vehicles:autopilot:status", "started");
        emit("InteractSound_CL:PlayOnOne", "autopilot-on", 0.4);
    }
    driver_DriverThread.data.selfDriving = true;
    driver_DriverThread.data.selfDrivingWander = false;
    driver_DriverThread.data.selfDrivingWaypoint = false;
    driver_DriverThread.data.selfDrivingWaypointCoords = undefined;
    driver_DriverThread.data.selfDrivingMode = pDriveMode;
    if (coords === undefined) {
        driver_DriverThread.data.selfDrivingWander = true;
        return TaskVehicleDriveWander(playerPed, vehicle, modelMaxSpeed, pDriveMode);
    }
    var _coords = selfdriving_sliced_to_array(coords, 3), x = _coords[0], y = _coords[1], z = _coords[2];
    driver_DriverThread.data.selfDrivingWaypoint = true;
    driver_DriverThread.data.selfDrivingWaypointCoords = coords;
    return TaskVehicleDriveToCoordLongrange(playerPed, vehicle, x, y, z, modelMaxSpeed, pDriveMode, 8.0);
}
function StopSelfDrive() {
    var selfDriving = driver_DriverThread.data.selfDriving;
    if (!selfDriving) return;
    emit("np-vehicles:autopilot:status", "stopped");
    emit("InteractSound_CL:PlayOnOne", "autopilot-off", 0.4);
    driver_DriverThread.data.selfDriving = false;
    driver_DriverThread.data.selfDrivingWander = false;
    driver_DriverThread.data.selfDrivingWaypoint = false;
    ClearPedTasks(PlayerPedId());
}
function AbortSelfDrive() {
    var selfDriving = driver_DriverThread.data.selfDriving;
    if (!selfDriving) return;
    emit("np-vehicles:autopilot:status", "aborted");
    emit("InteractSound_CL:PlayOnOne", "autopilot-error", 0.4);
    driver_DriverThread.data.selfDriving = false;
    driver_DriverThread.data.selfDrivingWander = false;
    driver_DriverThread.data.selfDrivingWaypoint = false;
    ClearPedTasks(PlayerPedId());
}
function SetUpVehicleModels(modelList) {
    var list = new Set();
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = modelList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var model = _step.value;
            var modelHash = GetHashKey(model);
            list.add(modelHash);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    VehicleModels = list;
}
on("np-config:configLoaded", function(configId, config) {
    if (configId !== "np-vehicles") return;
    var selfDrivingModels = config.selfDrivingModels;
    if (!selfDrivingModels) return;
    SetUpVehicleModels(selfDrivingModels);
});
driver_DriverThread.addHook("preStart", function() {
    this.data.selfDrivingTick = 0;
    if (!this.data.selfDriving) return;
    StopSelfDrive();
});
driver_DriverThread.addHook("preStop", function() {
    if (!this.data.selfDriving) return;
    StopSelfDrive();
});
driver_DriverThread.addHook("active", function() {
    if (!this.data.selfDrivingWaypoint) return;
    var activeWaypoint = this.data.selfDrivingWaypointCoords;
    var distance = GetDistance(GetEntityCoords(PlayerPedId(), false), activeWaypoint);
    if (distance > 50 || IsWaypointActive()) return;
    AbortSelfDrive();
});
driver_DriverThread.addHook("active", function() {
    var _currentCoords, _activeCoords, _currentCoords1, _activeCoords1, _currentCoords2, _activeCoords2, _currentCoords3, _activeCoords3;
    if (!this.data.selfDriving) return;
    var tick = ++this.data.selfDrivingTick;
    if (tick < 5) return;
    this.data.selfDrivingTick = 0;
    var currentCoords = GetWaypointCoords();
    var activeCoords = this.data.selfDrivingWaypointCoords;
    if (((_currentCoords = currentCoords) === null || _currentCoords === void 0 ? void 0 : _currentCoords[0]) === ((_activeCoords = activeCoords) === null || _activeCoords === void 0 ? void 0 : _activeCoords[0]) && ((_currentCoords1 = currentCoords) === null || _currentCoords1 === void 0 ? void 0 : _currentCoords1[1]) === ((_activeCoords1 = activeCoords) === null || _activeCoords1 === void 0 ? void 0 : _activeCoords1[1])) return;
    if (activeCoords && !currentCoords || currentCoords && !activeCoords) {
        StartSelfDrive(this.data.selfDrivingMode);
    } else if (((_currentCoords2 = currentCoords) === null || _currentCoords2 === void 0 ? void 0 : _currentCoords2[0]) !== ((_activeCoords2 = activeCoords) === null || _activeCoords2 === void 0 ? void 0 : _activeCoords2[0]) || ((_currentCoords3 = currentCoords) === null || _currentCoords3 === void 0 ? void 0 : _currentCoords3[1]) !== ((_activeCoords3 = activeCoords) === null || _activeCoords3 === void 0 ? void 0 : _activeCoords3[1])) {
        StartSelfDrive(this.data.selfDrivingMode);
    }
});
var keybind = function() {
    var vehicle = CurrentVehicle;
    if (vehicle === undefined || !driver_DriverThread.isActive) return false;
    var model = GetEntityModel(vehicle);
    if (!VehicleModels.has(model)) return false;
    ClearPedTasks(PlayerPedId());
    driver_DriverThread.data.selfDriving ? StopSelfDrive() : StartSelfDrive(ludicrousMode ? 787212 : 7);
    return true;
};
RegisterCommand("+autopilot", keybind, false);
RegisterCommand("-autopilot", function() {}, false);
RegisterCommand("autopilot:ludicrousMode", /*#__PURE__*/ selfdriving_async_to_generator(function() {
    var _ref, isAdmin;
    return selfdriving_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    RPC.execute("np:admin:isAdmin")
                ];
            case 1:
                _ref = selfdriving_sliced_to_array.apply(void 0, [
                    _state.sent(),
                    1
                ]), isAdmin = _ref[0];
                if (isAdmin) {
                    ludicrousMode = !ludicrousMode;
                    console.log("Ludicrous Mode is now: ".concat(ludicrousMode ? "on" : "off"));
                }
                return [
                    2
                ];
        }
    });
}), false);
setImmediate(function() {
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Toggle Autopilot", "+autopilot", "-autopilot");
});

;// CONCATENATED MODULE: ./src/client/controllers/events.ts
function events_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function events_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function events_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function events_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function events_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function events_sliced_to_array(arr, i) {
    return events_array_with_holes(arr) || events_iterable_to_array_limit(arr, i) || events_unsupported_iterable_to_array(arr, i) || events_non_iterable_rest();
}
function events_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return events_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return events_array_like_to_array(o, minLen);
}
function events_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

























function InitEvents() {
    InitAdminEvents();
    return true;
}
RPC.register("SetVehicleNumberPlateText", function(pNetId, pPlate) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return SetVehicleNumberPlateText(vehicle, pPlate);
    }
});
RPC.register("GetVehicleMod", function(pNetId, pMod) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return GetMod(vehicle, pMod);
    }
});
RPC.register("GetVehicleMods", function(pNetId) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return GetMods(vehicle);
    }
});
client_RPC.register("GetVehicleMods", function() {
    var _ref = events_async_to_generator(function(pNetId) {
        var vehicle;
        return events_ts_generator(this, function(_state) {
            vehicle = NetworkGetEntityFromNetworkId(pNetId);
            if (DoesEntityExist(vehicle)) {
                return [
                    2,
                    GetMods(vehicle)
                ];
            }
            return [
                2
            ];
        });
    });
    return function(pNetId) {
        return _ref.apply(this, arguments);
    };
}());
RPC.register("SetVehicleMod", function(pNetId, pMod, pValue) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return SetMod(vehicle, pMod, pValue);
    }
});
RPC.register("SetVehicleMods", function(pNetId, pMods) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return SetMods(vehicle, pMods);
    }
});
RPC.register("GetVehicleColor", function(pNetId, pType) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return GetVehicleColor(vehicle, pType);
    }
});
RPC.register("SetVehicleColor", function(pNetId, pType, pValue) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return SetVehicleColor(vehicle, pType, pValue);
    }
});
RPC.register("SetVehicleColors", function(pNetId, pColors) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return SetVehicleColors(vehicle, pColors);
    }
});
RPC.register("GetVehicleAdditional", function(pNetId, pType) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return GetVehicleAdditional(vehicle, pType);
    }
});
RPC.register("SetVehicleAdditional", function(pNetId, pType, pValue) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return SetVehicleAdditional(vehicle, pType, pValue);
    }
});
RPC.register("GetVehicleAppearance", function(pNetId) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return GetVehicleAppearance(vehicle);
    }
});
client_RPC.register("GetVehicleAppearance", function() {
    var _ref = events_async_to_generator(function(pNetId) {
        var vehicle;
        return events_ts_generator(this, function(_state) {
            vehicle = NetworkGetEntityFromNetworkId(pNetId);
            if (DoesEntityExist(vehicle)) {
                return [
                    2,
                    GetVehicleAppearance(vehicle)
                ];
            }
            return [
                2
            ];
        });
    });
    return function(pNetId) {
        return _ref.apply(this, arguments);
    };
}());
RPC.register("SetVehicleAppearance", function(pNetId, pData) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return SetVehicleAppearance(vehicle, pData);
    }
});
RPC.register("FetchVehicleDamage", function(pNetId) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return FetchVehicleDamage(vehicle);
    }
});
RPC.register("RestoreVehicleDamage", function(pNetId, pDamage) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (DoesEntityExist(vehicle)) {
        return RestoreVehicleDamage(vehicle, pDamage);
    }
});
RPC.register("GetVehicleClassFromName", function(pModel) {
    var model = typeof pModel === "string" ? GetHashKey(pModel) : pModel;
    return GetVehicleClassFromName(model);
});
RPC.register("GetVehicleName", function(pModel) {
    var model = typeof pModel === "string" ? GetHashKey(pModel) : pModel;
    return GetLabelText(GetDisplayNameFromVehicleModel(model));
});
onNet("np:vehicles:setKeys", function(pKeys) {
    if (!pKeys) return;
    Keys.clear();
    pKeys.forEach(function(key) {
        return Keys.add(key);
    });
    ClearGarageCache(null, true);
});
onNet("np:vehicles:addKey", function(pVIN) {
    if (!Keys.has(pVIN)) Keys.add(pVIN);
    ClearGarageCache(null, true);
});
onNet("np:vehicles:removeKey", function(pVIN) {
    if (Keys.has(pVIN)) Keys["delete"](pVIN);
    ClearGarageCache(null, true);
});
onNet("np:vehicles:addSharedKeys", function(pVINs) {
    pVINs.forEach(function(vin) {
        if (!Keys.has(vin)) Keys.add(vin);
    });
    ClearGarageCache(null, true);
});
onNet("np:vehicles:removeSharedKeys", function(pVINs) {
    pVINs.forEach(function(vin) {
        if (Keys.has(vin)) Keys["delete"](vin);
    });
    ClearGarageCache(null, true);
});
onNet("np:vehicles:addGarage", function(pGarage) {
    AddGarage(pGarage.garage_id, pGarage);
});
onNet("np:vehicles:removeGarage", function(pGarageId) {
    RemoveGarage(pGarageId);
});
onNet("np:vehicles:updateGarage", function(pGarage) {
    AddGarage(pGarage.garage_id, pGarage);
});
onNet("np:vehicles:reloadGarage", function(pGarage) {
    ClearGarageCache(pGarage);
});
onNet("np:vehicles:parkingSpotUpdated", function(pGarageId, pSpotId, pChanges) {
    EditParkingSpot(pGarageId, pSpotId, pChanges);
});
onNet("np:vehicles:parkingSpotDeleted", function(pGarageId, pSpotId) {
    DeleteParkingSpot(pGarageId, pSpotId);
});
onNet("vehicle:swapSeat", function(pSeat) {
    return SwapVehicleSeat(pSeat);
});
onNet("vehicle:toggleEngine", function(pVehicle) {
    var vehicle = pVehicle ? pVehicle : GetVehiclePedIsIn(PlayerPedId(), false);
    var engineState = IsVehicleEngineOn(vehicle);
    if (engineState) {
        TurnOffEngine(vehicle);
    } else {
        TurnOnEngine(vehicle);
    }
});
onNet("vehicle:giveKey", function(pArgs, pVehicle) {
    var vehicle = pVehicle ? pVehicle : __webpack_require__.g.exports["np-target"].GetCurrentEntity();
    var playerPed = PlayerPedId();
    if (IsPedInAnyVehicle(playerPed, false)) {
        var currentVehicle = vehicle ? vehicle : GetVehiclePedIsIn(playerPed, false);
        var vehicleSeats = GetVehicleModelNumberOfSeats(GetEntityModel(currentVehicle));
        for(var i = -1; i < vehicleSeats - 1; i += 1){
            var ped = GetPedInVehicleSeat(currentVehicle, i);
            if (ped && ped !== playerPed) GiveVehicleKey(currentVehicle, GetPlayerServerId(NetworkGetPlayerIndexFromPed(ped)));
        }
    } else {
        var _GetClosestPlayer = events_sliced_to_array(GetClosestPlayer(), 2), player = _GetClosestPlayer[0], distance = _GetClosestPlayer[1];
        if (player && distance <= 5) {
            if (vehicle && vehicle !== 0) {
                GiveVehicleKey(vehicle, GetPlayerServerId(player));
            } else {
                emit("DoLongHudText", "Vehicle not found!", 2);
            }
        } else {
            emit("DoLongHudText", "No player near you!", 2);
        }
    }
});
onNet("vehicle:checkVIN", function() {
    var _ref = events_async_to_generator(function(pArgs, pVehicle) {
        var vehicleIdentifier, currentPlate, licensePlateData, vinOrigin, isVinScratched;
        return events_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!DoesEntityExist(pVehicle)) return [
                        3,
                        3
                    ];
                    vehicleIdentifier = GetVehicleIdentifier(pVehicle);
                    if (!vehicleIdentifier) return [
                        3,
                        2
                    ];
                    currentPlate = GetVehicleNumberPlateText(pVehicle).trim();
                    return [
                        4,
                        GetLicensePlate(vehicleIdentifier)
                    ];
                case 1:
                    licensePlateData = _state.sent();
                    vinOrigin = vehicleIdentifier.slice(1, 3);
                    isVinScratched = IsVinScratched(pVehicle);
                    if (isVinScratched) {
                        emit("chatMessage", "DISPATCH ", 2, "The VIN is scratched off.", "feed", false, {
                            i18n: [
                                "The VIN is scratched off"
                            ]
                        });
                    } else if (!licensePlateData.hasVehicleInfo || licensePlateData.hasVehicleInfo && licensePlateData.licensePlate === currentPlate) emit("chatMessage", "DISPATCH ", 2, "The plate does match the VIN! (".concat(vinOrigin, ")"), "feed", false, {
                        i18n: [
                            "The plate does match the VIN"
                        ]
                    });
                    else if (licensePlateData.hasVehicleInfo && licensePlateData.licensePlate !== currentPlate) emit("chatMessage", "DISPATCH ", 3, "The plate does not match the VIN! The original license plate is ".concat(licensePlateData.licensePlate), "feed", false, {
                        i18n: [
                            "The plate does not match the VIN! The original license plate is"
                        ]
                    });
                    return [
                        3,
                        3
                    ];
                case 2:
                    emit("chatMessage", "DISPATCH ", 3, "Can't find anything on this vehicle, not good. Report this to the Government", "feed", false, {
                        i18n: [
                            "Can't find anything on this vehicle, not good. Report this to the Government"
                        ]
                    });
                    _state.label = 3;
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return function(pArgs, pVehicle) {
        return _ref.apply(this, arguments);
    };
}());
onNet("vehicle:addFakePlate", function() {
    var _ref = events_async_to_generator(function(pArgs, pVehicle) {
        return events_ts_generator(this, function(_state) {
            SetVehicleFakeLicensePlate(pVehicle, true);
            return [
                2
            ];
        });
    });
    return function(pArgs, pVehicle) {
        return _ref.apply(this, arguments);
    };
}());
onNet("vehicle:removeFakePlate", function() {
    var _ref = events_async_to_generator(function(pArgs, pVehicle) {
        return events_ts_generator(this, function(_state) {
            SetVehicleFakeLicensePlate(pVehicle, false);
            return [
                2
            ];
        });
    });
    return function(pArgs, pVehicle) {
        return _ref.apply(this, arguments);
    };
}());
on("vehicle:storeVehicle", function(pArgs, pVehicle) {
    StoreVehicleInGarage(pVehicle);
});
onNet("vehicle:garageVehicleList", function(pArgs) {
    OpenGarageVehicleList(pArgs.nearby, pArgs.radius, pArgs.empty);
});
onNet("np:vehicles:sell", function() {
    var _ref = events_async_to_generator(function(pTargetId, pPrice) {
        var vehicleIdentifier;
        return events_ts_generator(this, function(_state) {
            vehicleIdentifier = GetCurrentVehicleIdentifier();
            if (vehicleIdentifier && Keys.has(vehicleIdentifier)) {
                RPC.execute("np:vehicles:sell", vehicleIdentifier, pTargetId, pPrice);
            } else {
                return [
                    2,
                    emit("DoLongHudText", "No keys for target vehicle!", 2)
                ];
            }
            return [
                2
            ];
        });
    });
    return function(pTargetId, pPrice) {
        return _ref.apply(this, arguments);
    };
}());
onNet("np:vehicles:sellPhone", function() {
    var _ref = events_async_to_generator(function(pVin, pTargetId, pPrice) {
        return events_ts_generator(this, function(_state) {
            if (pVin && Keys.has(pVin)) {
                RPC.execute("np:vehicles:sellPhone", pVin, pTargetId, pPrice);
            } else {
                return [
                    2,
                    emit("DoLongHudText", "No keys for target vehicle!", 2)
                ];
            }
            return [
                2
            ];
        });
    });
    return function(pVin, pTargetId, pPrice) {
        return _ref.apply(this, arguments);
    };
}());
RPC.register("np:vehicles:getCurrentVehicleIdentifier", function() {
    return GetCurrentVehicleIdentifier();
});
RPC.register("IsAnyVehicleNearPoint", function(pX, pY, pZ, pRadius) {
    return IsAnyVehicleNearPoint(pX, pY, pZ, pRadius);
});
on("vehicle:leftBennys", function(pEmployed, pRepairs, pVehicle) {
    if (pEmployed || pRepairs) return;
    var vehicle = pVehicle;
    if (pVehicle == null) vehicle = GetVehiclePedIsIn(PlayerPedId(), false);
    var netId = NetworkGetNetworkIdFromEntity(vehicle);
    if (DoesEntityExist(vehicle) && netId !== 0) {
        var mods = GetMods(vehicle);
        var appearance = GetVehicleAppearance(vehicle);
        emitNet("np:vehicles:leftBennys", netId, mods, appearance);
    }
});
on("keys:addNew", function(pVehicle) {
    var netId = NetworkGetNetworkIdFromEntity(pVehicle);
    if (DoesEntityExist(pVehicle) && netId !== 0) {
        emitNet("np:vehicles:gotKeys", netId);
    }
});
on("vehicle:addNos", function(size) {
    var vehicle = GetVehiclePedIsIn(PlayerPedId(), false);
    var netId = NetworkGetNetworkIdFromEntity(vehicle);
    var hash = GetEntityModel(vehicle);
    var vehicleClass = GetVehicleClass(vehicle);
    if (vehicleClass === 18) return;
    if (IsThisModelACar(hash) || IsThisModelABike(hash) || IsThisModelAQuadbike(hash)) {
        emitNet("np:vehicles:addNitro", netId, size);
    }
});
on("vehicle:addHarness", function(size) {
    var vehicle = GetVehiclePedIsIn(PlayerPedId(), false);
    var netId = NetworkGetNetworkIdFromEntity(vehicle);
    emitNet("np:vehicles:addHarness", netId, size);
});
onNet("vehicle:refuel:showMenu", function() {
    var _ref = events_async_to_generator(function(pArgs, pEntity) {
        var isJerryCan, fuelLevel, isHeli, _ref, taxLevel, pCost, menuData;
        return events_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    isJerryCan = pArgs.isJerryCan;
                    fuelLevel = isJerryCan ? GetJerryCanFuelLevel() : GetVehicleFuel(pEntity);
                    isHeli = GetVehicleClass(pEntity) === 15;
                    return [
                        4,
                        GetVehicleRefuelCost(fuelLevel, isJerryCan ? 35 : 100, isHeli)
                    ];
                case 1:
                    _ref = events_sliced_to_array.apply(void 0, [
                        _state.sent(),
                        2
                    ]), taxLevel = _ref[0], pCost = _ref[1];
                    menuData = [
                        {
                            i18nTitle: true,
                            i18nDescription: [
                                "The total cost is going to be",
                                "including",
                                "in taxes"
                            ],
                            title: "Gas Station",
                            description: "The total cost is going to be $".concat(pCost, ", including ").concat(taxLevel, "% in taxes."),
                            action: "vehicle:refuel:handler",
                            key: {
                                pEntity: pEntity,
                                pCost: pCost,
                                isJerryCan: isJerryCan,
                                isHeli: isHeli
                            }
                        }
                    ];
                    __webpack_require__.g.exports["np-ui"].showContextMenu(menuData);
                    return [
                        2
                    ];
            }
        });
    });
    return function(pArgs, pEntity) {
        return _ref.apply(this, arguments);
    };
}());
onNet("vehicle:refuel:jerryCan", function() {
    var _ref = events_async_to_generator(function(pArgs, pEntity) {
        return events_ts_generator(this, function(_state) {
            if (pEntity) {
                RefuelVehicle(pEntity, 0, false, true);
            }
            return [
                2
            ];
        });
    });
    return function(pArgs, pEntity) {
        return _ref.apply(this, arguments);
    };
}());
var EntryAttempt;
onNet("baseevents:enteringVehicle", function(pVehicle, pSeat, pClass) {
    if (pSeat === -1 || pSeat === 0) {
        if (EntryAttempt) clearTimeout(EntryAttempt);
        EntryAttempt = setTimeout(function() {
            var playerPed = PlayerPedId();
            var isNetworked = NetworkGetEntityIsNetworked(pVehicle);
            var isDoorOpen = GetVehicleDoorAngleRatio(pVehicle, pSeat + 1) > 0.1;
            var isStill = IsPedStill(playerPed);
            if (!isNetworked || isStill && (isDoorOpen || pClass === 8 || pClass === 13)) {
                TaskWarpPedIntoVehicle(playerPed, pVehicle, pSeat);
            }
            EntryAttempt = undefined;
        }, 2000);
    }
    if (pSeat == -1 && pVehicle) {
        DoorLockCheck(pVehicle);
        var hasDriver = !IsVehicleSeatFree(pVehicle, -1);
        if (hasDriver) return;
        VerifyEngineState(pVehicle);
    }
    SetVehicleCanEngineOperateOnFire(pVehicle, false);
});
onNet("baseevents:enteringAborted", function() {
    if (!EntryAttempt) return;
    var timeout = EntryAttempt;
    EntryAttempt = undefined;
    clearTimeout(timeout);
});
onNet("baseevents:enteredVehicle", function(currentVehicle, currentSeat) {
    UpdateCurrentVehicle();
    // Disable radio for emergency vehicles on entering
    var radioVol = GetConvarInt("profile_musicVolumeInMp", -1);
    var vehicleClass = GetVehicleClass(currentVehicle);
    if (vehicleClass === 18) SetVehicleRadioEnabled(currentVehicle, false);
    if (currentSeat === -1 && radioVol === 0) SetVehRadioStation(currentVehicle, "OFF");
    if (currentSeat === -1) VerifyEngineState(currentVehicle);
    if (IsAnAircraft(currentVehicle)) AircraftThread.start();
    if (!EntryAttempt) return;
    clearTimeout(EntryAttempt);
});
onNet("baseevents:leftVehicle", function(currentVehicle, currentSeat) {
    UpdateCurrentVehicle();
    SetHarness(false);
    SetSeatBelt(false);
    if (IsAnAircraft(currentVehicle)) AircraftThread.stop();
    if (currentSeat === -1 && driver_DriverThread.isActive) {
        driver_DriverThread.stop();
    } else if (PassengerThread.isActive) {
        PassengerThread.stop();
    }
});
onNet("baseevents:vehicleEngineOn", function(currentVehicle, currentSeat) {
    if (currentSeat === -1 && !driver_DriverThread.isActive) {
        driver_DriverThread.start();
    } else if (CurrentSeat !== -1 && !PassengerThread.isActive) {
        PassengerThread.start();
    }
});
onNet("baseevents:vehicleEngineOff", function(currentVehicle, currentSeat) {
    if (currentSeat === -1 && driver_DriverThread.isActive) {
        driver_DriverThread.stop();
    } else if (currentSeat !== -1 && PassengerThread.isActive) {
        PassengerThread.stop();
    }
});
onNet("baseevents:vehicleChangedSeat", function(currentVehicle, currentSeat, previousSeat) {
    UpdateCurrentVehicle();
    var isEngineOn = IsVehicleEngineOn(currentVehicle);
    SetHarness(false);
    SetSeatBelt(false);
    if (isEngineOn && currentSeat === -1 && !driver_DriverThread.isActive) {
        driver_DriverThread.start();
    } else if (isEngineOn && currentSeat !== -1 && !PassengerThread.isActive) {
        PassengerThread.start();
    }
    if (previousSeat === -1 && driver_DriverThread.isActive) {
        driver_DriverThread.stop();
    } else if (currentSeat === -1 && previousSeat !== -1 && PassengerThread.isActive) {
        PassengerThread.stop();
    }
    if (currentVehicle === StalledVehicle) {
        TurnOffEngine(currentVehicle);
    }
});
// 50 body damage impact = engine stall and 250 engine damage.
// only eject if over 80 body impact damage
// first one is the true
onNet("baseevents:vehicleCrashed", function(currentVehicle, currentSeat, currentSpeed, previousSpeed, pVelocity, impactDamage, heavyImpact, lightImpact) {
    var wasJump = pVelocity.z <= -25;
    var speedDiff = previousSpeed - currentSpeed;
    var engineDamage = 0.0;
    // eject scripties
    if (heavyImpact) {
        var mileage = mileage_GetVehicleMileage(currentVehicle);
        DoRandomDegradation(currentVehicle, impactDamage, false, mileage);
        var beltChance;
        if (driver_DriverThread.data.selfDriving) AbortSelfDrive();
        engineDamage = Math.floor(50.0 + impactDamage + previousSpeed * 6.5);
        if (impactDamage > 40) {
            if (impactDamage > 100) {
                impactDamage = 100;
            }
            beltChance = HasSeatBeltOn ? Math.floor(impactDamage / 2) : impactDamage;
        }
        var shouldEject = beltChance ? GetRandom(100) < beltChance : false;
        if (shouldEject && HasHarnessOn) {
            DoHarnessDamage(1);
        } else if (shouldEject && !wasJump) {
            EjectLUL(currentVehicle, pVelocity);
        }
        // Fuel leak on hard hit
        if (currentSeat == -1 && !wasJump) {
            var leakLength = speedDiff * impactDamage * 10;
            DamageVehicleTank(currentVehicle, leakLength);
        }
    }
    if (currentSeat !== -1) return;
    var engineHealth = GetVehicleEngineHealth(currentVehicle);
    var bodyHealth = GetVehicleBodyHealth(currentVehicle);
    var speedDamage = speedDiff * 4;
    var damage = engineHealth - engineDamage;
    if (isNaN(damage)) return;
    if (damage < 150 || bodyHealth < 100) {
        damage = 150.0;
        SetVehicleUndriveable(currentVehicle, true);
        SetVehicleEngineOn(currentVehicle, false, true, true);
    }
    SetVehicleEngineHealth(currentVehicle, damage);
    if (speedDamage < 5 || isNaN(engineDamage) && GetRandom(0, 1) !== 1) return;
    var wheels = GetVehicleNumberOfWheels(currentVehicle);
    for(var i = 0; i < wheels; i += 1){
        DoRandomTyreDamage(currentVehicle, i, wasJump ? 500 : speedDamage, wasJump ? 1000 : undefined);
    }
});
RPC.register("np:vehicles:getWaterHeight", function() {
    var _GetEntityCoords = events_sliced_to_array(GetEntityCoords(PlayerPedId(), false), 3), x = _GetEntityCoords[0], y = _GetEntityCoords[1], z = _GetEntityCoords[2];
    return TestVerticalProbeAgainstAllWater(x, y, z, 32, -1);
});
RPC.register("np:vehicles:isModelFlyable", function(pModel) {
    var isHeli = IsThisModelAHeli(pModel);
    var isPlane = IsThisModelAPlane(pModel);
    return isHeli || isPlane;
});
RPC.register("np:vehicles:completeSpawn", function(pNetId) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (!vehicle) return;
    var playerPed = PlayerPedId();
    var interior = GetInteriorFromEntity(playerPed);
    var roomHash = GetRoomKeyFromEntity(playerPed);
    SetVehicleOnGroundProperly(vehicle);
    emit("np-vehicles:spawnedVehicle", vehicle);
    if (!interior || !roomHash) return;
    ForceRoomForEntity(vehicle, interior, roomHash);
    var invincible = IsModelInvincible(vehicle);
    if (invincible) SetEntityInvincible(vehicle, true);
});
RPC.register("np:vehicles:getVehicleModelMetadata", function(pNetId) {
    var vehicle = NetworkGetEntityFromNetworkId(pNetId);
    if (!vehicle) return;
    var availableUpgrades = [];
    if (GetNumVehicleMods(vehicle, 11) > 0) availableUpgrades.push("Engine");
    if (GetNumVehicleMods(vehicle, 12) > 0) availableUpgrades.push("Brakes");
    if (GetNumVehicleMods(vehicle, 13) > 0) availableUpgrades.push("Transmission");
    if (GetNumVehicleMods(vehicle, 15) > 0) availableUpgrades.push("Suspension");
    if (GetNumVehicleMods(vehicle, 18) > -1) availableUpgrades.push("Turbo");
    return {
        class: GetVehicleRatingClass(vehicle),
        availableUpgrades: availableUpgrades
    };
});
on("np:vehicles:examineVehicle", function() {
    var _ref = events_async_to_generator(function(pParameters, pEntity, pContext) {
        var hasItem;
        return events_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        Inventory.HasItem("repairkit", {
                            quantity: 1
                        })
                    ];
                case 1:
                    hasItem = _state.sent();
                    if (!hasItem) {
                        return [
                            2,
                            DoLongHudText("I cannot examine the vehicle right now.", 2)
                        ];
                    }
                    ShowVehicleDegradation(pEntity);
                    return [
                        2
                    ];
            }
        });
    });
    return function(pParameters, pEntity, pContext) {
        return _ref.apply(this, arguments);
    };
}());
on("np-island:hideBlips", function() {
    var _ref = events_async_to_generator(function(pState) {
        var garages;
        return events_ts_generator(this, function(_state) {
            garages = GetAllGarages();
            garages.forEach(function(garage, key) {
                HideBlip(key, pState);
            });
            return [
                2
            ];
        });
    });
    return function(pState) {
        return _ref.apply(this, arguments);
    };
}());
on("np-vehicles:client:refillNoS", function() {
    return RefillNOSCan(100);
});
onNet("np-vehicles:giveNitrous", function() {
    emit("player:receiveItem", "nitrous", 1, false, {}, JSON.stringify({
        Status: "Empty"
    }));
});

;// CONCATENATED MODULE: ./src/client/controllers/threads/index.ts
function threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function threads_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function threads_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




function InitThreads() {
    return _InitThreads.apply(this, arguments);
}
function _InitThreads() {
    _InitThreads = threads_async_to_generator(function() {
        return threads_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        InitDriver()
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        InitPassenger()
                    ];
                case 2:
                    _state.sent();
                    return [
                        4,
                        InitNitroThread()
                    ];
                case 3:
                    _state.sent();
                    return [
                        4,
                        InitTraffic()
                    ];
                case 4:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _InitThreads.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/systems/aftermarkets.ts
function aftermarkets_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function aftermarkets_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                aftermarkets_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                aftermarkets_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function aftermarkets_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

function InitAfterMarkets() {
    return _InitAfterMarkets.apply(this, arguments);
}
function _InitAfterMarkets() {
    _InitAfterMarkets = aftermarkets_async_to_generator(function() {
        return aftermarkets_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitAfterMarkets.apply(this, arguments);
}
function GetVehicleAfterMarket(pVehicle, pAfterMarket) {
    var _GetVehicleMetadata;
    return pAfterMarket ? (_GetVehicleMetadata = GetVehicleMetadata(pVehicle, "afterMarkets")) === null || _GetVehicleMetadata === void 0 ? void 0 : _GetVehicleMetadata[pAfterMarket] : GetVehicleMetadata(pVehicle, "afterMarkets");
}
__webpack_require__.g.exports("GetVehicleAfterMarket", GetVehicleAfterMarket);

;// CONCATENATED MODULE: ./src/client/controllers/systems/wheelfitment.ts
function wheelfitment_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function wheelfitment_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                wheelfitment_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                wheelfitment_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function wheelfitment_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

function InitWheelFitment() {
    return _InitWheelFitment.apply(this, arguments);
}
function _InitWheelFitment() {
    _InitWheelFitment = wheelfitment_async_to_generator(function() {
        return wheelfitment_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitWheelFitment.apply(this, arguments);
}
function GetVehicleWheelFitment(pVehicle) {
    return GetVehicleMetadata(pVehicle, "wheelFitment");
}
__webpack_require__.g.exports("GetVehicleWheelFitment", GetVehicleWheelFitment);

;// CONCATENATED MODULE: ./src/client/controllers/systems/pursuitModes/index.ts
function pursuitModes_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function pursuitModes_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                pursuitModes_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                pursuitModes_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function pursuitModes_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function InitPursuitModes() {
    return _InitPursuitModes.apply(this, arguments);
}
function _InitPursuitModes() {
    _InitPursuitModes = pursuitModes_async_to_generator(function() {
        return pursuitModes_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    DecorRegister("Vehicle:PursuitMode", 3);
                    return [
                        4,
                        InitPursuitController()
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        InitPursuitModeData()
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _InitPursuitModes.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/systems/carpolish.ts
function carpolish_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function carpolish_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                carpolish_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                carpolish_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function carpolish_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitCarPolish() {
    return _InitCarPolish.apply(this, arguments);
}
function _InitCarPolish() {
    _InitCarPolish = carpolish_async_to_generator(function() {
        return carpolish_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitCarPolish.apply(this, arguments);
}
function GetVehicleCarPolish(pVehicle) {
    var carPolish = GetVehicleMetadata(pVehicle, "carPolish");
    return typeof carPolish === "number" ? carPolish : 0;
}
function HasVehicleCarPolish(pVehicle) {
    var carPolish = GetVehicleMetadata(pVehicle, "carPolish");
    return typeof carPolish === "number" && carPolish >= 0;
}
function ApplyCarPolish(pNetId, pDays) {
    return _ApplyCarPolish.apply(this, arguments);
}
function _ApplyCarPolish() {
    _ApplyCarPolish = carpolish_async_to_generator(function(pNetId, pDays) {
        var vehicle, vehicleDirtLevel, cleanAnimation, cleanResult, polishAnimation, polishResult;
        return carpolish_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vehicle = NetworkGetEntityFromNetworkId(pNetId);
                    if (!vehicle) return [
                        2,
                        false
                    ];
                    vehicleDirtLevel = GetVehicleDirtLevel(vehicle);
                    cleanAnimation = new AnimationTask(PlayerPedId(), "normal", "Cleaning vehicle", Math.ceil(vehicleDirtLevel + 0.1) * 1000, "WORLD_HUMAN_MAID_CLEAN", null);
                    return [
                        4,
                        cleanAnimation.start()
                    ];
                case 1:
                    cleanResult = _state.sent();
                    if (!(cleanResult == 100)) return [
                        3,
                        3
                    ];
                    SetVehicleDirtLevel(vehicle, 0.0);
                    RemoveDecalsFromVehicle(vehicle);
                    polishAnimation = new AnimationTask(PlayerPedId(), "normal", "Waxing vehicle", pDays + 20 * 1000, "WORLD_HUMAN_MAID_CLEAN", null);
                    return [
                        4,
                        polishAnimation.start()
                    ];
                case 2:
                    polishResult = _state.sent();
                    if (polishResult === 100) {
                        return [
                            2,
                            true
                        ];
                    }
                    _state.label = 3;
                case 3:
                    return [
                        2,
                        false
                    ];
            }
        });
    });
    return _ApplyCarPolish.apply(this, arguments);
}
var IsCarPolishExpired = function(pExpiration) {
    return Math.round(Date.now() / 1000) > pExpiration;
};
__webpack_require__.g.exports("GetVehicleCarPolish", GetVehicleCarPolish);
driver_DriverThread.addHook("afterStart", function() {
    this.data.carCleanTick = 0;
    this.data.hasCarPolish = HasVehicleCarPolish(this.data.vehicle);
    if (this.data.hasCarPolish) {
        this.data.carPolishExpires = GetVehicleCarPolish(this.data.vehicle);
    }
});
driver_DriverThread.addHook("active", function() {
    if (this.data.hasCarPolish && ++this.data.carCleanTick > 60) {
        this.data.carCleanTick = 0;
        if (GetVehicleDirtLevel(this.data.vehicle) > 0.0 && !IsCarPolishExpired(this.data.carPolishExpires)) {
            SetVehicleDirtLevel(this.data.vehicle, 0.0);
            RemoveDecalsFromVehicle(this.data.vehicle);
        }
    }
});
driver_DriverThread.addHook("afterStop", function() {
    if (HasVehicleCarPolish(this.data.vehicle) && IsCarPolishExpired(this.data.carPolishExpires)) {
        emitNet("np:vehicles:removeCarPolish", this.data.netId);
    }
});

;// CONCATENATED MODULE: ./src/client/controllers/systems/toggles.ts
function toggles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function toggles_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                toggles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                toggles_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function toggles_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitVehicleToggles() {
    return _InitVehicleToggles.apply(this, arguments);
}
function _InitVehicleToggles() {
    _InitVehicleToggles = toggles_async_to_generator(function() {
        return toggles_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitVehicleToggles.apply(this, arguments);
}
var HasVehicleMod = Utils.cacheableMap(function() {
    var _ref = toggles_async_to_generator(function(pCtx, pKey, pVIN, pMod) {
        var result;
        return toggles_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        RPC.execute("np-vehicles:hasVehicleMod", pVIN, pMod)
                    ];
                case 1:
                    result = _state.sent();
                    return [
                        2,
                        [
                            true,
                            result
                        ]
                    ];
            }
        });
    });
    return function(pCtx, pKey, pVIN, pMod) {
        return _ref.apply(this, arguments);
    };
}(), {
    timeToLive: 60 * 1000
});
function ToggleXenonLights(pVehicle) {
    return _ToggleXenonLights.apply(this, arguments);
}
function _ToggleXenonLights() {
    _ToggleXenonLights = toggles_async_to_generator(function(pVehicle) {
        var vin, hasXenonLights, currentState;
        return toggles_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vin = GetVehicleIdentifier(pVehicle);
                    return [
                        4,
                        HasVehicleMod.get("".concat(vin, "-XENON"), vin, "XenonHeadlights")
                    ];
                case 1:
                    hasXenonLights = _state.sent();
                    if (!hasXenonLights) return [
                        2
                    ];
                    currentState = IsToggleModOn(pVehicle, 22);
                    ToggleVehicleMod(pVehicle, 22, !currentState);
                    return [
                        2
                    ];
            }
        });
    });
    return _ToggleXenonLights.apply(this, arguments);
}
RegisterCommand("+toggleXenon", /*#__PURE__*/ toggles_async_to_generator(function() {
    return toggles_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                if (!CurrentVehicle || CurrentSeat !== -1) return [
                    2
                ];
                return [
                    4,
                    ToggleXenonLights(CurrentVehicle)
                ];
            case 1:
                _state.sent();
                return [
                    2
                ];
        }
    });
}), false);
RegisterCommand("-toggleXenon", function() {}, false);
setImmediate(function() {
    __webpack_require__.g.exports["np-keybinds"].registerKeyMapping("", "Vehicle", "Toggle Xenon Lights", "+toggleXenon", "-toggleXenon");
});

;// CONCATENATED MODULE: ./src/client/controllers/systems/electric.ts

var ELECTRIC_VEHICLES = [
    GetHashKey("polfegway"),
    GetHashKey("npdrone"),
    GetHashKey("f10m5rc"),
    GetHashKey("savanna"),
    GetHashKey("voltic"),
    GetHashKey("raiden"),
    GetHashKey("neon"),
    GetHashKey("dilettante"),
    GetHashKey("khamelion"),
    GetHashKey("bjxl"),
    GetHashKey("boxville2")
];
var BASE_BATTERY_TEMP = 20;
var TEMP_INCR_MIN_SPEED = 80;
var TEMP_REDUCE_AMT = 0.5;
var TEMP_INCR_AMT = 0.4;
var VehicleLeaveTimes = new Map();
function InitElectricVehicles() {}
function IsVehicleElectric(pVehicle) {
    return ELECTRIC_VEHICLES.includes(GetEntityModel(pVehicle));
}
__webpack_require__.g.exports("IsVehicleElectric", IsVehicleElectric);
driver_DriverThread.addHook("preStart", function() {
    this.data.electricBatteryTemp = BASE_BATTERY_TEMP;
    this.data.maxSpeed = GetVehicleMaxSpeed(this.data.vehicle);
    this.data.temperatureReductionFactor = 0;
    console.log("Starting electric thread, set initial values", this.data.maxSpeed, this.data.temperatureReductionFactor);
});
driver_DriverThread.addHook("active", function() {
    if (!IsVehicleElectric(this.data.vehicle)) return;
    var vehicleSpeed = this.data.speed * 2.236936;
    if (vehicleSpeed > TEMP_INCR_MIN_SPEED) {
        var milesOver80 = Math.abs(vehicleSpeed - TEMP_INCR_MIN_SPEED);
        var tempIncrAmount = TEMP_INCR_AMT * (milesOver80 / 10);
        this.data.electricBatteryTemp = Math.min(this.data.electricBatteryTemp + tempIncrAmount, 120);
        console.log(tempIncrAmount);
    } else {
        this.data.electricBatteryTemp = Math.max(this.data.electricBatteryTemp - TEMP_REDUCE_AMT, BASE_BATTERY_TEMP);
    }
    var state = Entity(this.data.vehicle).state;
    state.set("electricBatteryTemp", this.data.electricBatteryTemp, true);
    // Lets store that this vehicle has been throttles because temp was over 90
    // MINIMUM cooldown before checking if it should reset
    if (this.data.electricBatteryTemp >= 90) {
        var minimumCooldown = !state.batteryThrottleCD ? Date.now() + 60000 : state.batteryThrottleCD + 1000;
        state.set("batteryThrottleCD", minimumCooldown, true);
    }
    var nowDate = Date.now();
    if (state.batteryThrottleCD && nowDate < state.batteryThrottleCD) {
        var newSpeed = 0.85 * this.data.maxSpeed;
        SetVehicleMaxSpeed(this.data.vehicle, newSpeed);
    } else if (state.batteryThrottleCD && nowDate >= state.batteryThrottleCD) {
        console.log("Off CD now");
        SetVehicleMaxSpeed(this.data.vehicle, 0.0);
        state.set("batteryThrottleCD", null, true);
    }
});
driver_DriverThread.addHook("preStop", function() {
    if (!IsVehicleElectric(this.data.vehicle)) return;
    VehicleLeaveTimes.set(this.data.vehicle, Date.now());
});

;// CONCATENATED MODULE: ./src/client/controllers/systems/enginebay.ts
function enginebay_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function enginebay_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                enginebay_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                enginebay_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function enginebay_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



var hasEngineBay = function(vin) {
    return !!vin && vin.startsWith("3");
};
function InitVehicleTurbo() {
    return _InitVehicleTurbo.apply(this, arguments);
}
function _InitVehicleTurbo() {
    _InitVehicleTurbo = enginebay_async_to_generator(function() {
        return enginebay_ts_generator(this, function(_state) {
            client_Interface.addPeekEntryByType(2, [
                {
                    event: "vehicles:openEngineBay",
                    id: "vehicle_engine_bay",
                    icon: "level-up-alt",
                    label: "Open Engine Bay",
                    parameters: {}
                }
            ], {
                distance: {
                    radius: 5.0
                },
                isEnabled: function(pEntity) {
                    var vin = GetVehicleIdentifier(pEntity);
                    return hasEngineBay(vin);
                }
            });
            return [
                2
            ];
        });
    });
    return _InitVehicleTurbo.apply(this, arguments);
}
var GetVehicleTurbo = function(pVehicle) {
    return GetVehicleMetadata(pVehicle, "turboSize");
};
var GetVehicleGearBox = function(pVehicle) {
    return GetVehicleMetadata(pVehicle, "gearBoxType");
};
var GetVehicleDumpValve = function(pVehicle) {
    return GetVehicleMetadata(pVehicle, "dumpValve");
};
globalThis.exports("GetVehicleTurbo", GetVehicleTurbo);
globalThis.exports("GetVehicleGearBox", GetVehicleGearBox);
globalThis.exports("GetVehicleDumpValve", GetVehicleDumpValve);
on("vehicles:openEngineBay", function() {
    var _ref = enginebay_async_to_generator(function(pArgs, pEntity) {
        var vin, finished;
        return enginebay_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vin = GetVehicleIdentifier(pEntity);
                    if (!hasEngineBay(vin)) return [
                        2
                    ];
                    emit("animation:PlayAnimation", "mechanic");
                    globalThis.exports["np-sync"].SyncedExecution("SetVehicleDoorOpen", pEntity, 4);
                    return [
                        4,
                        client_Interface.taskBar(1000, "Checking Upgrades", true)
                    ];
                case 1:
                    finished = _state.sent();
                    if (finished !== 100) return [
                        2,
                        emit("animation:PlayAnimation", "cancel")
                    ];
                    Inventory.OpenInventory([
                        "engine::".concat(vin)
                    ], false);
                    emit("animation:PlayAnimation", "cancel");
                    return [
                        2
                    ];
            }
        });
    });
    return function(pArgs, pEntity) {
        return _ref.apply(this, arguments);
    };
}());

;// CONCATENATED MODULE: ./src/client/controllers/systems/flip.ts
function flip_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function flip_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                flip_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                flip_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function flip_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

function InitFlip() {
    return _InitFlip.apply(this, arguments);
}
function _InitFlip() {
    _InitFlip = flip_async_to_generator(function() {
        return flip_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitFlip.apply(this, arguments);
}
var flipVehicle = function() {
    var _ref = flip_async_to_generator(function(pVehicle) {
        return flip_ts_generator(this, function(_state) {
            SetVehicleOnGroundProperly(pVehicle);
            return [
                2
            ];
        });
    });
    return function flipVehicle(pVehicle) {
        return _ref.apply(this, arguments);
    };
}();
on("FlipVehicle", function() {
    var _ref = flip_async_to_generator(function(_, pEntity) {
        var finished, ped, hasControl, ownerId;
        return flip_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    emit("animation:PlayAnimation", "push");
                    return [
                        4,
                        client_Interface.taskBar(30000, "Flipping Vehicle Over", true, {
                            distance: 3.5,
                            entity: pEntity
                        })
                    ];
                case 1:
                    finished = _state.sent();
                    ped = PlayerPedId();
                    ClearPedTasks(ped);
                    if (finished !== 100) return [
                        2
                    ];
                    hasControl = NetworkHasControlOfEntity(pEntity);
                    if (!!hasControl) return [
                        3,
                        2
                    ];
                    ownerId = NetworkGetEntityOwner(pEntity);
                    client_Events.emitNet("np-vehicles:flip", GetPlayerServerId(ownerId), VehToNet(pEntity));
                    return [
                        3,
                        4
                    ];
                case 2:
                    return [
                        4,
                        flipVehicle(pEntity)
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
    return function(_, pEntity) {
        return _ref.apply(this, arguments);
    };
}());
client_Events.onNet("np-vehicles:flip", function() {
    var _ref = flip_async_to_generator(function(pNetId) {
        var vehicle;
        return flip_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vehicle = NetToVeh(pNetId);
                    if (!DoesEntityExist(vehicle)) return [
                        2
                    ];
                    return [
                        4,
                        flipVehicle(vehicle)
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(pNetId) {
        return _ref.apply(this, arguments);
    };
}());

;// CONCATENATED MODULE: ./src/client/controllers/systems/index.ts
function systems_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function systems_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                systems_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                systems_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function systems_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

















function InitVehicleSystems() {
    return _InitVehicleSystems.apply(this, arguments);
}
function _InitVehicleSystems() {
    _InitVehicleSystems = systems_async_to_generator(function() {
        return systems_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        InitHandling()
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        InitDamage()
                    ];
                case 2:
                    _state.sent();
                    return [
                        4,
                        InitFuel()
                    ];
                case 3:
                    _state.sent();
                    return [
                        4,
                        InitNitro()
                    ];
                case 4:
                    _state.sent();
                    return [
                        4,
                        InitHarness()
                    ];
                case 5:
                    _state.sent();
                    return [
                        4,
                        InitMileage()
                    ];
                case 6:
                    _state.sent();
                    return [
                        4,
                        InitHotwire()
                    ];
                case 7:
                    _state.sent();
                    return [
                        4,
                        InitAfterMarkets()
                    ];
                case 8:
                    _state.sent();
                    return [
                        4,
                        InitWheelFitment()
                    ];
                case 9:
                    _state.sent();
                    return [
                        4,
                        InitPursuitModes()
                    ];
                case 10:
                    _state.sent();
                    return [
                        4,
                        InitCarPolish()
                    ];
                case 11:
                    _state.sent();
                    return [
                        4,
                        InitVehicleToggles()
                    ];
                case 12:
                    _state.sent();
                    return [
                        4,
                        Init()
                    ];
                case 13:
                    _state.sent();
                    return [
                        4,
                        InitElectricVehicles()
                    ];
                case 14:
                    _state.sent();
                    return [
                        4,
                        selfdriving_Init()
                    ];
                case 15:
                    _state.sent();
                    return [
                        4,
                        InitVehicleTurbo()
                    ];
                case 16:
                    _state.sent();
                    return [
                        4,
                        InitFlip()
                    ];
                case 17:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _InitVehicleSystems.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/hotreload.ts
function hotreload_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function hotreload_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                hotreload_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                hotreload_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function hotreload_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




function InitHotreload() {
    return _InitHotreload.apply(this, arguments);
}
function _InitHotreload() {
    _InitHotreload = hotreload_async_to_generator(function() {
        return hotreload_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        Wait(1000)
                    ];
                case 1:
                    _state.sent();
                    if (!CurrentVehicle) return [
                        3,
                        5
                    ];
                    if (!(CurrentSeat === -1)) return [
                        3,
                        3
                    ];
                    return [
                        4,
                        driver_DriverThread.start()
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        5
                    ];
                case 3:
                    return [
                        4,
                        PassengerThread.start()
                    ];
                case 4:
                    _state.sent();
                    _state.label = 5;
                case 5:
                    return [
                        2
                    ];
            }
        });
    });
    return _InitHotreload.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/utils/animations.ts
function animations_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function animations_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function animations_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function animations_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                animations_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                animations_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function animations_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function animations_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function animations_sliced_to_array(arr, i) {
    return animations_array_with_holes(arr) || animations_iterable_to_array_limit(arr, i) || animations_unsupported_iterable_to_array(arr, i) || animations_non_iterable_rest();
}
function animations_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return animations_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return animations_array_like_to_array(o, minLen);
}
function animations_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var Animations = new Map();
function GetAnimationSettings(pId) {
    return Animations.get(pId);
}
function SetAnimationSettings(pId, pSettings) {
    Animations.set(pId, pSettings);
}
function HasAnimationSettings(pId) {
    return Animations.has(pId);
}
function PlayAnimation(pPed, pEntity, pAnimation) {
    return _PlayAnimation.apply(this, arguments);
}
function _PlayAnimation() {
    _PlayAnimation = animations_async_to_generator(function(pPed, pEntity, pAnimation) {
        var settings, animation, callback, data;
        return animations_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    settings = typeof pAnimation === "string" ? GetAnimationSettings(pAnimation) : pAnimation;
                    if (!settings) return [
                        2
                    ];
                    animation = new AnimationTask(PlayerPedId(), settings.type, settings.text, settings.duration, settings.dictionary, settings.animation, settings.flag);
                    callback = settings.callback;
                    if (!callback && settings.data) {
                        data = settings.data;
                        callback = function(self, pTarget) {
                            var _GetClosestBone = animations_sliced_to_array(GetClosestBone(pTarget, data.bones), 3), targetBone = _GetClosestBone[0], boneNaime = _GetClosestBone[1], targetDistance = _GetClosestBone[2];
                            if (targetDistance && targetDistance > data.distance) {
                                self.abort();
                            }
                        };
                    }
                    return [
                        4,
                        animation.start(function(self) {
                            if (!callback) return;
                            var tick = setInterval(function() {
                                if (!self.active) {
                                    clearInterval(tick);
                                    self.abort();
                                }
                                callback(self, pEntity);
                            }, 1000);
                        })
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return _PlayAnimation.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/utils/context.ts
var context_Resource = GetCurrentResourceName();
var Callbacks = new Map();
var MenuId = 0;
RegisterUICallback("np-ui:menu:confirmation", function(param, cb) {
    var key = param.key;
    var _key;
    var menuId = "".concat(context_Resource, ":").concat((_key = key) === null || _key === void 0 ? void 0 : _key.id);
    if (!Callbacks.has(menuId)) return;
    Callbacks.get(menuId)(key.accept);
    Callbacks.delete(menuId);
    cb({
        data: {},
        meta: {
            ok: true,
            message: ""
        }
    });
});
function OpenConfirmationMenu(pTitle, pDescription) {
    var menuId = ++MenuId;
    var elements = [
        {
            title: pTitle,
            description: pDescription
        },
        {
            title: "Confirm",
            action: "np-ui:menu:confirmation",
            key: {
                id: menuId,
                accept: true
            }
        },
        {
            title: "Cancel",
            action: "np-ui:menu:confirmation",
            key: {
                id: menuId,
                accept: false
            }
        }
    ];
    var promise = new Promise(function(resolve) {
        Callbacks.set("".concat(context_Resource, ":").concat(menuId), resolve);
        setTimeout(function() {
            return resolve(false);
        }, 30000);
    });
    __webpack_require__.g.exports["np-ui"].showContextMenu(elements);
    return promise;
}
var InputCount = 0;
var InputRequests = new Map();
RegisterUICallback("np-ui:applicationClosed", function(data, cb) {
    var _data;
    if (data.name !== "textbox" || ((_data = data) === null || _data === void 0 ? void 0 : _data.callbackUrl) !== "np-ui:menu:input") return;
    var request = InputRequests.get(data.key);
    if (!request) return;
    request.resolve(null);
    InputRequests.delete(data.key);
});
RegisterUICallback("np-ui:menu:input", function(data, cb) {
    var _data, _data1;
    cb({
        data: {},
        meta: {
            ok: true,
            message: ""
        }
    });
    var request = InputRequests.get(data.key);
    if (!request) return;
    var success = request.validation ? request.validation((_data = data) === null || _data === void 0 ? void 0 : _data.values) : true;
    if (!success) return;
    request.resolve((_data1 = data) === null || _data1 === void 0 ? void 0 : _data1.values);
    InputRequests.delete(data.key);
    __webpack_require__.g.exports["np-ui"].closeApplication("textbox");
});
function OpenInputMenu(pEntries, pValidation) {
    var inputId = ++InputCount;
    var response = new Promise(function(resolve) {
        InputRequests.set(inputId, {
            resolve: resolve,
            validation: pValidation
        });
    });
    __webpack_require__.g.exports["np-ui"].openApplication("textbox", {
        callbackUrl: "np-ui:menu:input",
        key: inputId,
        items: pEntries,
        show: true
    });
    return response;
}

;// CONCATENATED MODULE: ./src/client/controllers/items/itemsData.ts
function itemsData_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function itemsData_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                itemsData_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                itemsData_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function itemsData_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}








var AccessCache = new Cache();
var MechanicShops = (/* unused pure expression or super */ null && ([
    "hayes_autos",
    "harmony_repairs",
    "ottos_auto",
    "iron_hog",
    "tuner"
]));
var RestrictedMechanicShops = {
    iron_hog: [
        "M",
        "D",
        "C",
        "B",
        "A"
    ]
};
var VehicleBoneIndexes = [
    {
        bone: "wheel_lf",
        index: 0
    },
    {
        bone: "wheel_rf",
        index: 1
    },
    {
        bone: "wheel_lm",
        index: 2
    },
    {
        bone: "wheel_rm",
        index: 3
    },
    {
        bone: "wheel_lr",
        index: 4
    },
    {
        bone: "wheel_rr",
        index: 5
    },
    {
        bone: "wheel_lm1",
        index: 2
    },
    {
        bone: "wheel_rm1",
        index: 3
    },
    {
        bone: "door_dside_f",
        index: 0
    },
    {
        bone: "door_pside_f",
        index: 1
    },
    {
        bone: "door_dside_r",
        index: 2
    },
    {
        bone: "door_pside_r",
        index: 3
    },
    {
        bone: "bonnet",
        index: 4
    },
    {
        bone: "boot",
        index: 5
    }
];
function InitDegradationItems() {
    return _InitDegradationItems.apply(this, arguments);
}
function _InitDegradationItems() {
    _InitDegradationItems = itemsData_async_to_generator(function() {
        var cb;
        return itemsData_ts_generator(this, function(_state) {
            cb = function() {
                var _ref = itemsData_async_to_generator(function(pVariant, pPart, pAmount) {
                    var vehicle, itemId, parts, hasItem, input, hasItem1, success;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                                if (!vehicle) return [
                                    2,
                                    [
                                        false,
                                        null
                                    ]
                                ];
                                itemId = "fix".concat(pPart);
                                parts = 1;
                                return [
                                    4,
                                    Inventory.HasItem(itemId, {
                                        quantity: 2,
                                        variant: pVariant
                                    })
                                ];
                            case 1:
                                hasItem = _state.sent();
                                if (!hasItem) return [
                                    3,
                                    4
                                ];
                                return [
                                    4,
                                    OpenInputMenu([
                                        {
                                            name: "parts",
                                            label: "Amount of parts to use",
                                            icon: "cogs"
                                        }
                                    ], function(values) {
                                        var _values, _values1;
                                        values.parts = Number((_values = values) === null || _values === void 0 ? void 0 : _values.parts);
                                        return !isNaN((_values1 = values) === null || _values1 === void 0 ? void 0 : _values1.parts) && values.parts > 0;
                                    })
                                ];
                            case 2:
                                input = _state.sent();
                                if (input === null) return [
                                    2
                                ];
                                return [
                                    4,
                                    Inventory.HasItem(itemId, {
                                        quantity: input.parts,
                                        variant: pVariant
                                    })
                                ];
                            case 3:
                                hasItem1 = _state.sent();
                                if (!hasItem1) {
                                    DoLongHudText("You don't have enough parts.", 2);
                                    return [
                                        2,
                                        [
                                            false,
                                            null
                                        ]
                                    ];
                                }
                                parts = input.parts;
                                _state.label = 4;
                            case 4:
                                return [
                                    4,
                                    FixVehicleDegradation(vehicle, pPart, pAmount * parts)
                                ];
                            case 5:
                                success = _state.sent();
                                if (!success) return [
                                    2,
                                    [
                                        false,
                                        null
                                    ]
                                ];
                                if (pPart === "engine") {
                                    tools_SyncedExecution("SetVehicleEngineHealth", vehicle, 1000.0);
                                    RPC.execute("np-vehicles:damage:saveDamage", NetworkGetNetworkIdFromEntity(vehicle));
                                } else if (pPart === "body") {
                                    tools_SyncedExecution("SetVehicleBodyHealth", vehicle, 1000.0);
                                    tools_SyncedExecution("SetVehicleFixed", vehicle);
                                    RPC.execute("np-vehicles:damage:saveDamage", NetworkGetNetworkIdFromEntity(vehicle));
                                }
                                return [
                                    2,
                                    [
                                        true,
                                        parts
                                    ]
                                ];
                        }
                    });
                });
                return function cb(pVariant, pPart, pAmount) {
                    return _ref.apply(this, arguments);
                };
            }();
            DegradationRepairItems.forEach(function(item) {
                var variant = "".concat(item.name, "_repair");
                client_RPC.register("np-vehicles:use:".concat(variant), /*#__PURE__*/ itemsData_async_to_generator(function() {
                    var result;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    cb(variant, item.part, item.amount)
                                ];
                            case 1:
                                result = _state.sent();
                                return [
                                    2,
                                    result
                                ];
                        }
                    });
                }));
                client_RPC.register("np-vehicles:use:".concat(item.name), /*#__PURE__*/ itemsData_async_to_generator(function() {
                    var vehicle, netId, success;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                                netId = NetworkGetNetworkIdFromEntity(vehicle);
                                return [
                                    4,
                                    ResetVehicleDegradation(vehicle, item.part)
                                ];
                            case 1:
                                success = _state.sent();
                                return [
                                    2,
                                    [
                                        success,
                                        null,
                                        netId
                                    ]
                                ];
                        }
                    });
                }));
            });
            client_RPC.register("np-vehicles:use:advrepairkit", function() {
                var _ref = itemsData_async_to_generator(function(quality, slot) {
                    var hasItem, result;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    Inventory.HasItem("advrepairkit", {
                                        slot: slot,
                                        quality: quality
                                    })
                                ];
                            case 1:
                                hasItem = _state.sent();
                                if (!hasItem) {
                                    DoLongHudText("You don't have enough parts.", 2);
                                    return [
                                        2,
                                        [
                                            false,
                                            null
                                        ]
                                    ];
                                }
                                return [
                                    4,
                                    UseVehicleRepairKit(false, quality)
                                ];
                            case 2:
                                result = _state.sent();
                                return [
                                    2,
                                    result
                                ];
                        }
                    });
                });
                return function(quality, slot) {
                    return _ref.apply(this, arguments);
                };
            }());
            client_RPC.register("np-vehicles:use:repairkit", function() {
                var _ref = itemsData_async_to_generator(function(quality, slot) {
                    var hasItem, result;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    Inventory.HasItem("repairkit", {
                                        slot: slot,
                                        quality: quality
                                    })
                                ];
                            case 1:
                                hasItem = _state.sent();
                                if (!hasItem) {
                                    DoLongHudText("You don't have enough parts.", 2);
                                    return [
                                        2,
                                        [
                                            false,
                                            null
                                        ]
                                    ];
                                }
                                return [
                                    4,
                                    UseVehicleRepairKit(false, quality)
                                ];
                            case 2:
                                result = _state.sent();
                                return [
                                    2,
                                    result
                                ];
                        }
                    });
                });
                return function(quality, slot) {
                    return _ref.apply(this, arguments);
                };
            }());
            client_RPC.register("np-vehicles:use:tirerepairkit", function() {
                var _ref = itemsData_async_to_generator(function(quality, slot) {
                    var hasItem, vehicle, success;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    Inventory.HasItem("tirerepairkit", {
                                        slot: slot,
                                        quality: quality
                                    })
                                ];
                            case 1:
                                hasItem = _state.sent();
                                if (!hasItem) {
                                    DoLongHudText("You don't have enough parts.", 2);
                                    return [
                                        2,
                                        [
                                            false,
                                            null
                                        ]
                                    ];
                                }
                                vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                                return [
                                    4,
                                    FixVehicleTire(vehicle)
                                ];
                            case 2:
                                success = _state.sent();
                                return [
                                    2,
                                    [
                                        success,
                                        null
                                    ]
                                ];
                        }
                    });
                });
                return function(quality, slot) {
                    return _ref.apply(this, arguments);
                };
            }());
            client_RPC.register("np-vehicles:use:helicopterrepairkit", function() {
                var _ref = itemsData_async_to_generator(function(quality, slot) {
                    var hasItem, vehicle, vehicleClass, success;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    Inventory.HasItem("helicopterrepairkit", {
                                        slot: slot,
                                        quality: quality
                                    })
                                ];
                            case 1:
                                hasItem = _state.sent();
                                if (!hasItem) {
                                    DoLongHudText("You don't have enough parts.", 2);
                                    return [
                                        2,
                                        [
                                            false,
                                            null
                                        ]
                                    ];
                                }
                                vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                                vehicleClass = GetVehicleClass(vehicle);
                                if (vehicleClass !== 15) {
                                    DoLongHudText("Repair kit ineffective for this vehicle.", 2);
                                    return [
                                        2,
                                        [
                                            false,
                                            null
                                        ]
                                    ];
                                }
                                return [
                                    4,
                                    SpecialRepairKit(vehicle)
                                ];
                            case 2:
                                success = _state.sent();
                                return [
                                    2,
                                    [
                                        success,
                                        null
                                    ]
                                ];
                        }
                    });
                });
                return function(quality, slot) {
                    return _ref.apply(this, arguments);
                };
            }());
            client_RPC.register("np-vehicles:use:bodyrepairkit", function() {
                var _ref = itemsData_async_to_generator(function(quality, slot) {
                    var hasItem, vehicle, success;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    Inventory.HasItem("bodyrepairkit", {
                                        slot: slot,
                                        quality: quality
                                    })
                                ];
                            case 1:
                                hasItem = _state.sent();
                                if (!hasItem) {
                                    DoLongHudText("You don't have enough parts.", 2);
                                    return [
                                        2,
                                        [
                                            false,
                                            null
                                        ]
                                    ];
                                }
                                vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                                return [
                                    4,
                                    BodyRepairKit(vehicle)
                                ];
                            case 2:
                                success = _state.sent();
                                if (success !== true) return [
                                    2
                                ];
                                return [
                                    2,
                                    [
                                        success,
                                        null
                                    ]
                                ];
                        }
                    });
                });
                return function(quality, slot) {
                    return _ref.apply(this, arguments);
                };
            }());
            client_RPC.register("np-vehicles:use:carpolish", function() {
                var _ref = itemsData_async_to_generator(function(quality, slot, variant) {
                    var hasItem, vehicle, vehicleNetId, itemData, success;
                    return itemsData_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                return [
                                    4,
                                    Inventory.HasItem("carpolish", {
                                        slot: slot,
                                        quality: quality,
                                        variant: variant
                                    })
                                ];
                            case 1:
                                hasItem = _state.sent();
                                if (!hasItem) {
                                    DoLongHudText("You don't have enough parts.", 2);
                                    return [
                                        2,
                                        [
                                            false,
                                            null,
                                            null
                                        ]
                                    ];
                                }
                                vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                                if (!vehicle) return [
                                    2,
                                    [
                                        false,
                                        null,
                                        null
                                    ]
                                ];
                                vehicleNetId = NetworkGetNetworkIdFromEntity(vehicle);
                                if (!vehicleNetId) return [
                                    2,
                                    [
                                        false,
                                        null,
                                        null
                                    ]
                                ];
                                itemData = CarPolishVariants.find(function(pVariant) {
                                    return "carpolish_".concat(pVariant.tier) === variant;
                                });
                                if (!itemData) return [
                                    2,
                                    [
                                        false,
                                        null,
                                        null
                                    ]
                                ];
                                return [
                                    4,
                                    ApplyCarPolish(vehicleNetId, itemData.days)
                                ];
                            case 2:
                                success = _state.sent();
                                if (success) {
                                    return [
                                        2,
                                        [
                                            true,
                                            vehicleNetId,
                                            itemData.days
                                        ]
                                    ];
                                } else {
                                    return [
                                        2,
                                        [
                                            false,
                                            null,
                                            null
                                        ]
                                    ];
                                }
                                return [
                                    2
                                ];
                        }
                    });
                });
                return function(quality, slot, variant) {
                    return _ref.apply(this, arguments);
                };
            }());
            IllegalUpgrades.forEach(function(pVariant) {
                client_RPC.register("np-vehicles:use:".concat(pVariant.name), function() {
                    var _ref = itemsData_async_to_generator(function(pQuality, slot) {
                        var hasItem, vehicle, hasToolBox, vehicleMetaData, success;
                        return itemsData_ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    return [
                                        4,
                                        Inventory.HasItem(pVariant.name, {
                                            quality: pQuality,
                                            slot: slot
                                        })
                                    ];
                                case 1:
                                    hasItem = _state.sent();
                                    if (!hasItem) return [
                                        2,
                                        DoLongHudText("You don't have enough parts.", 2)
                                    ];
                                    if (pQuality < 50) {
                                        return [
                                            2,
                                            DoLongHudText("Part too beaten-up to be installed.", 2)
                                        ];
                                    }
                                    vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                                    return [
                                        4,
                                        Inventory.HasItem("toolbox", {
                                            quantity: 1
                                        })
                                    ];
                                case 2:
                                    hasToolBox = _state.sent();
                                    if (!hasToolBox) {
                                        return [
                                            2,
                                            DoLongHudText("You don't have the required tools to perform this action.", 2)
                                        ];
                                    }
                                    vehicleMetaData = GetVehicleMetadata(vehicle);
                                    if (vehicleMetaData && vehicleMetaData.boostingInfo && vehicleMetaData.boostingInfo.vinScratch) {
                                        return [
                                            2,
                                            DoLongHudText("Doesn't seem like I can apply that to this vehicle.", 2)
                                        ];
                                    }
                                    return [
                                        4,
                                        ApplyIllegalModKit(vehicle, pVariant.type, pVariant.health, pVariant.temp)
                                    ];
                                case 3:
                                    success = _state.sent();
                                    if (success !== true) return [
                                        2
                                    ];
                                    return [
                                        2,
                                        success
                                    ];
                            }
                        });
                    });
                    return function(pQuality, slot) {
                        return _ref.apply(this, arguments);
                    };
                }());
            });
            return [
                2
            ];
        });
    });
    return _InitDegradationItems.apply(this, arguments);
}
function GetVehicleBoneIndex(pBone) {
    var _VehicleBoneIndexes_find;
    return (_VehicleBoneIndexes_find = VehicleBoneIndexes.find(function(entry) {
        return entry.bone === pBone;
    })) === null || _VehicleBoneIndexes_find === void 0 ? void 0 : _VehicleBoneIndexes_find.index;
}

;// CONCATENATED MODULE: ./src/client/controllers/items/itemFunctions.ts
function itemFunctions_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function itemFunctions_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function itemFunctions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function itemFunctions_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                itemFunctions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                itemFunctions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function itemFunctions_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function itemFunctions_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function itemFunctions_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function itemFunctions_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            itemFunctions_define_property(target, key, source[key]);
        });
    }
    return target;
}
function itemFunctions_ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function itemFunctions_object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        itemFunctions_ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function itemFunctions_sliced_to_array(arr, i) {
    return itemFunctions_array_with_holes(arr) || itemFunctions_iterable_to_array_limit(arr, i) || itemFunctions_unsupported_iterable_to_array(arr, i) || itemFunctions_non_iterable_rest();
}
function itemFunctions_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return itemFunctions_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return itemFunctions_array_like_to_array(o, minLen);
}
function itemFunctions_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}









function InitVehicleItems() {
    return _InitVehicleItems.apply(this, arguments);
}
function _InitVehicleItems() {
    _InitVehicleItems = itemFunctions_async_to_generator(function() {
        return itemFunctions_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitVehicleItems.apply(this, arguments);
}
function UseVehicleRepairKit(pAdvanced, pQuality) {
    return _UseVehicleRepairKit.apply(this, arguments);
}
function _UseVehicleRepairKit() {
    _UseVehicleRepairKit = itemFunctions_async_to_generator(function(pAdvanced, pQuality) {
        var itemId, vehicle, vehicleClass, engineHealth, bodyHealth, targetCoords, playerCoords, distance, bonnet, doorIndex, COST_PER_REPAIR, startingQuality, repairCount, newBodyHealth, newEngineHealth, failed, progress;
        return itemFunctions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    itemId = pAdvanced ? "advrepairkit" : "repairkit";
                    vehicle = __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                    if (!IsEntityAVehicle(vehicle)) {
                        return [
                            2,
                            [
                                false,
                                null
                            ]
                        ];
                    }
                    if (!vehicle) return [
                        2,
                        [
                            false,
                            null
                        ]
                    ];
                    vehicleClass = GetVehicleClass(vehicle);
                    engineHealth = GetVehicleEngineHealth(vehicle);
                    bodyHealth = GetVehicleBodyHealth(vehicle);
                    if (vehicleClass === 15 || vehicleClass === 16) {
                        DoLongHudText("Repair kit ineffective for this vehicle.", 2);
                        return [
                            2,
                            [
                                false,
                                null
                            ]
                        ];
                    } else if (exports["np-flags"].HasVehicleFlag(vehicle, "isScrapVehicle")) {
                        DoLongHudText("The vehicle is beyond repair.", 2);
                        return [
                            2,
                            [
                                false,
                                null
                            ]
                        ];
                    }
                    targetCoords = GetEnginePosition(vehicle);
                    playerCoords = GetEntityCoords(PlayerPedId(), false);
                    distance = GetDistance(targetCoords, playerCoords);
                    if (distance > 1.0) {
                        DoLongHudText("Move closer to the engine.", 2);
                        return [
                            2,
                            [
                                false,
                                null
                            ]
                        ];
                    }
                    bonnet = GetBoneDistance(vehicle, 2, "bonnet", targetCoords);
                    doorIndex = bonnet <= 2.4 ? 4 : 5;
                    return [
                        4,
                        PedFaceEntity(PlayerPedId(), vehicle)
                    ];
                case 1:
                    _state.sent();
                    tools_SyncedExecution("SetVehicleDoorOpen", vehicle, doorIndex, false, false);
                    COST_PER_REPAIR = 9;
                    startingQuality = pQuality;
                    repairCount = 0;
                    newBodyHealth = bodyHealth;
                    newEngineHealth = engineHealth;
                    failed = false;
                    _state.label = 2;
                case 2:
                    if (!(!failed && startingQuality >= COST_PER_REPAIR)) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        PlayAnimation(PlayerPedId(), vehicle, "repairkit:engine")
                    ];
                case 3:
                    progress = _state.sent();
                    if (progress === 100) {
                        if (repairCount >= 5) {
                            newBodyHealth = 1000;
                            newEngineHealth = 1000;
                            return [
                                3,
                                4
                            ];
                        }
                        startingQuality -= COST_PER_REPAIR;
                        newBodyHealth *= 1.2;
                        newEngineHealth *= 1.2;
                        if (newBodyHealth > 1000) newBodyHealth = 1000;
                        if (newEngineHealth > 1000) newEngineHealth = 1000;
                        repairCount++;
                        if (newBodyHealth === 1000 && newEngineHealth === 1000) {
                            return [
                                3,
                                4
                            ];
                        }
                        if (startingQuality > 0 && startingQuality < COST_PER_REPAIR) {
                            repairCount++;
                            return [
                                3,
                                4
                            ];
                        }
                    } else {
                        failed = true;
                    }
                    return [
                        3,
                        2
                    ];
                case 4:
                    tools_SyncedExecution("SetVehicleDoorShut", vehicle, doorIndex, false);
                    if (!repairCount) return [
                        2,
                        [
                            false,
                            null
                        ]
                    ];
                    tools_SyncedExecution("SetVehicleEngineHealth", vehicle, newEngineHealth);
                    tools_SyncedExecution("SetVehicleBodyHealth", vehicle, newBodyHealth);
                    if (newBodyHealth === 1000 && newEngineHealth === 1000) {
                        DoLongHudText("Vehicle fully repaired");
                        tools_SyncedExecution("SetVehicleFixed", vehicle, true);
                    }
                    return [
                        2,
                        [
                            true,
                            repairCount * COST_PER_REPAIR
                        ]
                    ];
            }
        });
    });
    return _UseVehicleRepairKit.apply(this, arguments);
}
function FixVehicleDegradation(pVehicle, pPart) {
    return _FixVehicleDegradation.apply(this, arguments);
}
function _FixVehicleDegradation() {
    _FixVehicleDegradation = itemFunctions_async_to_generator(function(pVehicle, pPart) {
        var pAmount, netId, degradation, ratingClass, state, animation, _GetClosestBone, boneId, boneName, distance, coords, skipBoneCheck, vehCoords, plyCoords, realDistance, multiplier, repairId, progress;
        var _arguments = arguments;
        return itemFunctions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pAmount = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : 10;
                    if (!pVehicle) return [
                        2
                    ];
                    netId = NetworkGetNetworkIdFromEntity(pVehicle);
                    degradation = GetVehicleDegradation(pVehicle);
                    ratingClass = GetVehicleRatingClass(pVehicle);
                    if (!degradation) return [
                        2,
                        DoLongHudText("This vehicle doesn't need to be repaired.", 2)
                    ];
                    state = degradation[pPart];
                    if (typeof state === "undefined") {
                        return [
                            2,
                            DoLongHudText("The vehicle is missing this part.", 2)
                        ];
                    }
                    if (state.health >= state.maxHealth) {
                        return [
                            2,
                            DoLongHudText("This part is already in perfect condition.", 2)
                        ];
                    }
                    animation = GetAnimationSettings("degradation:".concat(pPart));
                    _GetClosestBone = itemFunctions_sliced_to_array(GetClosestBone(pVehicle, animation.data.bones), 4), boneId = _GetClosestBone[0], boneName = _GetClosestBone[1], distance = _GetClosestBone[2], coords = _GetClosestBone[3];
                    skipBoneCheck = false;
                    if (distance > 10.0) {
                        vehCoords = GetEntityCoords(pVehicle, false);
                        plyCoords = GetEntityCoords(PlayerPedId(), false);
                        realDistance = GetDistance(vehCoords, plyCoords);
                        if (realDistance < animation.data.distance) {
                            animation = itemFunctions_object_spread_props(itemFunctions_object_spread({}, animation), {
                                data: itemFunctions_object_spread_props(itemFunctions_object_spread({}, animation.data), {
                                    distance: distance + 1.0
                                })
                            });
                            skipBoneCheck = true;
                        }
                    }
                    if (!boneId || skipBoneCheck) {
                        //return DoLongHudText('Something is wrong with this vehicle.', 1);
                        coords = GetEntityCoords(pVehicle, false);
                    } else if (distance > animation.data.distance) {
                        return [
                            2,
                            DoLongHudText("Get closer to the area that needs to be repaired.", 2)
                        ];
                    }
                    return [
                        4,
                        PedFaceCoord(PlayerPedId(), coords)
                    ];
                case 1:
                    _state.sent();
                    multiplier = RepairRatingClasses[ratingClass] || 10;
                    return [
                        4,
                        RPC.execute("np:vehicles:degradation:requestRepair", netId, null, null, pPart, pAmount * multiplier)
                    ];
                case 2:
                    repairId = _state.sent();
                    if (!repairId) return [
                        2,
                        DoLongHudText("I can't repair right now.")
                    ];
                    return [
                        4,
                        PlayAnimation(PlayerPedId(), pVehicle, animation)
                    ];
                case 3:
                    progress = _state.sent();
                    RPC.execute("np:vehicles:degradation:requestRepair", netId, repairId, progress === 100);
                    return [
                        2,
                        progress === 100
                    ];
            }
        });
    });
    return _FixVehicleDegradation.apply(this, arguments);
}
function ResetVehicleDegradation(pVehicle, pPart) {
    return _ResetVehicleDegradation.apply(this, arguments);
}
function _ResetVehicleDegradation() {
    _ResetVehicleDegradation = itemFunctions_async_to_generator(function(pVehicle, pPart) {
        var degradation, state, animation, _GetClosestBone, boneId, boneName, distance, coords, skipBoneCheck, vehCoords, plyCoords, realDistance, progress;
        return itemFunctions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!pVehicle) return [
                        2
                    ];
                    degradation = GetVehicleDegradation(pVehicle);
                    if (!degradation) return [
                        2,
                        DoLongHudText("This vehicle doesn't need to be repaired.", 2)
                    ];
                    state = degradation[pPart];
                    if (typeof state === "undefined") {
                        return [
                            2,
                            DoLongHudText("The vehicle is missing this part.", 2)
                        ];
                    }
                    animation = GetAnimationSettings("degradation:".concat(pPart));
                    _GetClosestBone = itemFunctions_sliced_to_array(GetClosestBone(pVehicle, animation.data.bones), 4), boneId = _GetClosestBone[0], boneName = _GetClosestBone[1], distance = _GetClosestBone[2], coords = _GetClosestBone[3];
                    skipBoneCheck = false;
                    if (distance > 10.0) {
                        vehCoords = GetEntityCoords(pVehicle, false);
                        plyCoords = GetEntityCoords(PlayerPedId(), false);
                        realDistance = GetDistance(vehCoords, plyCoords);
                        if (realDistance < animation.data.distance) {
                            animation = itemFunctions_object_spread_props(itemFunctions_object_spread({}, animation), {
                                data: itemFunctions_object_spread_props(itemFunctions_object_spread({}, animation.data), {
                                    distance: distance + 1.0
                                })
                            });
                            skipBoneCheck = true;
                        }
                    }
                    if (!boneId || skipBoneCheck) {
                        //return DoLongHudText('Something is wrong with this vehicle.', 1);
                        coords = GetEntityCoords(pVehicle, false);
                    } else if (distance > animation.data.distance) {
                        return [
                            2,
                            DoLongHudText("Get closer to the area that needs to be repaired.", 2)
                        ];
                    }
                    return [
                        4,
                        PedFaceCoord(PlayerPedId(), coords)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        PlayAnimation(PlayerPedId(), pVehicle, animation)
                    ];
                case 2:
                    progress = _state.sent();
                    return [
                        2,
                        progress === 100
                    ];
            }
        });
    });
    return _ResetVehicleDegradation.apply(this, arguments);
}
function FixVehicleTire(pVehicle) {
    return _FixVehicleTire.apply(this, arguments);
}
function _FixVehicleTire() {
    _FixVehicleTire = itemFunctions_async_to_generator(function(pVehicle) {
        var vehicle, animation, _GetClosestBone, boneId, boneName, distance, coords, progress, index;
        return itemFunctions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vehicle = pVehicle ? pVehicle : __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                    if (!vehicle) return [
                        2
                    ];
                    if (exports["np-flags"].HasVehicleFlag(vehicle, "isScrapVehicle")) {
                        DoLongHudText("The vehicle tire is beyond repair.", 2);
                        return [
                            2,
                            false
                        ];
                    }
                    animation = GetAnimationSettings("degradation:tyres");
                    _GetClosestBone = itemFunctions_sliced_to_array(GetClosestBone(pVehicle, animation.data.bones), 4), boneId = _GetClosestBone[0], boneName = _GetClosestBone[1], distance = _GetClosestBone[2], coords = _GetClosestBone[3];
                    if (distance > 1.2) {
                        DoLongHudText("Move closer to the tire.", 2);
                        return [
                            2,
                            false
                        ];
                    }
                    return [
                        4,
                        PedFaceCoord(PlayerPedId(), coords)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        PlayAnimation(PlayerPedId(), pVehicle, animation)
                    ];
                case 2:
                    progress = _state.sent();
                    if (progress !== 100) return [
                        2,
                        false
                    ];
                    index = GetVehicleBoneIndex(boneName);
                    tools_SyncedExecution("SetVehicleTyreFixed", pVehicle, index);
                    return [
                        2,
                        true
                    ];
            }
        });
    });
    return _FixVehicleTire.apply(this, arguments);
}
function GenericRepairs(pVehicle, pDistance, pAnimation) {
    return _GenericRepairs.apply(this, arguments);
}
function _GenericRepairs() {
    _GenericRepairs = itemFunctions_async_to_generator(function(pVehicle, pDistance, pAnimation) {
        var vehicle, targetCoords, playerCoords, distance, progress;
        return itemFunctions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vehicle = pVehicle ? pVehicle : __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                    if (!vehicle) return [
                        2
                    ];
                    if (exports["np-flags"].HasVehicleFlag(vehicle, "isScrapVehicle")) {
                        DoLongHudText("The vehicle is beyond repair.", 2);
                        return [
                            2,
                            false
                        ];
                    }
                    targetCoords = GetEntityCoords(vehicle, false);
                    playerCoords = GetEntityCoords(PlayerPedId(), false);
                    distance = GetDistance(targetCoords, playerCoords);
                    if (distance > pDistance) {
                        DoLongHudText("Move closer to the vehicle.", 2);
                        return [
                            2,
                            false
                        ];
                    }
                    return [
                        4,
                        PedFaceEntity(PlayerPedId(), pVehicle)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        PlayAnimation(PlayerPedId(), pVehicle, pAnimation)
                    ];
                case 2:
                    progress = _state.sent();
                    return [
                        2,
                        progress === 100
                    ];
            }
        });
    });
    return _GenericRepairs.apply(this, arguments);
}
function SpecialRepairKit(pVehicle) {
    return _SpecialRepairKit.apply(this, arguments);
}
function _SpecialRepairKit() {
    _SpecialRepairKit = itemFunctions_async_to_generator(function(pVehicle) {
        var pRepair, vehicle, success;
        var _arguments = arguments;
        return itemFunctions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    pRepair = _arguments.length > 1 && _arguments[1] !== void 0 ? _arguments[1] : 1000.0;
                    vehicle = pVehicle ? pVehicle : __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                    return [
                        4,
                        GenericRepairs(vehicle, 2.4, "repairkit:engine")
                    ];
                case 1:
                    success = _state.sent();
                    if (!success) return [
                        2,
                        false
                    ];
                    tools_SyncedExecution("SetVehicleEngineHealth", vehicle, pRepair);
                    tools_SyncedExecution("SetVehicleBodyHealth", vehicle, pRepair);
                    return [
                        2,
                        true
                    ];
            }
        });
    });
    return _SpecialRepairKit.apply(this, arguments);
}
function BodyRepairKit(pVehicle) {
    return _BodyRepairKit.apply(this, arguments);
}
function _BodyRepairKit() {
    _BodyRepairKit = itemFunctions_async_to_generator(function(pVehicle) {
        var vehicle, success;
        return itemFunctions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vehicle = pVehicle ? pVehicle : __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                    return [
                        4,
                        GenericRepairs(vehicle, 2.4, "degradation:body")
                    ];
                case 1:
                    success = _state.sent();
                    if (!success) return [
                        2,
                        false
                    ];
                    tools_SyncedExecution("SetVehicleDeformationFixed", vehicle);
                    tools_SyncedExecution("SetVehicleBodyHealth", vehicle, 1000.0);
                    return [
                        2,
                        true
                    ];
            }
        });
    });
    return _BodyRepairKit.apply(this, arguments);
}
function ApplyIllegalModKit(pVehicle, pKit, pHeath, pTemp) {
    return _ApplyIllegalModKit.apply(this, arguments);
}
function _ApplyIllegalModKit() {
    _ApplyIllegalModKit = itemFunctions_async_to_generator(function(pVehicle, pKit, pHeath, pTemp) {
        var vehicle, vin, success;
        return itemFunctions_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vehicle = pVehicle ? pVehicle : __webpack_require__.g.exports["np-target"].GetCurrentEntity();
                    if (vehicle === undefined) return [
                        2
                    ];
                    vin = GetVehicleIdentifier(vehicle);
                    if (vin.startsWith("3")) {
                        DoLongHudText("Cannot be used on personal vehicles!", 2);
                        return [
                            2,
                            false
                        ];
                    }
                    return [
                        4,
                        GenericRepairs(vehicle, 2.5, "tempmodkit")
                    ];
                case 1:
                    success = _state.sent();
                    if (!success) return [
                        2,
                        false
                    ];
                    if (pTemp !== true) {
                        return [
                            2,
                            RPC.execute("np-vehicles:applyIllegalMod", NetworkGetNetworkIdFromEntity(vehicle), pKit)
                        ];
                    }
                    switch(pKit){
                        case "turbo":
                            {
                                tools_SyncedExecution("SetVehicleMods", pVehicle, {
                                    Turbo: 1
                                });
                                break;
                            }
                        case "engine":
                            {
                                tools_SyncedExecution("SetVehicleMods", pVehicle, {
                                    Engine: GetRandom(1, 3)
                                });
                                break;
                            }
                        case "transmission":
                            {
                                tools_SyncedExecution("SetVehicleMods", pVehicle, {
                                    Transmission: GetRandom(1, 3)
                                });
                                break;
                            }
                    }
                    return [
                        2,
                        true
                    ];
            }
        });
    });
    return _ApplyIllegalModKit.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/items/itemAnimations.ts
function itemAnimations_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function itemAnimations_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                itemAnimations_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                itemAnimations_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function itemAnimations_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function InitAnimationList() {
    return _InitAnimationList.apply(this, arguments);
}
function _InitAnimationList() {
    _InitAnimationList = itemAnimations_async_to_generator(function() {
        return itemAnimations_ts_generator(this, function(_state) {
            ItemAnimationList.forEach(function(element) {
                SetAnimationSettings(element.name, element.animation);
            });
            return [
                2
            ];
        });
    });
    return _InitAnimationList.apply(this, arguments);
}
// TODO: Find better animations, use hydraulic jack, vehicle lift, etc
var ItemAnimationList = [
    {
        name: "repairkit:engine",
        animation: {
            type: "skill",
            text: "Repairing Vehicle...",
            duration: [
                {
                    difficulty: 16500,
                    get gap () {
                        return GetRandom(7, 15);
                    }
                }
            ],
            dictionary: "mini@repair",
            animation: "fixing_a_player",
            data: {
                distance: 2.5,
                bones: [
                    "engine",
                    "engine_l",
                    "engine_r"
                ]
            }
        }
    },
    {
        name: "tempmodkit",
        animation: {
            type: "skill",
            text: "Installing Vehicle Modification...",
            duration: [
                {
                    get difficulty () {
                        return GetRandom(1500, 3000);
                    },
                    get gap () {
                        return GetRandom(10, 18);
                    }
                },
                {
                    get difficulty () {
                        return GetRandom(4000, 12000);
                    },
                    get gap () {
                        return GetRandom(10, 18);
                    }
                },
                {
                    get difficulty () {
                        return GetRandom(500, 2000);
                    },
                    get gap () {
                        return GetRandom(10, 18);
                    }
                },
                {
                    get difficulty () {
                        return GetRandom(2000, 3000);
                    },
                    get gap () {
                        return GetRandom(10, 18);
                    }
                }
            ],
            dictionary: "mini@repair",
            animation: "fixing_a_player",
            data: {
                distance: 2.5,
                bones: [
                    "engine",
                    "engine_l",
                    "engine_r"
                ]
            }
        }
    },
    {
        name: "degradation:brakes",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "anim@amb@clubhouse@tutorial@bkr_tut_ig3@",
            animation: "machinic_loop_mechandplayer",
            data: {
                distance: 1.2,
                bones: [
                    "wheel_lf",
                    "wheel_rf",
                    "wheel_lm",
                    "wheel_rm",
                    "wheel_lr",
                    "wheel_rr",
                    "wheel_lm1",
                    "wheel_rm1"
                ]
            }
        }
    },
    {
        name: "degradation:axle",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "anim@amb@clubhouse@tutorial@bkr_tut_ig3@",
            animation: "machinic_loop_mechandplayer",
            data: {
                distance: 1.2,
                bones: [
                    "wheel_lf",
                    "wheel_rf",
                    "wheel_lm",
                    "wheel_rm",
                    "wheel_lr",
                    "wheel_rr",
                    "wheel_lm1",
                    "wheel_rm1"
                ]
            }
        }
    },
    {
        name: "degradation:radiator",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "mp_car_bomb",
            animation: "car_bomb_mechanic",
            flag: 17,
            data: {
                distance: 2.5,
                bones: [
                    "engine",
                    "engine_l",
                    "engine_r"
                ]
            }
        }
    },
    {
        name: "degradation:clutch",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "WORLD_HUMAN_WELDING",
            animation: "",
            data: {
                distance: 2.6,
                bones: [
                    "bodyshell"
                ]
            }
        }
    },
    {
        name: "degradation:transmission",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "WORLD_HUMAN_WELDING",
            animation: "",
            data: {
                distance: 2.6,
                bones: [
                    "bodyshell"
                ]
            }
        }
    },
    {
        name: "degradation:electronics",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "mp_car_bomb",
            animation: "car_bomb_mechanic",
            data: {
                distance: 2.5,
                bones: [
                    "engine",
                    "engine_l",
                    "engine_r"
                ]
            }
        }
    },
    {
        name: "degradation:injector",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "mini@repair",
            animation: "fixing_a_player",
            data: {
                distance: 2.5,
                bones: [
                    "engine",
                    "engine_l",
                    "engine_r"
                ]
            }
        }
    },
    {
        name: "degradation:tyres",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "anim@amb@clubhouse@tutorial@bkr_tut_ig3@",
            animation: "machinic_loop_mechandplayer",
            data: {
                distance: 1.2,
                bones: [
                    "wheel_lf",
                    "wheel_rf",
                    "wheel_lm",
                    "wheel_rm",
                    "wheel_lr",
                    "wheel_rr",
                    "wheel_lm1",
                    "wheel_rm1"
                ]
            }
        }
    },
    {
        name: "degradation:body",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 20000,
            dictionary: "WORLD_HUMAN_WELDING",
            animation: "",
            data: {
                distance: 2.6,
                bones: [
                    "bodyshell"
                ]
            }
        }
    },
    {
        name: "degradation:engine",
        animation: {
            type: "normal",
            text: "Repairing Vehicle...",
            duration: 6000,
            dictionary: "mini@repair",
            animation: "fixing_a_player",
            data: {
                distance: 2.5,
                bones: [
                    "engine",
                    "engine_l",
                    "engine_r"
                ]
            }
        }
    }
];

;// CONCATENATED MODULE: ./src/client/controllers/items/index.ts
function items_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function items_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                items_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                items_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function items_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitItem() {
    return _InitItem.apply(this, arguments);
}
function _InitItem() {
    _InitItem = items_async_to_generator(function() {
        return items_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        InitVehicleItems()
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        InitDegradationItems()
                    ];
                case 2:
                    _state.sent();
                    return [
                        4,
                        InitAnimationList()
                    ];
                case 3:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _InitItem.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/police/events.ts
function police_events_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function police_events_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function police_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function police_events_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                police_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                police_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function police_events_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function police_events_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function police_events_sliced_to_array(arr, i) {
    return police_events_array_with_holes(arr) || police_events_iterable_to_array_limit(arr, i) || police_events_unsupported_iterable_to_array(arr, i) || police_events_non_iterable_rest();
}
function police_events_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return police_events_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return police_events_array_like_to_array(o, minLen);
}
function police_events_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitPoliceEvents() {
    return _InitPoliceEvents.apply(this, arguments);
}
function _InitPoliceEvents() {
    _InitPoliceEvents = police_events_async_to_generator(function() {
        return police_events_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitPoliceEvents.apply(this, arguments);
}
on("np-vehicles:openGarageActions", /*#__PURE__*/ police_events_async_to_generator(function() {
    var _input, _FindParkingSpot, found, spot, input, stateId;
    return police_events_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                _FindParkingSpot = police_events_sliced_to_array(FindParkingSpot(PlayerPedId(), true, 4.5), 2), found = _FindParkingSpot[0], spot = _FindParkingSpot[1];
                if (!found) return [
                    2,
                    emit("DoLongHudText", "Find an empty parking spot")
                ];
                return [
                    4,
                    OpenInputMenu([
                        {
                            name: "stateId",
                            label: "State ID",
                            icon: ""
                        }
                    ], function(values) {
                        var _values, _values1;
                        if (!values.stateId || values.stateId.length > 9 || values.stateId.length === 0) return false;
                        values.stateId = Number((_values = values) === null || _values === void 0 ? void 0 : _values.stateId);
                        return !isNaN((_values1 = values) === null || _values1 === void 0 ? void 0 : _values1.stateId);
                    })
                ];
            case 1:
                input = _state.sent();
                stateId = (_input = input) === null || _input === void 0 ? void 0 : _input.stateId;
                if (!stateId || !Number(stateId)) return [
                    2,
                    emit("DoLongHudText", "Invalid State ID.", 2)
                ];
                OpenPlayerGarage(stateId, CurrentGarage, spot, true);
                return [
                    2
                ];
        }
    });
}));

;// CONCATENATED MODULE: ./src/client/controllers/police/garageActions.ts
function garageActions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function garageActions_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                garageActions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                garageActions_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function garageActions_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function InitGarageActions() {
    return _InitGarageActions.apply(this, arguments);
}
function _InitGarageActions() {
    _InitGarageActions = garageActions_async_to_generator(function() {
        return garageActions_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitGarageActions.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/police/index.ts
function police_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function police_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                police_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                police_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function police_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function InitPoliceControllers() {
    return _InitPoliceControllers.apply(this, arguments);
}
function _InitPoliceControllers() {
    _InitPoliceControllers = police_async_to_generator(function() {
        return police_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        InitPoliceEvents()
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        InitGarageActions()
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _InitPoliceControllers.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/garage/display/state.ts
function state_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function state_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function state_array_without_holes(arr) {
    if (Array.isArray(arr)) return state_array_like_to_array(arr);
}
function state_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function state_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                state_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                state_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function state_iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function state_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function state_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function state_non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function state_sliced_to_array(arr, i) {
    return state_array_with_holes(arr) || state_iterable_to_array_limit(arr, i) || state_unsupported_iterable_to_array(arr, i) || state_non_iterable_rest();
}
function state_to_consumable_array(arr) {
    return state_array_without_holes(arr) || state_iterable_to_array(arr) || state_unsupported_iterable_to_array(arr) || state_non_iterable_spread();
}
function state_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return state_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return state_array_like_to_array(o, minLen);
}
function state_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}





var NearbyGarages = new Set();
var SpawnedEntities = new Set();
var DisplayVehicles = new Map();
function SetNearbyDisplayGarage(pGarage, pActive) {
    pActive ? NearbyGarages.add(pGarage) : NearbyGarages.delete(pGarage);
}
function GetNearbyDisplayGarages() {
    return state_to_consumable_array(NearbyGarages.values());
}
function HasNearbyDisplayGarage(pGarage) {
    return NearbyGarages.has(pGarage);
}
function SpawnDisplayVehicle(pData, pCoords, pHeading) {
    return _SpawnDisplayVehicle.apply(this, arguments);
}
function _SpawnDisplayVehicle() {
    _SpawnDisplayVehicle = state_async_to_generator(function(pData, pCoords, pHeading) {
        var modelHash, vehicle;
        return state_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (pData === undefined) return [
                        2
                    ];
                    modelHash = GetHashKey(pData.model);
                    return [
                        4,
                        tools_LoadEntityModel(modelHash)
                    ];
                case 1:
                    _state.sent();
                    vehicle = CreateVehicle(modelHash, pCoords.x, pCoords.y, pCoords.z - 50.0, pHeading, false, false);
                    FreezeEntityPosition(vehicle, true);
                    SetVehicleDoorsLocked(vehicle, 3);
                    SetVehicleNumberPlateText(vehicle, pData.plate);
                    RestoreVehicleDamage(vehicle, pData.damage);
                    SetVehicleAppearance(vehicle, pData.appearance);
                    SetMods(vehicle, pData.mods);
                    return [
                        4,
                        Wait(100)
                    ];
                case 2:
                    _state.sent();
                    SetEntityCoords(vehicle, pCoords.x, pCoords.y, pCoords.z, false, false, false, false);
                    SetModelAsNoLongerNeeded(modelHash);
                    return [
                        2,
                        vehicle
                    ];
            }
        });
    });
    return _SpawnDisplayVehicle.apply(this, arguments);
}
function GetSpawnedDisplayVehicles(pGarage) {
    var _DisplayVehicles_get;
    var garage = (_DisplayVehicles_get = DisplayVehicles.get(pGarage)) !== null && _DisplayVehicles_get !== void 0 ? _DisplayVehicles_get : new Map();
    if (!DisplayVehicles.has(pGarage)) {
        DisplayVehicles.set(pGarage, garage);
    }
    return garage;
}
function GetSpawnedDisplayVehicle(pGarage, pSpot) {
    var garage = GetSpawnedDisplayVehicles(pGarage);
    return garage.get(pSpot);
}
function SetSpawnedDisplayVehicle(pGarage, pSpot, pVehicle) {
    var garage = GetSpawnedDisplayVehicles(pGarage);
    var spot = garage.get(pSpot);
    if (spot) DeleteEntity(spot.entity);
    garage.set(pSpot, pVehicle);
    SpawnedEntities.add(pVehicle.entity);
}
function RemoveSpawnedDisplayVehicle(pGarage, pSpot) {
    var garage = GetSpawnedDisplayVehicles(pGarage);
    var spot = garage.get(pSpot);
    garage.delete(pSpot);
    if (!spot) return;
    DeleteEntity(spot.entity);
    SpawnedEntities.delete(spot.entity);
}
function IsDisplayVehicle(pVehicle) {
    return SpawnedEntities.has(pVehicle);
}
function GetDisplayVehicleData(pVehicle) {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = DisplayVehicles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = state_sliced_to_array(_step.value, 2), garageId = _step_value[0], spots = _step_value[1];
            var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
            try {
                for(var _iterator1 = spots[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                    var _step_value1 = state_sliced_to_array(_step1.value, 2), spotId = _step_value1[0], vehicle = _step_value1[1];
                    if (vehicle.entity !== pVehicle) continue;
                    return {
                        garage: garageId,
                        spot: spotId,
                        vehicle: vehicle
                    };
                }
            } catch (err) {
                _didIteratorError1 = true;
                _iteratorError1 = err;
            } finally{
                try {
                    if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                        _iterator1.return();
                    }
                } finally{
                    if (_didIteratorError1) {
                        throw _iteratorError1;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
function DeleteGarageDisplayVehicles(pGarage) {
    var garage = GetSpawnedDisplayVehicles(pGarage);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = garage[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var _step_value = state_sliced_to_array(_step.value, 2), spotId = _step_value[0], vehicle = _step_value[1];
            RemoveSpawnedDisplayVehicle(pGarage, spotId);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
function SpawnGarageDisplayVehicles(pGarage) {
    return _SpawnGarageDisplayVehicles.apply(this, arguments);
}
function _SpawnGarageDisplayVehicles() {
    _SpawnGarageDisplayVehicles = state_async_to_generator(function(pGarage) {
        var garage, spawned, vehicles, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;
        return state_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    garage = GetGarage(pGarage);
                    spawned = GetSpawnedDisplayVehicles(pGarage);
                    return [
                        4,
                        RPC.execute("np-vehicles:garages:getDisplayVehicles", pGarage)
                    ];
                case 1:
                    vehicles = _state.sent();
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        _loop = function() {
                            var _step_value = state_sliced_to_array(_step.value, 2), spotId = _step_value[0], vehicle = _step_value[1];
                            var spot = garage.parkingSpots.find(function(entry) {
                                return entry.id === spotId;
                            });
                            var currentSpawn = spawned.get(spotId);
                            if (currentSpawn && currentSpawn.vin !== vehicle.vin) {
                                DeleteEntity(currentSpawn.entity);
                            } else if (currentSpawn && currentSpawn.vin === vehicle.vin) {
                                return "continue";
                            }
                            SpawnDisplayVehicle(vehicle, spot.coords, spot.heading).then(function(handle) {
                                SetSpawnedDisplayVehicle(pGarage, spotId, {
                                    entity: handle,
                                    vin: vehicle.vin,
                                    plate: vehicle.plate,
                                    name: vehicle.name
                                });
                            });
                        };
                        for(_iterator = vehicles[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return _SpawnGarageDisplayVehicles.apply(this, arguments);
}
on("onResourceStop", function(resource) {
    if (resource !== GetCurrentResourceName()) return;
    SpawnedEntities.forEach(function(vehicle) {
        return DeleteEntity(vehicle);
    });
});

;// CONCATENATED MODULE: ./src/client/controllers/garage/display/events.ts
function display_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function display_events_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                display_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                display_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function display_events_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function InitGarageParkingEvents() {
    return _InitGarageParkingEvents.apply(this, arguments);
}
function _InitGarageParkingEvents() {
    _InitGarageParkingEvents = display_events_async_to_generator(function() {
        return display_events_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    // SetNearbyGarage('garage_num_3', true);
    //
    // RefreshDisplaySpots();
    });
    return _InitGarageParkingEvents.apply(this, arguments);
}
onNet("np-vehicles:garages:removeDisplayVehicle", function(pGarage, pSpot) {
    if (!HasNearbyDisplayGarage(pGarage)) return;
    RemoveSpawnedDisplayVehicle(pGarage, pSpot);
    ClearGarageCache(pGarage);
});
onNet("np-vehicles:garages:setDisplayVehicle", function() {
    var _ref = display_events_async_to_generator(function(pGarage, pSpot, pVehicle) {
        var garage, spot, handle;
        return display_events_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!HasNearbyDisplayGarage(pGarage)) return [
                        2
                    ];
                    garage = garages_GetGarage(pGarage);
                    spot = garage.parkingSpots.find(function(entry) {
                        return entry.id === pSpot;
                    });
                    return [
                        4,
                        SpawnDisplayVehicle(pVehicle, spot.coords, spot.heading)
                    ];
                case 1:
                    handle = _state.sent();
                    SetSpawnedDisplayVehicle(pGarage, pSpot, {
                        entity: handle,
                        plate: pVehicle.plate,
                        name: pVehicle.name,
                        vin: pVehicle.vin
                    });
                    return [
                        2
                    ];
            }
        });
    });
    return function(pGarage, pSpot, pVehicle) {
        return _ref.apply(this, arguments);
    };
}());
on("np-vehicles:garages:openDisplayVehicleActions", function() {
    var _ref = display_events_async_to_generator(function(pParams, pEntity, pContext) {
        var data, hasAccess, elements;
        return display_events_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    data = GetDisplayVehicleData(pEntity);
                    return [
                        4,
                        HasGarageAccess(data.garage)
                    ];
                case 1:
                    hasAccess = _state.sent();
                    if (!hasAccess) {
                        return [
                            2,
                            emit("DoLongHudText", "You don't have access to this garage.", 2)
                        ];
                    }
                    elements = [
                        {
                            title: data.vehicle.name,
                            description: "Plate: ".concat(data.vehicle.plate)
                        },
                        {
                            title: "Change Vehicle",
                            key: {
                                action: "change",
                                data: data
                            },
                            action: "np-vehicles:garages:displayVehicleAction"
                        },
                        {
                            title: "Store Vehicle",
                            key: {
                                action: "store",
                                data: data
                            },
                            action: "np-vehicles:garages:displayVehicleAction"
                        },
                        {
                            title: "Unlock Vehicle",
                            key: {
                                action: "unlock",
                                data: data
                            },
                            action: "np-vehicles:garages:displayVehicleAction"
                        }
                    ];
                    __webpack_require__.g.exports["np-ui"].showContextMenu(elements);
                    return [
                        2
                    ];
            }
        });
    });
    return function(pParams, pEntity, pContext) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np-vehicles:garages:displayVehicleAction", function() {
    var _ref = display_events_async_to_generator(function(pData, cb) {
        var payload;
        return display_events_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    cb({
                        data: {},
                        meta: {
                            ok: true,
                            message: ""
                        }
                    });
                    payload = pData.key;
                    return [
                        4,
                        RPC.execute("np-vehicles:garages:displayVehicleAction", payload.action, payload.data.garage, payload.data.spot, payload.data.vehicle)
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(pData, cb) {
        return _ref.apply(this, arguments);
    };
}());

;// CONCATENATED MODULE: ./src/client/controllers/garage/display/index.ts
function display_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function display_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                display_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                display_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function display_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitGarageDisplay() {
    return _InitGarageDisplay.apply(this, arguments);
}
function _InitGarageDisplay() {
    _InitGarageDisplay = display_async_to_generator(function() {
        var interaction;
        return display_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        InitGarageParkingEvents()
                    ];
                case 1:
                    _state.sent();
                    PolyZone.addBoxZone("business_hno_meet", {
                        x: 954.95,
                        y: -1769.85,
                        z: 21.03
                    }, 13.6, 11.0, {
                        heading: 0,
                        minZ: 16.63,
                        maxZ: 26.23,
                        data: {
                            id: "business_hno_meet"
                        }
                    });
                    interaction = {
                        data: [
                            {
                                id: "garage_display_vehicle_store",
                                label: "vehicle actions",
                                icon: "warehouse",
                                event: "np-vehicles:garages:openDisplayVehicleActions",
                                parameters: {}
                            }
                        ],
                        options: {
                            distance: {
                                radius: 3.5
                            },
                            isEnabled: function(pEntity) {
                                return IsDisplayVehicle(pEntity);
                            }
                        }
                    };
                    __webpack_require__.g.exports["np-interact"].AddPeekEntryByEntityType(2, interaction.data, interaction.options);
                    return [
                        2
                    ];
            }
        });
    });
    return _InitGarageDisplay.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/garage/display/commands.ts
function commands_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function commands_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                commands_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                commands_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function commands_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var InitDisplayCommands = function() {};
RegisterCommand("np-vehicles:addGaragePanel", function() {
    var _ref = commands_async_to_generator(function(pSource, pArgs) {
        var objectId;
        return commands_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (!pArgs[0]) return [
                        2,
                        console.log("Provide garage ID bitch")
                    ];
                    return [
                        4,
                        __webpack_require__.g.exports["np-objects"].PlaceAndSaveObject("hei_prop_dlc_tablet", {
                            garage: pArgs[0]
                        }, {
                            groundSnap: true,
                            useModelOffset: true,
                            adjustZ: true,
                            distance: 25.0,
                            maxDistance: 400.0,
                            allowHousePlacement: true,
                            allowGizmo: true
                        }, function() {
                            return true;
                        }, "vehicle_garage_panels")
                    ];
                case 1:
                    objectId = _state.sent();
                    console.log(objectId);
                    return [
                        2
                    ];
            }
        });
    });
    return function(pSource, pArgs) {
        return _ref.apply(this, arguments);
    };
}(), false);

;// CONCATENATED MODULE: ./src/client/controllers/garage/index.ts
function garage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function garage_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                garage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                garage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function garage_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitGarageModule() {
    return _InitGarageModule.apply(this, arguments);
}
function _InitGarageModule() {
    _InitGarageModule = garage_async_to_generator(function() {
        return garage_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        InitGarageDisplay()
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        InitDisplayCommands()
                    ];
                case 2:
                    _state.sent();
                    // Additional garages
                    PolyZone.addBoxZone("business_lsbn", {
                        x: -583.26,
                        y: -930.73,
                        z: 36.79
                    }, 11.6, 11.8, {
                        heading: 0,
                        minZ: 35.79,
                        maxZ: 40.59,
                        data: {
                            id: "business_lsbn"
                        }
                    });
                    PolyZone.addBoxZone("ems_shared", {
                        x: -821.05,
                        y: -1197.96,
                        z: 6.82
                    }, 7.0, 20.8, {
                        heading: 320,
                        minZ: 5.22,
                        maxZ: 9.82,
                        data: {
                            id: "ems_shared"
                        }
                    });
                    PolyZone.addBoxZone("air_a", {
                        x: -1236.08,
                        y: -2888.68,
                        z: 14.55
                    }, 20.0, 20.0, {
                        heading: 330,
                        minZ: 12.79,
                        maxZ: 17.39,
                        data: {
                            id: "air_a"
                        }
                    });
                    return [
                        2
                    ];
            }
        });
    });
    return _InitGarageModule.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/fuel/index.ts
function controllers_fuel_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function controllers_fuel_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                controllers_fuel_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                controllers_fuel_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function controllers_fuel_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function InitFuelModule() {
    return _InitFuelModule.apply(this, arguments);
}
function _InitFuelModule() {
    _InitFuelModule = controllers_fuel_async_to_generator(function() {
        return controllers_fuel_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    // await InitPumps();
    });
    return _InitFuelModule.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/tools/Matrix.ts
function Matrix_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function Matrix_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function Matrix_create_class(Constructor, protoProps, staticProps) {
    if (protoProps) Matrix_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) Matrix_defineProperties(Constructor, staticProps);
    return Constructor;
}
function Matrix_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

var Matrix3x3 = /*#__PURE__*/ function() {
    "use strict";
    function Matrix3x3(values) {
        Matrix_class_call_check(this, Matrix3x3);
        Matrix_define_property(this, "values", void 0);
        if (values) {
            this.values = values;
        } else {
            this.values = [
                [
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0
                ]
            ];
        }
    }
    Matrix_create_class(Matrix3x3, [
        {
            key: "at",
            value: function at(row, col) {
                return this.values[row][col];
            }
        },
        {
            key: "multiply",
            value: function multiply(mat) {
                var _this = this;
                var resMatrix = new Matrix3x3();
                resMatrix.values = resMatrix.values.map(function(row, i) {
                    return row.map(function(val, j) {
                        return _this.values[i].reduce(function(sum, elm, k) {
                            return sum + elm * mat.at(k, j);
                        }, 0);
                    });
                });
                return resMatrix;
            }
        },
        {
            key: "multiplyVec",
            value: function multiplyVec(vec) {
                var temp = this.values;
                temp = temp.map(function(row) {
                    return row.map(function(val, i) {
                        return val * vec.toArray()[i];
                    });
                });
                var sum = temp.map(function(row) {
                    return row.reduce(function(a, b) {
                        return a + b;
                    });
                });
                return new Vector_Vector3C(sum);
            }
        }
    ]);
    return Matrix3x3;
}();


;// CONCATENATED MODULE: ./src/client/tools/Vector.ts
function Vector_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function Vector_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function Vector_create_class(Constructor, protoProps, staticProps) {
    if (protoProps) Vector_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) Vector_defineProperties(Constructor, staticProps);
    return Constructor;
}
function Vector_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}

var Vector_Vector3C = /*#__PURE__*/ function() {
    "use strict";
    function Vector3C(values) {
        Vector_class_call_check(this, Vector3C);
        Vector_define_property(this, "values", void 0);
        if (values) {
            this.values = values;
        } else {
            this.values = [
                0,
                0,
                0
            ];
        }
    }
    Vector_create_class(Vector3C, [
        {
            key: "x",
            get: function get() {
                return this.values[0];
            },
            set: function set(value) {
                this.values[0] = value;
            }
        },
        {
            key: "y",
            get: function get() {
                return this.values[1];
            },
            set: function set(value) {
                this.values[1] = value;
            }
        },
        {
            key: "z",
            get: function get() {
                return this.values[2];
            },
            set: function set(value) {
                this.values[2] = value;
            }
        },
        {
            key: "toArray",
            value: function toArray() {
                return [
                    this.x,
                    this.y,
                    this.z
                ];
            }
        },
        {
            key: "get",
            value: function get() {
                return {
                    x: this.values[0],
                    y: this.values[1],
                    z: this.values[2]
                };
            }
        },
        {
            key: "add",
            value: function add(vector) {
                var temp = this.values.map(function(val, i) {
                    return val + vector.values[i];
                });
                return new Vector3C(temp);
            }
        },
        {
            key: "subtract",
            value: function subtract(vector) {
                var temp = this.values.map(function(val, i) {
                    return val - vector.values[i];
                });
                return new Vector3C(temp);
            }
        },
        {
            key: "distance",
            value: function distance(vec2) {
                var vec1 = this;
                return Math.sqrt(Math.pow(vec2.x - vec1.x, 2) + Math.pow(vec2.y - vec1.y, 2) + Math.pow(vec2.z - vec1.z, 2));
            }
        },
        {
            key: "rotatePoint",
            value: function rotatePoint(origin, rotationAmount) {
                var position = this;
                var P = position.subtract(origin);
                var RotX = rotationAmount.x * (Math.PI / 180);
                var RotY = rotationAmount.y * (Math.PI / 180);
                var RotZ = rotationAmount.z * (Math.PI / 180);
                var Rx = new Matrix3x3([
                    [
                        1,
                        0,
                        0
                    ],
                    [
                        0,
                        Math.cos(RotX),
                        -Math.sin(RotX)
                    ],
                    [
                        0,
                        Math.sin(RotX),
                        Math.cos(RotX)
                    ]
                ]);
                var Ry = new Matrix3x3([
                    [
                        Math.cos(RotY),
                        0,
                        Math.sin(RotY)
                    ],
                    [
                        0,
                        1,
                        0
                    ],
                    [
                        -Math.sin(RotY),
                        0,
                        Math.cos(RotY)
                    ]
                ]);
                var Rz = new Matrix3x3([
                    [
                        Math.cos(RotZ),
                        -Math.sin(RotZ),
                        0
                    ],
                    [
                        Math.sin(RotZ),
                        Math.cos(RotZ),
                        0
                    ],
                    [
                        0,
                        0,
                        1
                    ]
                ]);
                var R = Rz.multiply(Ry).multiply(Rx);
                var RotP = R.multiplyVec(P);
                var MoveP = RotP.add(origin);
                return MoveP;
            }
        }
    ]);
    return Vector3C;
}();


;// CONCATENATED MODULE: ./src/client/controllers/vehiclemenu/threads.ts
function vehiclemenu_threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function vehiclemenu_threads_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                vehiclemenu_threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                vehiclemenu_threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function vehiclemenu_threads_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


var threads_Player = 0;
var Veh = 0;
var VehHash = 0;
var show = false;
var VehicleThread = new Thread(/*#__PURE__*/ vehiclemenu_threads_async_to_generator(function() {
    return vehiclemenu_threads_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                UpdateVehicleVariables();
                if (!(Veh != 0)) return [
                    3,
                    2
                ];
                return [
                    4,
                    UpdateMenuData()
                ];
            case 1:
                _state.sent();
                RefreshMenu();
                return [
                    3,
                    3
                ];
            case 2:
                show = false;
                this.stop();
                _state.label = 3;
            case 3:
                return [
                    2
                ];
        }
    });
}), 1000);
VehicleThread.addHook("afterStop", function() {
    CloseMenu();
});
/**
 * Disable camera controls, since we are using the mouse to control the menu
 */ var DisableCameraThread = new Thread(/*#__PURE__*/ vehiclemenu_threads_async_to_generator(function() {
    return vehiclemenu_threads_ts_generator(this, function(_state) {
        DisableControlAction(0, 270, true);
        DisableControlAction(0, 271, true);
        DisableControlAction(0, 272, true);
        DisableControlAction(0, 273, true);
        DisableControlAction(0, 1, true);
        DisableControlAction(0, 2, true);
        DisableControlAction(0, 24, true);
        DisableControlAction(0, 69, true);
        DisableControlAction(0, 92, true);
        return [
            2
        ];
    });
}), 0);
/**
 * Updates global vehicle variables for the entire menu
 */ function UpdateVehicleVariables() {
    threads_Player = GetPlayerPed(-1);
    Veh = GetVehiclePedIsIn(threads_Player, false);
    VehHash = GetEntityModel(Veh);
}
function ShowMenu(toggle) {
    show = toggle;
    if (show) {
        OpenMenu();
    }
}
function OpenMenu() {
    DisableCameraThread.start();
    __webpack_require__.g.exports["np-ui"].openApplication("vehiclemenu", {
        settings: settings,
        show: show
    });
    __webpack_require__.g.exports["np-ui"].SetUIFocusCustom(true, true);
}
function CloseMenu() {
    DisableCameraThread.stop();
    show = false;
    __webpack_require__.g.exports["np-ui"].SetUIFocusCustom(false, false);
    __webpack_require__.g.exports["np-ui"].closeApplication("vehiclemenu", {
        show: show
    });
}
function RefreshMenu() {
    __webpack_require__.g.exports["np-ui"].sendAppEvent("vehiclemenu", {
        settings: settings,
        show: show
    });
}

;// CONCATENATED MODULE: ./src/client/controllers/vehiclemenu/vehiclemenu.ts
function vehiclemenu_array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function vehiclemenu_array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function vehiclemenu_array_without_holes(arr) {
    if (Array.isArray(arr)) return vehiclemenu_array_like_to_array(arr);
}
function vehiclemenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function vehiclemenu_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                vehiclemenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                vehiclemenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function vehiclemenu_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function vehiclemenu_iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function vehiclemenu_iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function vehiclemenu_non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function vehiclemenu_non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function vehiclemenu_object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            vehiclemenu_define_property(target, key, source[key]);
        });
    }
    return target;
}
function vehiclemenu_sliced_to_array(arr, i) {
    return vehiclemenu_array_with_holes(arr) || vehiclemenu_iterable_to_array_limit(arr, i) || vehiclemenu_unsupported_iterable_to_array(arr, i) || vehiclemenu_non_iterable_rest();
}
function vehiclemenu_to_consumable_array(arr) {
    return vehiclemenu_array_without_holes(arr) || vehiclemenu_iterable_to_array(arr) || vehiclemenu_unsupported_iterable_to_array(arr) || vehiclemenu_non_iterable_spread();
}
function vehiclemenu_unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return vehiclemenu_array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return vehiclemenu_array_like_to_array(o, minLen);
}
function vehiclemenu_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}






function InitVehicleMenuMain() {
    return _InitVehicleMenuMain.apply(this, arguments);
}
function _InitVehicleMenuMain() {
    _InitVehicleMenuMain = vehiclemenu_async_to_generator(function() {
        return vehiclemenu_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitVehicleMenuMain.apply(this, arguments);
}
var vehicleData = new Map();
var settings = {
    isDriver: false,
    isFrontPassenger: false,
    seats: [],
    engine: false,
    doors: [],
    windows: [],
    neons: {},
    bonnet: {},
    boot: {},
    nitrous: {},
    nitrousFlowrate: 0,
    hazard: {},
    indicatorLeft: {},
    indicatorRight: {},
    extLights: {},
    intLights: {},
    convertible: false
};
var eDoorId;
(function(eDoorId) {
    eDoorId[eDoorId["DOOR_DSIDE_F"] = 0] = "DOOR_DSIDE_F";
    eDoorId[eDoorId["DOOR_PSIDE_F"] = 1] = "DOOR_PSIDE_F";
    eDoorId[eDoorId["DOOR_DSIDE_R"] = 2] = "DOOR_DSIDE_R";
    eDoorId[eDoorId["DOOR_PSIDE_R"] = 3] = "DOOR_PSIDE_R";
    eDoorId[eDoorId["BONNET"] = 4] = "BONNET";
    eDoorId[eDoorId["BOOT"] = 5] = "BOOT";
})(eDoorId || (eDoorId = {}));
var eWindowId;
(function(eWindowId) {
    eWindowId[eWindowId["WINDOW_LF"] = 0] = "WINDOW_LF";
    eWindowId[eWindowId["WINDOW_RF"] = 1] = "WINDOW_RF";
    eWindowId[eWindowId["WINDOW_LR"] = 2] = "WINDOW_LR";
    eWindowId[eWindowId["WINDOW_RR"] = 3] = "WINDOW_RR";
    eWindowId[eWindowId["WINDOW_LM"] = 4] = "WINDOW_LM";
    eWindowId[eWindowId["WINDOW_RM"] = 5] = "WINDOW_RM";
})(eWindowId || (eWindowId = {}));
var eSeatId;
(function(eSeatId) {
    eSeatId[eSeatId["SEAT_DSIDE_F"] = -1] = "SEAT_DSIDE_F";
    eSeatId[eSeatId["SEAT_PSIDE_F"] = 0] = "SEAT_PSIDE_F";
    eSeatId[eSeatId["SEAT_DSIDE_R"] = 1] = "SEAT_DSIDE_R";
    eSeatId[eSeatId["SEAT_PSIDE_R"] = 2] = "SEAT_PSIDE_R";
    eSeatId[eSeatId["SEAT_DSIDE_R1"] = 3] = "SEAT_DSIDE_R1";
    eSeatId[eSeatId["SEAT_PSIDE_R1"] = 4] = "SEAT_PSIDE_R1";
    eSeatId[eSeatId["SEAT_DSIDE_R2"] = 5] = "SEAT_DSIDE_R2";
    eSeatId[eSeatId["SEAT_PSIDE_R2"] = 6] = "SEAT_PSIDE_R2";
    eSeatId[eSeatId["SEAT_DSIDE_R3"] = 7] = "SEAT_DSIDE_R3";
    eSeatId[eSeatId["SEAT_PSIDE_R3"] = 8] = "SEAT_PSIDE_R3";
    eSeatId[eSeatId["SEAT_DSIDE_R4"] = 9] = "SEAT_DSIDE_R4";
    eSeatId[eSeatId["SEAT_PSIDE_R4"] = 10] = "SEAT_PSIDE_R4";
    eSeatId[eSeatId["SEAT_DSIDE_R5"] = 11] = "SEAT_DSIDE_R5";
    eSeatId[eSeatId["SEAT_PSIDE_R5"] = 12] = "SEAT_PSIDE_R5";
    eSeatId[eSeatId["SEAT_DSIDE_R6"] = 13] = "SEAT_DSIDE_R6";
    eSeatId[eSeatId["SEAT_PSIDE_R6"] = 14] = "SEAT_PSIDE_R6";
    eSeatId[eSeatId["SEAT_DSIDE_R7"] = 15] = "SEAT_DSIDE_R7";
    eSeatId[eSeatId["SEAT_PSIDE_R7"] = 16] = "SEAT_PSIDE_R7";
    eSeatId[eSeatId["SEAT_F"] = 17] = "SEAT_F";
    eSeatId[eSeatId["SEAT_R"] = 18] = "SEAT_R";
})(eSeatId || (eSeatId = {}));
/**
 * Loads bone offsets data from np-config
 * Saves the offsets in the variable vehicleData (Map<number, Bones>)
 *
 * This function also includes a check to see if the number of vehicles in the config match the number of available vehicles in the game.
 * If they don't match, it will log a warning to the console. Uncomment the function call at the bottom of this function to recompile the config.
 */ function InitBoneOffsetsData() {
    return _InitBoneOffsetsData.apply(this, arguments);
}
function _InitBoneOffsetsData() {
    _InitBoneOffsetsData = vehiclemenu_async_to_generator(function() {
        var config, key, windows, doors, seats, bone, bone1, bone2, vehicles, _vehicleData, forceModelRecompile;
        return vehiclemenu_ts_generator(this, function(_state) {
            config = config_GetModuleConfig("np-vehicles:vehicleMenuOffsets");
            if (config === undefined) return [
                2
            ];
            for(var key in config["main"]){
                windows = {};
                doors = {};
                seats = {};
                for(var bone in config["main"][key].windows){
                    windows[bone] = new Vector_Vector3C(Object.values(config["main"][key].windows[bone]));
                }
                for(var bone1 in config["main"][key].seats){
                    seats[bone1] = new Vector_Vector3C(Object.values(config["main"][key].seats[bone1]));
                }
                for(var bone2 in config["main"][key].doors){
                    doors[bone2] = new Vector_Vector3C(Object.values(config["main"][key].doors[bone2]));
                }
                vehicleData.set(Number(key), {
                    windows: windows,
                    doors: doors,
                    seats: seats
                });
            }
            console.log("[INIT][CONFIG][LOADED]");
            if (GetConvar("sv_environment", "prod") == "debug") {
                vehicles = GetAllVehicleModels();
                _vehicleData = vehicleData;
                if (_vehicleData.size !== vehicles.length) {
                    console.log("[WARNING][" + "".concat(_vehicleData.size) + " vs " + "".concat(vehicles.length) + "] config/config/np-vehicles/vehicleMenuOffsets.json needs to be re-compiled, number of vehicles mismatch. Run CreateVehicleOffsetDatabase() in InitBoneOffsetsData() to update.");
                } else {
                    console.log("[CONFIG] offset check 100%,", vehicles.length, "loaded");
                }
                forceModelRecompile = [];
                if (false) {}
            }
            return [
                2
            ];
        });
    });
    return _InitBoneOffsetsData.apply(this, arguments);
}
/**
 * Sorts bones by x and y coordinates and places in a grid
 * @param bones
 * @param threshold max distance to group
 * @returns any[][] sorted bones
 */ function sortBones(bones, threshold) {
    var _Math;
    if (bones.length === 0) return [];
    var boneGrid = [];
    bones.sort(function(bone1, bone2) {
        return bone1.coord.x - bone2.coord.x;
    });
    boneGrid[0] = [
        bones[0]
    ];
    for(var i = 1; i < bones.length; i++){
        var bone = bones[i];
        if (bone.coord.x > bones[i - 1].coord.x + threshold) {
            boneGrid.push([]);
        }
        boneGrid[boneGrid.length - 1].push(bone);
    }
    var keys = Object.keys(boneGrid);
    keys.forEach(function(key) {
        boneGrid[key].sort(function(a, b) {
            return b.coord.y - a.coord.y;
        });
    });
    var button = {
        name: false,
        coord: {
            x: 0,
            y: 0,
            z: 0
        },
        occupied: false,
        index: false,
        open: false,
        access: false,
        type: false
    };
    var colLengths = [];
    var max = 0;
    for(var c = 0; c < boneGrid.length; c++){
        var len = boneGrid[c].length;
        if (len > max) max = len;
        colLengths.push(boneGrid[c].length);
    }
    var maxIndex = colLengths.indexOf((_Math = Math).max.apply(_Math, vehiclemenu_to_consumable_array(colLengths)));
    if (maxIndex === 0) return boneGrid;
    for(var c1 = 0; c1 < boneGrid.length; c1++){
        if (boneGrid[c1].length === max) continue;
        for(var i1 = 0; i1 < boneGrid[c1].length && boneGrid[c1].length < max; i1++){
            var distance = 0 - boneGrid[c1][i1].coord.y;
            var distance2 = 0 - boneGrid[maxIndex][i1].coord.y;
            if (Math.abs(distance - distance2) < threshold) continue;
            var addIndex = i1;
            if (distance < distance2) {
                addIndex++;
            }
            button.coord.x = boneGrid[c1][i1].coord.x;
            button.coord.y = boneGrid[maxIndex][i1].coord.y;
            boneGrid[c1].splice(addIndex, 0, button);
        }
    }
    return boneGrid;
}
/**
 * Does a player have access to doors/windows based on distance to the bone
 * @param bonePosition door/window bone position
 * @param seatPos player seat position
 * @param threshold max distance to allow access
 * @returns boolean
 */ function accessCheck(bonePosition, seatPos, threshold) {
    var access = false;
    var ped = GetPedInVehicleSeat(Veh, -1);
    if (ped !== threads_Player) {
        if (seatPos.distance(bonePosition) < threshold) {
            access = true;
        }
    } else {
        access = true;
    }
    return access;
}
/**
 * Gets the player's world seat position
 * @returns Vector3C
 */ function getPedSeatPos() {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = Object.keys(vehicleData.get(VehHash).seats)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var seat = _step.value;
            var ped = GetPedInVehicleSeat(Veh, eSeatId[seat]);
            if (ped == threads_Player) {
                return new Vector_Vector3C(vehicleData.get(VehHash).seats[seat].toArray());
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return null;
}
/**
 * Constructs the seat structure for the UI
 */ function CheckSeats() {
    // Exported for instant UI update
    var seats = vehicleData.get(VehHash).seats;
    var seatBones = [];
    var counter = -1;
    settings.seats = [];
    Object.keys(seats).forEach(function(seat) {
        var xyz = new Vector_Vector3C(seats[seat].toArray());
        var ped = GetPedInVehicleSeat(Veh, counter);
        var occupied = false;
        if (ped === threads_Player) {
            occupied = counter;
        } else if (ped !== 0) {
            occupied = true;
        }
        seatBones.push({
            name: seat,
            coord: vehiclemenu_object_spread({}, xyz.get()),
            access: occupied,
            index: counter,
            type: "seat"
        });
        counter++;
    });
    settings.seats = sortBones(seatBones, 0.3);
}
/**
 * Constructs the door structure for the UI
 */ function CheckDoors() {
    var doors = vehicleData.get(VehHash).doors;
    var doorBones = [];
    settings.doors = [];
    var seatPos = getPedSeatPos() || new Vector_Vector3C();
    Object.keys(doors).forEach(function(door) {
        var xyz = new Vector_Vector3C(doors[door].toArray());
        var access = accessCheck(xyz, seatPos, 1.1);
        var open = GetVehicleDoorAngleRatio(Veh, eDoorId[door]) !== 0 && true || false;
        doorBones.push({
            open: open,
            access: access,
            index: eDoorId[door],
            coord: vehiclemenu_object_spread({}, xyz.get()),
            name: door,
            type: [
                "BOOT",
                "BONNET"
            ].includes(door) ? door.toLowerCase() : "door"
        });
    });
    settings.doors = sortBones(doorBones, 0.7);
}
/**
 * Constructs the window structure for the UI
 */ function CheckWindows() {
    var windows = vehicleData.get(VehHash).windows;
    var seatPos = getPedSeatPos() || new Vector_Vector3C();
    var windowBones = [];
    var counter = 0;
    settings.windows = [];
    var isConvertibleDown = IsVehicleAConvertible(Veh, false) && GetConvertibleRoofState(Veh) != 0;
    Object.keys(windows).forEach(function(window) {
        var xyz = new Vector_Vector3C(windows[window].toArray());
        var access = isConvertibleDown ? false : accessCheck(xyz, seatPos, 1.1); // if roof down, no access
        var open = !IsVehicleWindowIntact(Veh, counter);
        windowBones.push({
            open: open,
            access: access,
            index: counter,
            coord: vehiclemenu_object_spread({}, xyz.get()),
            name: window,
            type: "window"
        });
        counter++;
    });
    settings.windows = sortBones(windowBones, 0.7);
}
/**
 * Main updater for the UI
 */ function UpdateMenuData() {
    return _UpdateMenuData.apply(this, arguments);
}
function _UpdateMenuData() {
    _UpdateMenuData = vehiclemenu_async_to_generator(function() {
        var leftIndicator, rightIndicator, indicatorState, _GetVehicleLightsState, nothing, lights, highbeam, isTowTruck;
        return vehiclemenu_ts_generator(this, function(_state) {
            if (!vehicleData.has(VehHash)) {
                // const data = await updateMissingVehicleData(VehHash);
                // if (data) {
                //     let windows = {};
                //     let doors = {};
                //     let seats = {};
                //     for (const bone in data.windows) {
                //         windows[bone] = new Vector3C(Object.values(data.windows[bone]));
                //     }
                //     for (const bone in data.seats) {
                //         seats[bone] = new Vector3C(Object.values(data.seats[bone]));
                //     }
                //     for (const bone in data.doors) {
                //         doors[bone] = new Vector3C(Object.values(data.doors[bone]));
                //     }
                //     vehicleData.set(Number(VehHash), { windows, doors, seats });
                // } else {
                // Layout hasn't been calculated yet, so we'll just use a default
                vehicleData.set(VehHash, {
                    windows: {
                        WINDOW_LF: new Vector_Vector3C([
                            -0.73716801404953,
                            0.09372401237487793,
                            1.1301639080047607
                        ]),
                        WINDOW_RF: new Vector_Vector3C([
                            0.7271689772605896,
                            0.09372401237487793,
                            1.1301639080047607
                        ]),
                        WINDOW_LR: new Vector_Vector3C([
                            -0.7287450432777405,
                            -0.7626930475234985,
                            1.1384620666503906
                        ]),
                        WINDOW_RR: new Vector_Vector3C([
                            0.7287450432777405,
                            -0.7626919746398926,
                            1.1384620666503906
                        ])
                    },
                    doors: {
                        DOOR_DSIDE_F: new Vector_Vector3C([
                            -0.9533470273017883,
                            0.8318110108375549,
                            0.8246150016784668
                        ]),
                        DOOR_PSIDE_F: new Vector_Vector3C([
                            0.9433469772338867,
                            0.8318110108375549,
                            0.8246150016784668
                        ]),
                        DOOR_DSIDE_R: new Vector_Vector3C([
                            -0.9501510262489319,
                            -0.2986690104007721,
                            0.8246150016784668
                        ]),
                        DOOR_PSIDE_R: new Vector_Vector3C([
                            0.9501510262489319,
                            -0.2986690104007721,
                            0.8246150016784668
                        ]),
                        BONNET: new Vector_Vector3C([
                            0,
                            0.8641200065612793,
                            0.9229570031166077
                        ]),
                        BOOT: new Vector_Vector3C([
                            0,
                            -1.9260400533676147,
                            0.9556519985198975
                        ])
                    },
                    seats: {
                        SEAT_DSIDE_F: new Vector_Vector3C([
                            -0.4432460069656372,
                            0.04329700022935867,
                            0.5168049931526184
                        ]),
                        SEAT_PSIDE_F: new Vector_Vector3C([
                            0.4432460069656372,
                            0.04329700022935867,
                            0.5168049931526184
                        ]),
                        SEAT_DSIDE_R: new Vector_Vector3C([
                            -0.45486998558044434,
                            -0.7734299898147583,
                            0.5352879762649536
                        ]),
                        SEAT_PSIDE_R: new Vector_Vector3C([
                            0.4617060124874115,
                            -0.7734299898147583,
                            0.5352879762649536
                        ])
                    }
                });
            }
            CheckSeats();
            CheckDoors();
            CheckWindows();
            settings.isDriver = GetPedInVehicleSeat(Veh, -1) === threads_Player;
            settings.isFrontPassenger = GetPedInVehicleSeat(Veh, 0) === threads_Player;
            settings.engine = GetIsVehicleEngineRunning(Veh);
            settings.neons = {
                active: __webpack_require__.g.exports["np-vehiclesync"].HasSyncFlag(Veh, "neonLights"),
                enabled: IsVehicleNeonOn(Veh)
            };
            settings.nitrous = {
                enabled: VehicleHasNitro(Veh),
                mode: nitro_Config.mode
            };
            settings.nitrousFlowrate = nitro_Config.flowRate;
            leftIndicator = GetEntityBoneIndexByName(Veh, "indicator_lf") !== -1 || GetEntityBoneIndexByName(Veh, "indicator_lr") !== -1;
            rightIndicator = GetEntityBoneIndexByName(Veh, "indicator_rf") !== -1 || GetEntityBoneIndexByName(Veh, "indicator_rr") !== -1;
            indicatorState = GetVehicleIndicatorLights(Veh);
            settings.hazard = {
                enabled: leftIndicator && rightIndicator,
                active: indicatorState === 3
            };
            settings.indicatorLeft = {
                enabled: leftIndicator,
                active: [
                    3,
                    1
                ].includes(indicatorState)
            };
            settings.indicatorRight = {
                enabled: rightIndicator,
                active: [
                    3,
                    2
                ].includes(indicatorState)
            };
            _GetVehicleLightsState = vehiclemenu_sliced_to_array(GetVehicleLightsState(Veh), 3), nothing = _GetVehicleLightsState[0], lights = _GetVehicleLightsState[1], highbeam = _GetVehicleLightsState[2];
            settings.extLights = {
                enabled: GetEntityBoneIndexByName(Veh, "headlight_r") !== -1 || GetEntityBoneIndexByName(Veh, "headlight_l") !== -1 || GetEntityBoneIndexByName(Veh, "taillight_r") !== -1 || GetEntityBoneIndexByName(Veh, "taillight_l") !== -1,
                active: lights === 1 || highbeam === 1
            };
            settings.intLights = {
                enabled: GetEntityBoneIndexByName(Veh, "interiorlight") !== -1,
                active: IsVehicleInteriorLightOn(Veh)
            };
            isTowTruck = VehHash === GetHashKey("flatbedm2");
            settings.convertible = {
                enabled: isTowTruck ? false : IsVehicleAConvertible(Veh, false),
                state: GetConvertibleRoofState(Veh)
            };
            return [
                2
            ];
        });
    });
    return _UpdateMenuData.apply(this, arguments);
}
/**
 * Determines whether vehicle neons are attached to the car
 * @param pVehicle Entity
 * @returns boolean
 */ function IsVehicleNeonOn(pVehicle) {
    for(var i = 0; i < 4; i++){
        if (IsVehicleNeonLightEnabled(pVehicle, i)) {
            return true;
        }
    }
    return false;
}
function updateMissingVehicleData(hash) {
    return _updateMissingVehicleData.apply(this, arguments);
}
function _updateMissingVehicleData() {
    _updateMissingVehicleData = /**
 * Creates the bone offset data for the config
 * @param hash Vehicle hash
 */ vehiclemenu_async_to_generator(function(hash) {
        var _veh, windows, doors, seats;
        return vehiclemenu_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    console.log("[CONFIG][ERROR] Could not find vehicle layout, adding to server");
                    return [
                        4,
                        LoadEntityModel(hash, 2000)
                    ];
                case 1:
                    _state.sent();
                    if (!HasModelLoaded(hash)) return [
                        2,
                        false
                    ];
                    _veh = CreateVehicle(hash, 0, 0, 0, 0, false, false);
                    FreezeEntityPosition(_veh, true);
                    SetEntityAsMissionEntity(_veh, true, true);
                    return [
                        4,
                        new Promise(function(res) {
                            return setTimeout(res, 1000);
                        })
                    ];
                case 2:
                    _state.sent();
                    windows = {};
                    Object.keys(eWindowId).forEach(function(key) {
                        if (!Number.isNaN(Number(key))) return;
                        var index = GetEntityBoneIndexByName(_veh, key);
                        if (index === -1) return;
                        var pos = new Vector3C(GetWorldPositionOfEntityBone(_veh, index));
                        windows[key] = pos.get();
                    });
                    doors = {};
                    Object.keys(eDoorId).forEach(function(key) {
                        if (!Number.isNaN(Number(key))) return;
                        var index = GetEntityBoneIndexByName(_veh, key);
                        if (index === -1) return;
                        var pos = new Vector3C(GetWorldPositionOfEntityBone(_veh, index));
                        doors[key] = pos.get();
                    });
                    seats = {};
                    Object.keys(eSeatId).forEach(function(key) {
                        if (!Number.isNaN(Number(key))) return;
                        var index = GetEntityBoneIndexByName(_veh, key);
                        if (index === -1) return;
                        var pos = new Vector3C(GetWorldPositionOfEntityBone(_veh, index));
                        seats[key] = pos.get();
                    });
                    DeleteVehicle(_veh);
                    SetModelAsNoLongerNeeded(hash);
                    return [
                        2,
                        {
                            windows: windows,
                            doors: doors,
                            seats: seats
                        }
                    ];
            }
        });
    });
    return _updateMissingVehicleData.apply(this, arguments);
}
/**
 * Creates vehicle offset database and saves in np-config
 * @param forceModelRecompile List of vehicle models to recompile bone offsets
 */ function CreateVehicleOffsetDatabase(forceModelRecompile) {
    var checkChildren = function checkChildren(data) {
        if (Object.keys(data.doors).length === 0 && Object.keys(data.seats).length === 0 && Object.keys(data.windows).length === 0) return false;
        return true;
    };
    var badModels = [];
    setImmediate(/*#__PURE__*/ vehiclemenu_async_to_generator(function() {
        var vehicleMenuOffsets, vehicles, data, count, newOffsets, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, veh, hash, suc, err, config, _iteratorNormalCompletion1, _didIteratorError1, _iteratorError1, _loop, _iterator1, _step1, _json, cb;
        return vehiclemenu_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    vehicleMenuOffsets = new Map();
                    vehicles = GetAllVehicleModels();
                    // vehicles = vehicles.map((item) => GetHashKey(item));
                    forceModelRecompile = forceModelRecompile.map(function(item) {
                        return GetHashKey(item);
                    });
                    try {
                        data = vehicleData;
                        if (data == null) {
                            console.log("[CONFIG][MISSING]: Updating File");
                        } else {
                            vehicleMenuOffsets = vehicleData;
                            console.log("[CONFIG][VEHICLES] Size: " + "".concat(vehicleMenuOffsets.size) + "Game Size: " + "".concat(vehicles.length));
                            if (vehicleMenuOffsets.size == vehicles.length) {
                                console.log("[CONFIG] No update needed");
                                return [
                                    2
                                ];
                            } else {
                                console.log("[CONFIG] Updating File");
                            }
                        }
                    } catch (err) {
                        console.log(err);
                    }
                    count = 0;
                    newOffsets = new Map();
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    _state.label = 1;
                case 1:
                    _state.trys.push([
                        1,
                        6,
                        7,
                        8
                    ]);
                    _iterator = vehicles[Symbol.iterator]();
                    _state.label = 2;
                case 2:
                    if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                        3,
                        5
                    ];
                    veh = _step.value;
                    count++;
                    hash = GetHashKey(veh);
                    if (vehicleMenuOffsets.has(hash) && checkChildren(vehicleMenuOffsets.get(hash))) {
                        if (!forceModelRecompile.includes(hash)) {
                            newOffsets.set(hash, vehicleMenuOffsets.get(hash));
                            return [
                                3,
                                4
                            ];
                        }
                    }
                    return [
                        4,
                        updateMissingVehicleData(hash)
                    ];
                case 3:
                    suc = _state.sent();
                    if (!suc) {
                        badModels.push([
                            veh,
                            hash
                        ]);
                        return [
                            3,
                            4
                        ];
                    }
                    newOffsets.set(hash, suc);
                    console.log("Progress = ".concat(count, "/").concat(vehicles.length, " ").concat(veh));
                    _state.label = 4;
                case 4:
                    _iteratorNormalCompletion = true;
                    return [
                        3,
                        2
                    ];
                case 5:
                    return [
                        3,
                        8
                    ];
                case 6:
                    err = _state.sent();
                    _didIteratorError = true;
                    _iteratorError = err;
                    return [
                        3,
                        8
                    ];
                case 7:
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                    return [
                        7
                    ];
                case 8:
                    config = {
                        configId: "np-vehicles:vehicleMenuOffsets",
                        client: {
                            global: {
                                main: {}
                            }
                        }
                    };
                    _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                    try {
                        _loop = function() {
                            var veh = _step1.value;
                            var hash = veh[0];
                            var data = veh[1];
                            var windows = {};
                            var doors = {};
                            var seats = {};
                            Object.keys(data.windows).forEach(function(key) {
                                windows[key] = {
                                    x: data.windows[key].x,
                                    y: data.windows[key].y,
                                    z: data.windows[key].z
                                };
                                data.windows[key];
                            });
                            Object.keys(data.doors).forEach(function(key) {
                                doors[key] = {
                                    x: data.doors[key].x,
                                    y: data.doors[key].y,
                                    z: data.doors[key].z
                                };
                                data.doors[key];
                            });
                            Object.keys(data.seats).forEach(function(key) {
                                seats[key] = {
                                    x: data.seats[key].x,
                                    y: data.seats[key].y,
                                    z: data.seats[key].z
                                };
                                data.seats[key];
                            });
                            config.client.global.main[hash] = {
                                windows: windows,
                                doors: doors,
                                seats: seats
                            };
                        };
                        for(_iterator1 = newOffsets[Symbol.iterator](); !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true)_loop();
                    } catch (err) {
                        _didIteratorError1 = true;
                        _iteratorError1 = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                                _iterator1.return();
                            }
                        } finally{
                            if (_didIteratorError1) {
                                throw _iteratorError1;
                            }
                        }
                    }
                    _json = JSON.stringify(config);
                    console.log(_json);
                    return [
                        4,
                        RPC.execute("np:vehicles:vehicleMenuOffsetsWriteFile", _json)
                    ];
                case 9:
                    cb = _state.sent();
                    console.log("File Updated: config/config/np-vehicles/vehicleMenuOffsets.json", cb);
                    console.log("Bad Models: ", badModels);
                    return [
                        2
                    ];
            }
        });
    }));
}

;// CONCATENATED MODULE: ./src/client/controllers/vehiclemenu/events.ts
function vehiclemenu_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function vehiclemenu_events_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                vehiclemenu_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                vehiclemenu_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function vehiclemenu_events_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitVehicleMenuEvents() {
    return _InitVehicleMenuEvents.apply(this, arguments);
}
function _InitVehicleMenuEvents() {
    _InitVehicleMenuEvents = vehiclemenu_events_async_to_generator(function() {
        return vehiclemenu_events_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitVehicleMenuEvents.apply(this, arguments);
}
/**
 * Opens door or window
 * @param index door or window eNum not BoneIndex
 * @param type window, door
 * @returns
 */ function openDoorOrWindow(index, type) {
    UpdateVehicleVariables();
    if (Veh == 0) return;
    if (type == "door") {
        var lockStatus = GetVehicleDoorLockStatus(Veh);
        if (lockStatus == 1 || lockStatus == 0) {
            if (GetVehicleDoorAngleRatio(Veh, index) == 0) {
                SetVehicleDoorOpen(Veh, index, false, false);
            } else {
                SetVehicleDoorShut(Veh, index, false);
            }
        }
    } else if (type == "window") {
        if (!IsVehicleWindowIntact(Veh, index)) {
            RollUpWindow(Veh, index);
            if (!IsVehicleWindowIntact(Veh, index)) {
                RollDownWindow(Veh, index);
            }
        } else {
            RollDownWindow(Veh, index);
        }
    }
}
onNet("np-vehicles:vehiclemenu:openDoorOrWindow", openDoorOrWindow);
function toggleEngine() {
    TriggerEvent("vehicle:toggleEngine");
}
onNet("np-vehicles:vehiclemenu:toggleEngine", toggleEngine);
/**
 * Toggles lights
 * @param type hazard, extLights, intLights, indicatorLeft, indicatorRight
 */ function toggleLights(type) {
    UpdateVehicleVariables();
    if (type == "hazard") {
        __webpack_require__.g.exports["np-vehiclesync-state"].SetLightIndicators(1);
    }
    if (type == "extLights") {
        SetControlNormal(0, 74, 1);
    }
    if (type == "intLights") {
        SetVehicleInteriorlight(Veh, !IsVehicleInteriorLightOn(Veh));
    }
    if (type == "indicatorLeft") {
        __webpack_require__.g.exports["np-vehiclesync-state"].SetLightIndicators(2);
    }
    if (type == "indicatorRight") {
        __webpack_require__.g.exports["np-vehiclesync-state"].SetLightIndicators(4);
    }
}
onNet("np-vehicles:vehiclemenu:toggleLights", toggleLights);
function toggleConvertible() {
    UpdateVehicleVariables();
    if (IsVehicleAConvertible(Veh, false)) {
        if (GetConvertibleRoofState(Veh) != 0) {
            RaiseConvertibleRoof(Veh, false);
        } else {
            LowerConvertibleRoof(Veh, false);
        }
    }
}
onNet("np-vehicles:vehiclemenu:toggleConvertible", toggleConvertible);
/**
 * Toggles neon lights
 */ function toggleNeonLights() {
    UpdateVehicleVariables();
    __webpack_require__.g.exports["np-vehiclesync-state"].ToggleNeonLights(Veh);
}
onNet("np-vehicles:vehiclemenu:toggleNeonLights", toggleNeonLights);
RegisterUICallback("np-vehicles:vehiclemenu:neons", function() {
    var _ref = vehiclemenu_events_async_to_generator(function(pData, cb) {
        var driverPed, owner, user;
        return vehiclemenu_events_ts_generator(this, function(_state) {
            if (Veh == 0) return [
                2
            ];
            driverPed = GetPedInVehicleSeat(Veh, -1);
            owner = NetworkGetEntityOwner(Veh);
            user = PlayerId();
            if (driverPed != threads_Player && owner != user) {
                emitNet("np:vehicles:toggleNeonLights", GetPlayerServerId(NetworkGetPlayerIndexFromPed(driverPed)));
            } else {
                __webpack_require__.g.exports["np-vehiclesync-state"].ToggleNeonLights(Veh);
            }
            cb({
                data: {},
                meta: {
                    ok: true,
                    message: ""
                }
            });
            return [
                2
            ];
        });
    });
    return function(pData, cb) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np-vehicles:vehiclemenu:lights", function() {
    var _ref = vehiclemenu_events_async_to_generator(function(pData, cb) {
        var driverPed, owner, user;
        return vehiclemenu_events_ts_generator(this, function(_state) {
            if (Veh == 0) return [
                2
            ];
            driverPed = GetPedInVehicleSeat(Veh, -1);
            owner = NetworkGetEntityOwner(Veh);
            user = PlayerId();
            if (driverPed != threads_Player && owner != user) {
                emitNet("np:vehicles:toggleLights", GetPlayerServerId(NetworkGetPlayerIndexFromPed(driverPed)), pData.type);
            } else {
                toggleLights(pData.type);
            }
            cb({
                data: {},
                meta: {
                    ok: false,
                    message: ""
                }
            });
            return [
                2
            ];
        });
    });
    return function(pData, cb) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np-vehicles:vehiclemenu:openDoorOrWindow", function() {
    var _ref = vehiclemenu_events_async_to_generator(function(pData, cb) {
        var type, index, driverPed, owner, user;
        return vehiclemenu_events_ts_generator(this, function(_state) {
            type = pData.type;
            index = pData.index;
            if (Veh != 0) {
                driverPed = GetPedInVehicleSeat(Veh, -1);
                owner = NetworkGetEntityOwner(Veh);
                user = PlayerId();
                switch(type){
                    case "boot":
                    case "bonnet":
                        type = "door";
                        break;
                }
                if ([
                    "door",
                    "window"
                ].includes(type)) {
                    if (driverPed != threads_Player && owner != user) {
                        // Not Driver
                        emitNet("np:vehicles:openDoorOrWindow", GetPlayerServerId(NetworkGetPlayerIndexFromPed(driverPed)), index, type);
                        if (type == "window") {
                            openDoorOrWindow(index, type);
                        }
                    } else {
                        openDoorOrWindow(index, type);
                    }
                }
                if (type == "convertible") {
                    if (driverPed != threads_Player && owner != user) {
                        // Not Driver
                        emitNet("np:vehicles:toggleConvertible", GetPlayerServerId(NetworkGetPlayerIndexFromPed(driverPed)));
                    } else {
                        toggleConvertible();
                    }
                }
            }
            cb({
                data: {},
                meta: {
                    ok: true,
                    message: ""
                }
            });
            return [
                2
            ];
        });
    });
    return function(pData, cb) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np-vehicles:vehiclemenu:engine", function() {
    var _ref = vehiclemenu_events_async_to_generator(function(pData, cb) {
        var driverPed, owner, user;
        return vehiclemenu_events_ts_generator(this, function(_state) {
            if (Veh == 0) return [
                2
            ];
            driverPed = GetPedInVehicleSeat(Veh, -1);
            owner = NetworkGetEntityOwner(Veh);
            user = PlayerId();
            if (driverPed != threads_Player && owner != user) {
                emitNet("np:vehicles:toggleEngine", GetPlayerServerId(NetworkGetPlayerIndexFromPed(driverPed)));
            } else {
                TriggerEvent("vehicle:toggleEngine");
            }
            cb({
                data: {},
                meta: {
                    ok: true,
                    message: ""
                }
            });
            return [
                2
            ];
        });
    });
    return function(pData, cb) {
        return _ref.apply(this, arguments);
    };
}());
////
// Not Synced Callbacks
////
RegisterUICallback("np-vehicles:vehiclemenu:switchSeat", function() {
    var _ref = vehiclemenu_events_async_to_generator(function(pData, cb) {
        return vehiclemenu_events_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    TriggerEvent("vehicle:swapSeat", Number(pData.index));
                    return [
                        4,
                        UpdateMenuData()
                    ];
                case 1:
                    _state.sent();
                    RefreshMenu();
                    cb({
                        data: {},
                        meta: {
                            ok: true,
                            message: ""
                        }
                    });
                    return [
                        2
                    ];
            }
        });
    });
    return function(pData, cb) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np-vehicles:vehiclemenu:nitrous", function() {
    var _ref = vehiclemenu_events_async_to_generator(function(pData, cb) {
        var ped;
        return vehiclemenu_events_ts_generator(this, function(_state) {
            if (Veh != 0) {
                ped = GetPedInVehicleSeat(Veh, -1);
                if (ped == threads_Player) {
                    if (pData.type == "nitrous") {
                        ToggleNitroMode();
                    }
                    if (pData.type == "nitrous+") {
                        IncreaseNitroFlow();
                    }
                    if (pData.type == "nitrous-") {
                        DecreaseNitroFlow();
                    }
                    cb({
                        data: {},
                        meta: {
                            ok: true,
                            message: ""
                        }
                    });
                }
            }
            cb({
                data: {},
                meta: {
                    ok: false,
                    message: ""
                }
            });
            return [
                2
            ];
        });
    });
    return function(pData, cb) {
        return _ref.apply(this, arguments);
    };
}());
RegisterUICallback("np-vehicles:vehiclemenu:hideMenu", function() {
    var _ref = vehiclemenu_events_async_to_generator(function(pData, cb) {
        return vehiclemenu_events_ts_generator(this, function(_state) {
            VehicleThread.stop();
            cb({
                data: {},
                meta: {
                    ok: false,
                    message: ""
                }
            });
            return [
                2
            ];
        });
    });
    return function(pData, cb) {
        return _ref.apply(this, arguments);
    };
}());
AddEventHandler("np-vehicles:vehiclemenu:showMenu", function() {
    var _ref = vehiclemenu_events_async_to_generator(function(data) {
        return vehiclemenu_events_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    VehicleThread.start();
                    UpdateVehicleVariables();
                    return [
                        4,
                        UpdateMenuData()
                    ];
                case 1:
                    _state.sent();
                    ShowMenu(true);
                    return [
                        2
                    ];
            }
        });
    });
    return function(data) {
        return _ref.apply(this, arguments);
    };
}());

;// CONCATENATED MODULE: ./src/client/controllers/vehiclemenu/index.ts
function controllers_vehiclemenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function controllers_vehiclemenu_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                controllers_vehiclemenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                controllers_vehiclemenu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function controllers_vehiclemenu_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitVehicleMenu() {
    return _InitVehicleMenu.apply(this, arguments);
}
function _InitVehicleMenu() {
    _InitVehicleMenu = controllers_vehiclemenu_async_to_generator(function() {
        return controllers_vehiclemenu_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        InitVehicleMenuMain()
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        InitVehicleMenuEvents()
                    ];
                case 2:
                    _state.sent();
                    return [
                        4,
                        Utils.waitForCondition(function() {
                            return __webpack_require__.g.exports["config"].IsConfigReady();
                        }, 5000)
                    ];
                case 3:
                    _state.sent();
                    if (!__webpack_require__.g.exports["config"].IsConfigReady()) return [
                        3,
                        5
                    ];
                    return [
                        4,
                        InitBoneOffsetsData()
                    ];
                case 4:
                    _state.sent();
                    return [
                        3,
                        6
                    ];
                case 5:
                    console.log("[INIT][CONFIG][FAILED!!!!!!]");
                    _state.label = 6;
                case 6:
                    return [
                        2
                    ];
            }
        });
    });
    return _InitVehicleMenu.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/mtpo/settings.ts
var settings_mtpoSettings = {
    targetValue: 0.2,
    currentTime: 0,
    callrpmupdate: {},
    transmissiontxt: {
        seq: "Sequential",
        auto: "Automatic",
        manual: "Manual W/ Clutch"
    },
    shouldupdaterpm2: false,
    calleventonce: false,
    currentTimennpc: 0,
    lockedrdiff: null,
    npcstartValue: 0,
    lockedfdiff: null,
    frstvehload: true,
    frsttsload: true,
    forceserversettingsdefault: false,
    modindex: 23,
    desiredgear: 1,
    gearatio: 3.13,
    handloaded: false,
    calculatedtospeedkmh: 0,
    calculatedtospeedgta: 0,
    gtagratiotable9: [
        -3.333,
        3.333,
        1.849,
        1.253,
        0.935,
        0.767,
        0.692,
        0.686,
        0.749,
        0.9
    ],
    gtagratiotable8: [
        -3.333,
        3.333,
        1.898,
        1.321,
        1.011,
        0.851,
        0.788,
        0.803,
        0.9
    ],
    gtagratiotable7: [
        -3.333,
        3.333,
        1.934,
        1.372,
        1.07,
        0.918,
        0.867,
        0.9
    ],
    gtagratiotable6: [
        -3.333,
        3.333,
        1.949,
        1.392,
        1.095,
        0.946,
        0.9
    ],
    gtagratiotable5: [
        -3.333,
        3.333,
        1.924,
        1.358,
        1.054,
        0.9
    ],
    gtagratiotable4: [
        -3.333,
        3.333,
        1.826,
        1.222,
        0.9
    ],
    gtagratiotable3: [
        -3.333,
        3.333,
        1.567,
        0.9
    ],
    gtagratiotable2: [
        -3.333,
        3.333,
        0.9
    ],
    gtagratiotable1: [
        -3.333,
        0.9
    ],
    gtagratiotable0: [
        -3.333
    ],
    disablegamepadaim: false,
    cartopspeed: 0,
    vehiclelayout: 0,
    baseacc: 0,
    finaldrive: 0,
    topspeedgeartable: [],
    calculatedtospeedkmhtable: [],
    gearammount: 0,
    carid: 943659629,
    carhastransmission: -1,
    hastoapplymt: false,
    indownshift: false,
    vehplate: null,
    vehmodel: null,
    vehclass: 0,
    vehclass2: 0,
    clutchengaged: true,
    pastvehicle: 0,
    atcall: false,
    inmenu: false,
    fadeDuration: 0,
    npcfadeDuration: 0,
    reardifflockprct: 0,
    frontdifflockprct: 0,
    finaldriveadjustmentprct: 0,
    savefilevaluestable: {},
    menuconfigvaluetable: {},
    needstoloadsavefile: false,
    pressed: 0,
    isusinggamepad: 0,
    enablemanualtransmission: false,
    menuinimperialunits: 0,
    enableflywheel: false,
    enabledifferential: false,
    transmissionmode: 0,
    rightalignmenu: 0,
    allowclientmenu: 0,
    minflywheelweight: 0,
    maxflywheelweight: 0,
    clutchkeyid: 0,
    clutchkeygamepadid: 0,
    finaldriveposlimit: 0,
    finaldriveneglimit: 0,
    gearratiomaxlimit: 0,
    aplyingconfig: false,
    defaultgearratio: [
        -3.333,
        3.333,
        1.849,
        1.253,
        0.935,
        0.767,
        0.692,
        0.686,
        0.749,
        0.9
    ],
    gearratiotable: [
        -3.333,
        3.333,
        1.849,
        1.253,
        0.935,
        0.767,
        0.692,
        0.686,
        0.749,
        0.9
    ],
    storeb1: 0,
    storeb2: 0,
    storeb3: 0,
    storeb4: 0,
    storeisusinggamepad: null,
    storeenablemanualtransmission: null,
    storemenuinimperialunits: null,
    storeenableflywheel: null,
    storeenabledifferential: null,
    storetransmissionmode: null,
    storerightalignmenu: null,
    gotinfofromdb: false,
    vehdoesntexistindb: false,
    vehdoesnthavect: false,
    allowmtpoexecution: false,
    wheellock: 0,
    invertreversecontrols: false,
    thiscarhasmt: false,
    allowmtcheck: false,
    hasdefaultdbloaded: false,
    isclutchpressed: false,
    clutchsfxhasplayedonce: false,
    isshifting: false,
    shiftUp: false,
    fBrakeForce: 0,
    fBrakeBiasFront: 0,
    mtpoThread: null,
    soundTimeout: {
        gas_pedal: null,
        brake_pedal: null
    },
    turboSize: 0,
    dumpValve: 0
};
var mtpoTurboSettings = {
    startValue: -1.0,
    targetValue: 1.0,
    targetValue2: -0.9,
    currentTime: 0,
    calcdecaytime: 0,
    currentTime2: 0,
    rightalignmenu: true,
    enabledebuglogs: false,
    turbopressure: -1,
    torqueincrease: 0,
    sounds: []
};

;// CONCATENATED MODULE: ./src/client/controllers/mtpo/tools.ts
function mtpo_tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function mtpo_tools_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                mtpo_tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                mtpo_tools_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function mtpo_tools_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

function map(value, inMin, inMax, outMin, outMax) {
    return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
}
function lerp(a, b, n) {
    return (1 - n) * a + n * b;
}
function loadConfig(vehmodel) {
    var config = config_GetModuleConfig("mtpo-default");
    if (config === undefined) return false;
    for(var key in config){
        var item = config[key];
        if (item.carmodel === vehmodel) {
            return item;
        }
    }
    return false;
}
function wait(time) {
    return _wait.apply(this, arguments);
}
function _wait() {
    _wait = mtpo_tools_async_to_generator(function(time) {
        return mtpo_tools_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        new Promise(function(r) {
                            return setTimeout(r, time);
                        })
                    ];
                case 1:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return _wait.apply(this, arguments);
}
function randInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}
function calculate_K(tps) {
    // Air density at sea level in kg/m^3
    var air_density = 1.225;
    // Simple correction factor for air temperature
    var temp_correction = 1 + 0.0082 * 17; // 17°C is the coldest average temperature of LA
    // Calculate K
    var K = air_density * temp_correction * (2 - tps) / 10;
    return K;
} // load_db_info(DefaultConfig, vehmodel);

;// CONCATENATED MODULE: ./src/client/controllers/mtpo/systems.ts
function mtpo_systems_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function mtpo_systems_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                mtpo_systems_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                mtpo_systems_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function mtpo_systems_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}






function Shift(up) {
    return _Shift.apply(this, arguments);
}
function _Shift() {
    _Shift = mtpo_systems_async_to_generator(function(up) {
        var start, geargrindsfx, start5, start1;
        return mtpo_systems_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    settings_mtpoSettings.shiftUp = up;
                    Debug("MTPO: shifting", up);
                    settings_mtpoSettings.isshifting = true;
                    if (settings_mtpoSettings.transmissionmode == 1 && settings_mtpoSettings.atcall == false || settings_mtpoSettings.inmenu == true && !settings_mtpoSettings.aplyingconfig) {
                        return [
                            2
                        ];
                    }
                    if (settings_mtpoSettings.transmissionmode == 2 && !settings_mtpoSettings.hastoapplymt && settings_mtpoSettings.desiredgear != settings_mtpoSettings.gearammount) {
                        PlayGearShiftSound(settings_mtpoSettings.desiredgear, up);
                    }
                    if (settings_mtpoSettings.transmissionmode == 0 && !settings_mtpoSettings.hastoapplymt && settings_mtpoSettings.desiredgear != settings_mtpoSettings.gearammount) {
                        PlayGearShiftSound(settings_mtpoSettings.desiredgear, up);
                    }
                    settings_mtpoSettings.atcall = false;
                    if (GetVehicleMod(CurrentVehicle, 11) >= 0) {
                        settings_mtpoSettings.modindex = GetVehicleMod(CurrentVehicle, 11);
                    }
                    if (!settings_mtpoSettings.handloaded) return [
                        3,
                        17
                    ];
                    if (!(settings_mtpoSettings.desiredgear < settings_mtpoSettings.gearammount || !settings_mtpoSettings.shiftUp)) return [
                        3,
                        13
                    ];
                    if (!(settings_mtpoSettings.transmissionmode < 2)) return [
                        3,
                        6
                    ];
                    SetVehicleClutch(CurrentVehicle, 0.55);
                    if (!settings_mtpoSettings.shiftUp) return [
                        3,
                        1
                    ];
                    settings_mtpoSettings.desiredgear += 1;
                    return [
                        3,
                        5
                    ];
                case 1:
                    if (settings_mtpoSettings.desiredgear >= 1) {
                        settings_mtpoSettings.desiredgear = settings_mtpoSettings.desiredgear - 1;
                    }
                    if (!(GetEntitySpeed(CurrentVehicle) * 3.6 > 25)) return [
                        3,
                        4
                    ];
                    start = GetGameTimer();
                    _state.label = 2;
                case 2:
                    if (!(GetGameTimer() - start < 115)) return [
                        3,
                        4
                    ];
                    if (settings_mtpoSettings.transmissionmode == 1 && !IsControlPressed(0, 72)) {
                        SetVehicleBrakeLights(CurrentVehicle, false);
                    }
                    return [
                        4,
                        client_Utils.wait(0)
                    ];
                case 3:
                    _state.sent();
                    SetControlNormal(0, 71, 1.0);
                    return [
                        3,
                        2
                    ];
                case 4:
                    settings_mtpoSettings.indownshift = true;
                    _state.label = 5;
                case 5:
                    return [
                        3,
                        13
                    ];
                case 6:
                    if (!(settings_mtpoSettings.transmissionmode == 2)) return [
                        3,
                        13
                    ];
                    if (!settings_mtpoSettings.hastoapplymt) return [
                        3,
                        7
                    ];
                    if (settings_mtpoSettings.shiftUp) {
                        settings_mtpoSettings.desiredgear = settings_mtpoSettings.desiredgear + 1;
                    } else {
                        if (settings_mtpoSettings.desiredgear >= 1) {
                            settings_mtpoSettings.desiredgear = settings_mtpoSettings.desiredgear - 1;
                        }
                    }
                    return [
                        3,
                        13
                    ];
                case 7:
                    if (!(settings_mtpoSettings.clutchengaged == false)) return [
                        3,
                        8
                    ];
                    if (settings_mtpoSettings.shiftUp) {
                        settings_mtpoSettings.desiredgear = settings_mtpoSettings.desiredgear + 1;
                    } else {
                        if (settings_mtpoSettings.desiredgear >= 1) {
                            settings_mtpoSettings.desiredgear = settings_mtpoSettings.desiredgear - 1;
                        }
                    }
                    return [
                        3,
                        13
                    ];
                case 8:
                    geargrindsfx = [
                        "grind_01",
                        "grind_02",
                        "grind_03"
                    ];
                    start5 = GetGameTimer();
                    if (settings_mtpoSettings.shiftUp || !settings_mtpoSettings.shiftUp && settings_mtpoSettings.desiredgear >= 1) {
                        client_Events.emitNet("np-fx:sound:vehicle:transmission", settings_mtpoSettings.carid, geargrindsfx[Math.floor(Math.random() * geargrindsfx.length)]);
                    }
                    _state.label = 9;
                case 9:
                    if (!(GetGameTimer() - start5 < 500)) return [
                        3,
                        12
                    ];
                    SetVehicleClutch(CurrentVehicle, 0.1);
                    return [
                        4,
                        client_Utils.wait(0)
                    ];
                case 10:
                    _state.sent();
                    SetVehicleCheatPowerIncrease(CurrentVehicle, 0.0);
                    if (GetVehicleThrottleOffset(CurrentVehicle) > 0) {
                        SetVehicleCurrentRpm(CurrentVehicle, 1.5);
                    }
                    SetVehicleHandbrake(CurrentVehicle, true);
                    return [
                        4,
                        client_Utils.wait(1)
                    ];
                case 11:
                    _state.sent();
                    SetVehicleHandbrake(CurrentVehicle, false);
                    return [
                        3,
                        9
                    ];
                case 12:
                    if (settings_mtpoSettings.shiftUp) {
                        settings_mtpoSettings.desiredgear = settings_mtpoSettings.desiredgear + 1;
                    } else {
                        if (settings_mtpoSettings.desiredgear >= 1) {
                            settings_mtpoSettings.desiredgear = settings_mtpoSettings.desiredgear - 1;
                        }
                    }
                    _state.label = 13;
                case 13:
                    if (settings_mtpoSettings.desiredgear == 0) {
                        handling_SetHandlingContextMultiplier(CurrentVehicle, "fInitialDriveMaxFlatVel", "mtpo", "fixed", Math.floor(settings_mtpoSettings.topspeedgeartable[0]) * 0.75, 1);
                        if (!settings_mtpoSettings.shiftUp) {
                            if (settings_mtpoSettings.invertreversecontrols == true && (settings_mtpoSettings.vehclass <= 7 || settings_mtpoSettings.vehclass >= 9 && settings_mtpoSettings.vehclass < 13 || settings_mtpoSettings.vehclass >= 17 && settings_mtpoSettings.vehclass <= 22)) {
                                handling_SetHandlingContextMultiplier(CurrentVehicle, "fSteeringLock", "mtpo", "fixed", settings_mtpoSettings.wheellock * -1, 1);
                            }
                        }
                    } else {
                        if (settings_mtpoSettings.desiredgear > settings_mtpoSettings.gearammount) {
                            settings_mtpoSettings.desiredgear = settings_mtpoSettings.gearammount;
                        }
                        Debug("MTPO: desiredgear", settings_mtpoSettings.desiredgear);
                        Debug("MTPO: fInitialDriveMaxFlatVel", Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) * 0.75);
                        handling_SetHandlingContextMultiplier(CurrentVehicle, "fInitialDriveMaxFlatVel", "mtpo", "fixed", Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) * 0.75, 1);
                        if (settings_mtpoSettings.invertreversecontrols == true && settings_mtpoSettings.shiftUp == true) {
                            handling_SetHandlingContextMultiplier(CurrentVehicle, "fSteeringLock", "mtpo", "fixed", settings_mtpoSettings.wheellock, 1);
                        } else if (settings_mtpoSettings.invertreversecontrols == true && (settings_mtpoSettings.vehclass <= 7 || settings_mtpoSettings.vehclass >= 9 && settings_mtpoSettings.vehclass < 13 || settings_mtpoSettings.vehclass >= 17 && settings_mtpoSettings.vehclass <= 22)) {
                            handling_SetHandlingContextMultiplier(CurrentVehicle, "fSteeringLock", "mtpo", "fixed", settings_mtpoSettings.wheellock * -1, 1);
                        }
                    }
                    handling_SetHandlingContextMultiplier(CurrentVehicle, "fInitialDriveForce", "mtpo", "fixed", settings_mtpoSettings.baseacc * 1.119 * settings_mtpoSettings["gtagratiotable" + settings_mtpoSettings.gearammount][settings_mtpoSettings.desiredgear], 1);
                    handling_ApplyHandlingMultipliers(CurrentVehicle);
                    start1 = GetGameTimer();
                    _state.label = 14;
                case 14:
                    if (!(GetGameTimer() - start1 < 125)) return [
                        3,
                        16
                    ];
                    return [
                        4,
                        client_Utils.wait(1)
                    ];
                case 15:
                    _state.sent();
                    ModifyVehicleTopSpeed(CurrentVehicle, 0.5);
                    return [
                        3,
                        14
                    ];
                case 16:
                    if (GetVehicleMod(CurrentVehicle, 11) >= 0) {
                        SetVehicleMod(CurrentVehicle, 11, settings_mtpoSettings.modindex, false);
                    }
                    _state.label = 17;
                case 17:
                    settings_mtpoSettings.isshifting = false;
                    settings_mtpoSettings.indownshift = false;
                    return [
                        2
                    ];
            }
        });
    });
    return _Shift.apply(this, arguments);
}
function DoDifferentialCalc() {
    var throttle = GetVehicleThrottleOffset(CurrentVehicle);
    if (throttle == 1) {
        var steeringLock = GetVehicleHandlingFloat(CurrentVehicle, "CHandlingData", "fSteeringLock");
        var steeringLockDevSix = steeringLock / 6;
        if (settings_mtpoSettings.vehiclelayout == 0.0) {
            var rwheelrotationsppedr = GetVehicleWheelRotationSpeed(CurrentVehicle, 3);
            var rwheelrotationsppedl = GetVehicleWheelRotationSpeed(CurrentVehicle, 2);
            var diffpercentagelr = 100 + (rwheelrotationsppedr - rwheelrotationsppedl) / rwheelrotationsppedl * 100;
            var diffpercentagerl = 100 + (rwheelrotationsppedl - rwheelrotationsppedr) / rwheelrotationsppedr * 100;
            if (diffpercentagelr > 100) {
                diffpercentagelr = 100.0;
            }
            if (diffpercentagerl > 100) {
                diffpercentagerl = 100.0;
            }
            if (GetVehicleSteeringAngle(CurrentVehicle) > steeringLockDevSix) {
                if (diffpercentagelr <= map(settings_mtpoSettings.reardifflockprct, 0, 100, 35, 100)) {
                    settings_mtpoSettings.lockedrdiff = true;
                }
            } else if (GetVehicleSteeringAngle(CurrentVehicle) < -1 * steeringLockDevSix) {
                if (diffpercentagerl <= map(settings_mtpoSettings.reardifflockprct, 0, 100, 35, 100)) {
                    settings_mtpoSettings.lockedrdiff = true;
                }
            }
            if (IsVehicleInBurnout(CurrentVehicle)) {
                SetVehicleWheelRotationSpeed(CurrentVehicle, 2, rwheelrotationsppedr);
                SetVehicleWheelTractionVectorLength(CurrentVehicle, 2, GetVehicleWheelTractionVectorLength(CurrentVehicle, 3));
            }
            if (settings_mtpoSettings.lockedrdiff) {
                if (GetVehicleSteeringAngle(CurrentVehicle) > steeringLockDevSix) {
                    SetVehicleWheelRotationSpeed(CurrentVehicle, 3, GetVehicleWheelRotationSpeed(CurrentVehicle, 2));
                    SetVehicleWheelTractionVectorLength(CurrentVehicle, 3, GetVehicleWheelTractionVectorLength(CurrentVehicle, 2));
                    SetVehicleHandbrake(CurrentVehicle, true);
                } else if (GetVehicleSteeringAngle(CurrentVehicle) < -1 * steeringLockDevSix) {
                    SetVehicleWheelRotationSpeed(CurrentVehicle, 2, GetVehicleWheelRotationSpeed(CurrentVehicle, 3));
                    SetVehicleWheelTractionVectorLength(CurrentVehicle, 2, GetVehicleWheelTractionVectorLength(CurrentVehicle, 3));
                    SetVehicleHandbrake(CurrentVehicle, true);
                }
            }
        } else if (settings_mtpoSettings.vehiclelayout == 1.0) {
            var fwheelrotationsppedr = GetVehicleWheelRotationSpeed(CurrentVehicle, 1);
            var fwheelrotationsppedl = GetVehicleWheelRotationSpeed(CurrentVehicle, 0);
            var diffpercentageflr = 100 + (fwheelrotationsppedr - fwheelrotationsppedl) / fwheelrotationsppedl * 100;
            var diffpercentagefrl = 100 + (fwheelrotationsppedl - fwheelrotationsppedr) / fwheelrotationsppedr * 100;
            if (diffpercentageflr > 100) {
                diffpercentageflr = 100.0;
            }
            if (diffpercentagefrl > 100) {
                diffpercentagefrl = 100.0;
            }
            if (GetVehicleSteeringAngle(CurrentVehicle) > steeringLockDevSix) {
                if (diffpercentageflr <= map(settings_mtpoSettings.frontdifflockprct, 0, 100, 63, 100)) {
                    settings_mtpoSettings.lockedfdiff = true;
                }
            } else if (GetVehicleSteeringAngle(CurrentVehicle) < -1 * steeringLockDevSix) {
                if (diffpercentagefrl <= map(settings_mtpoSettings.frontdifflockprct, 0, 100, 63, 100)) {
                    settings_mtpoSettings.lockedfdiff = true;
                }
            }
            if (IsVehicleInBurnout(CurrentVehicle)) {
                SetVehicleWheelRotationSpeed(CurrentVehicle, 0, GetVehicleWheelRotationSpeed(CurrentVehicle, 1));
                SetVehicleWheelTractionVectorLength(CurrentVehicle, 0, GetVehicleWheelTractionVectorLength(CurrentVehicle, 1));
            }
            if (settings_mtpoSettings.lockedfdiff) {
                if (GetVehicleSteeringAngle(CurrentVehicle) > steeringLockDevSix) {
                    SetVehicleWheelRotationSpeed(CurrentVehicle, 1, GetVehicleWheelRotationSpeed(CurrentVehicle, 0));
                    SetVehicleWheelTractionVectorLength(CurrentVehicle, 1, GetVehicleWheelTractionVectorLength(CurrentVehicle, 0));
                    SetTyreTractionLossMultiplier(CurrentVehicle, 1, 2.0);
                    SetTyreTractionLossMultiplier(CurrentVehicle, 0, 2.0);
                } else if (GetVehicleSteeringAngle(CurrentVehicle) < -1 * steeringLockDevSix) {
                    SetVehicleWheelRotationSpeed(CurrentVehicle, 0, GetVehicleWheelRotationSpeed(CurrentVehicle, 1));
                    SetVehicleWheelTractionVectorLength(CurrentVehicle, 0, GetVehicleWheelTractionVectorLength(CurrentVehicle, 1));
                    SetTyreTractionLossMultiplier(CurrentVehicle, 1, 2.0);
                    SetTyreTractionLossMultiplier(CurrentVehicle, 0, 2.0);
                }
            }
        } else if (settings_mtpoSettings.vehiclelayout > 0.0 && settings_mtpoSettings.vehiclelayout < 1.0) {
            var diffpercentageflr1 = 100 + (GetVehicleWheelRotationSpeed(CurrentVehicle, 1) - GetVehicleWheelRotationSpeed(CurrentVehicle, 0)) / GetVehicleWheelRotationSpeed(CurrentVehicle, 0) * 100;
            var diffpercentagefrl1 = 100 + (GetVehicleWheelRotationSpeed(CurrentVehicle, 0) - GetVehicleWheelRotationSpeed(CurrentVehicle, 1)) / GetVehicleWheelRotationSpeed(CurrentVehicle, 1) * 100;
            if (diffpercentageflr1 > 100) {
                diffpercentageflr1 = 100.0;
            }
            if (diffpercentagefrl1 > 100) {
                diffpercentagefrl1 = 100.0;
            }
            if (GetVehicleSteeringAngle(CurrentVehicle) > steeringLockDevSix) {
                if (diffpercentageflr1 <= map(settings_mtpoSettings.frontdifflockprct, 0, 100, 63, 100)) {
                    settings_mtpoSettings.lockedfdiff = true;
                }
            } else if (GetVehicleSteeringAngle(CurrentVehicle) < -1 * steeringLockDevSix) {
                if (diffpercentagefrl1 <= map(settings_mtpoSettings.frontdifflockprct, 0, 100, 63, 100)) {
                    settings_mtpoSettings.lockedfdiff = true;
                }
            }
            if (IsVehicleInBurnout(CurrentVehicle)) {
                SetVehicleWheelRotationSpeed(CurrentVehicle, 0, GetVehicleWheelRotationSpeed(CurrentVehicle, 1));
                SetVehicleWheelTractionVectorLength(CurrentVehicle, 0, GetVehicleWheelTractionVectorLength(CurrentVehicle, 1));
            }
            if (settings_mtpoSettings.lockedfdiff) {
                if (GetVehicleSteeringAngle(CurrentVehicle) > steeringLockDevSix) {
                    SetVehicleWheelRotationSpeed(CurrentVehicle, 1, GetVehicleWheelRotationSpeed(CurrentVehicle, 0));
                    SetVehicleWheelTractionVectorLength(CurrentVehicle, 1, GetVehicleWheelTractionVectorLength(CurrentVehicle, 0));
                    SetTyreTractionLossMultiplier(CurrentVehicle, 1, 2.0);
                    SetTyreTractionLossMultiplier(CurrentVehicle, 0, 2.0);
                } else if (GetVehicleSteeringAngle(CurrentVehicle) < -1 * steeringLockDevSix) {
                    SetVehicleWheelRotationSpeed(CurrentVehicle, 0, GetVehicleWheelRotationSpeed(CurrentVehicle, 1));
                    SetVehicleWheelTractionVectorLength(CurrentVehicle, 0, GetVehicleWheelTractionVectorLength(CurrentVehicle, 1));
                    SetTyreTractionLossMultiplier(CurrentVehicle, 1, 2.0);
                    SetTyreTractionLossMultiplier(CurrentVehicle, 0, 2.0);
                }
            }
            var rwheelrotationsppedr1 = GetVehicleWheelRotationSpeed(CurrentVehicle, 3);
            var rwheelrotationsppedl1 = GetVehicleWheelRotationSpeed(CurrentVehicle, 2);
            var diffpercentagelr1 = 100 + (rwheelrotationsppedr1 - rwheelrotationsppedl1) / rwheelrotationsppedl1 * 100;
            var diffpercentagerl1 = 100 + (rwheelrotationsppedl1 - rwheelrotationsppedr1) / rwheelrotationsppedr1 * 100;
            if (diffpercentagelr1 > 100) {
                diffpercentagelr1 = 100.0;
            }
            if (diffpercentagerl1 > 100) {
                diffpercentagerl1 = 100.0;
            }
            if (GetVehicleSteeringAngle(CurrentVehicle) > steeringLockDevSix) {
                if (diffpercentagelr1 <= map(settings_mtpoSettings.reardifflockprct, 0, 100, 35, 100)) {
                    settings_mtpoSettings.lockedrdiff = true;
                }
            } else if (GetVehicleSteeringAngle(CurrentVehicle) < -1 * steeringLockDevSix) {
                if (diffpercentagerl1 <= map(settings_mtpoSettings.reardifflockprct, 0, 100, 35, 100)) {
                    settings_mtpoSettings.lockedrdiff = true;
                }
            }
            if (IsVehicleInBurnout(CurrentVehicle)) {
                SetVehicleWheelRotationSpeed(CurrentVehicle, 2, GetVehicleWheelRotationSpeed(CurrentVehicle, 3));
                SetVehicleWheelTractionVectorLength(CurrentVehicle, 2, GetVehicleWheelTractionVectorLength(CurrentVehicle, 3));
            }
            if (settings_mtpoSettings.lockedrdiff) {
                if (GetVehicleSteeringAngle(CurrentVehicle) > steeringLockDevSix) {
                    SetVehicleWheelRotationSpeed(CurrentVehicle, 3, GetVehicleWheelRotationSpeed(CurrentVehicle, 2));
                    SetVehicleWheelTractionVectorLength(CurrentVehicle, 3, GetVehicleWheelTractionVectorLength(CurrentVehicle, 2));
                    SetVehicleHandbrake(CurrentVehicle, true);
                } else if (GetVehicleSteeringAngle(CurrentVehicle) < -1 * steeringLockDevSix) {
                    SetVehicleWheelRotationSpeed(CurrentVehicle, 2, GetVehicleWheelRotationSpeed(CurrentVehicle, 3));
                    SetVehicleWheelTractionVectorLength(CurrentVehicle, 2, GetVehicleWheelTractionVectorLength(CurrentVehicle, 3));
                    SetVehicleHandbrake(CurrentVehicle, true);
                }
            }
        }
        SetVehicleHandbrake(CurrentVehicle, false);
    } else {
        settings_mtpoSettings.lockedrdiff = false;
        settings_mtpoSettings.lockedfdiff = false;
    }
}
function DoTransmissionCalc() {
    return _DoTransmissionCalc.apply(this, arguments);
}
function _DoTransmissionCalc() {
    _DoTransmissionCalc = mtpo_systems_async_to_generator(function() {
        var throttle, handlingFlags, speed, rpm, frontengbrakedist, rearengbrakedist, engbrakeforce, appliedengbrakeforcefront, appliedengbrakeforcerear, clutch;
        function checkHandlingFlags(checkAndReset) {
            return _checkHandlingFlags.apply(this, arguments);
        }
        function _checkHandlingFlags() {
            _checkHandlingFlags = mtpo_systems_async_to_generator(function(checkAndReset) {
                return mtpo_systems_ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            if (!(checkAndReset && handlingFlags === 1073873155)) return [
                                3,
                                3
                            ];
                            handling_ResetHandlingContextMultipier(CurrentVehicle, "strHandlingFlags", "mtpo");
                            return [
                                4,
                                client_Utils.wait(1)
                            ];
                        case 1:
                            _state.sent();
                            handling_ApplyHandlingMultipliers(CurrentVehicle, "strHandlingFlags");
                            // SetVehicleHandlingInt(vehicle, 'CHandlingData', 'strHandlingFlags', mtpoSettings.ogmodelflags);
                            return [
                                4,
                                client_Utils.wait(10)
                            ];
                        case 2:
                            _state.sent();
                            _state.label = 3;
                        case 3:
                            if (!checkAndReset && handlingFlags != 1073873155) {
                                handling_SetHandlingContextMultiplier(CurrentVehicle, "strHandlingFlags", "mtpo", "fixed", 1073873155, 1);
                                handling_ApplyHandlingMultipliers(CurrentVehicle, "strHandlingFlags");
                            }
                            return [
                                2
                            ];
                    }
                });
            });
            return _checkHandlingFlags.apply(this, arguments);
        }
        function setWheelPressure(multi) {
            SetVehicleWheelBrakePressure(CurrentVehicle, 0, appliedengbrakeforcefront * multi * rpm);
            SetVehicleWheelBrakePressure(CurrentVehicle, 1, appliedengbrakeforcefront * multi * rpm);
            if (settings_mtpoSettings.vehclass != 8) {
                SetVehicleWheelBrakePressure(CurrentVehicle, 2, appliedengbrakeforcerear * multi * rpm);
                SetVehicleWheelBrakePressure(CurrentVehicle, 3, appliedengbrakeforcerear * multi * rpm);
            }
            if (IsControlPressed(0, 72)) {
                SetVehicleWheelBrakePressure(CurrentVehicle, 0, appliedengbrakeforcefront * rpm);
                SetVehicleWheelBrakePressure(CurrentVehicle, 1, appliedengbrakeforcefront * rpm);
                if (settings_mtpoSettings.vehclass != 8) {
                    SetVehicleWheelBrakePressure(CurrentVehicle, 2, appliedengbrakeforcerear * rpm);
                    SetVehicleWheelBrakePressure(CurrentVehicle, 3, appliedengbrakeforcerear * rpm);
                }
            }
        }
        return mtpo_systems_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    throttle = GetVehicleThrottleOffset(CurrentVehicle);
                    handlingFlags = GetVehicleHandlingInt(CurrentVehicle, "CHandlingData", "strHandlingFlags");
                    switch(throttle){
                        case 1:
                            return [
                                3,
                                1
                            ];
                        case -1:
                            return [
                                3,
                                1
                            ];
                        case 0:
                            return [
                                3,
                                3
                            ];
                    }
                    return [
                        3,
                        6
                    ];
                case 1:
                    return [
                        4,
                        checkHandlingFlags(true)
                    ];
                case 2:
                    _state.sent();
                    return [
                        3,
                        8
                    ];
                case 3:
                    speed = GetEntitySpeed(CurrentVehicle) * 2.23694;
                    rpm = GetVehicleCurrentRpm(CurrentVehicle);
                    if (speed > 1) {
                        frontengbrakedist = settings_mtpoSettings.fBrakeBiasFront;
                        rearengbrakedist = 1.0 - frontengbrakedist;
                        if (rearengbrakedist < 0.0) {
                            rearengbrakedist = 0;
                        }
                        engbrakeforce = settings_mtpoSettings.fBrakeForce;
                        appliedengbrakeforcefront = engbrakeforce * frontengbrakedist;
                        appliedengbrakeforcerear = engbrakeforce * rearengbrakedist;
                        clutch = GetVehicleClutch(CurrentVehicle);
                        if (rpm > 0.21 && clutch > 0.39) {
                            if (handlingFlags !== 1073873155) {
                                handling_SetHandlingContextMultiplier(CurrentVehicle, "strHandlingFlags", "mtpo", "fixed", 1073873155, 1);
                                handling_ApplyHandlingMultipliers(CurrentVehicle, "strHandlingFlags");
                            }
                            ;
                            if (settings_mtpoSettings.clutchengaged == true) {
                                if (GetVehicleCurrentGear(CurrentVehicle) <= 0) {
                                    if (settings_mtpoSettings.invertreversecontrols == false) {
                                        SetControlNormal(0, 71, 0.32);
                                    } else if (settings_mtpoSettings.invertreversecontrols == true) {
                                        SetControlNormal(0, 72, 0.32);
                                    }
                                    setWheelPressure(2);
                                } else if (GetVehicleCurrentGear(CurrentVehicle) == 1) {
                                    SetControlNormal(0, 72, 0.32);
                                    setWheelPressure(200);
                                } else if (GetVehicleCurrentGear(CurrentVehicle) == 2) {
                                    SetControlNormal(0, 72, 0.31);
                                    setWheelPressure(500);
                                } else if (GetVehicleCurrentGear(CurrentVehicle) == 3) {
                                    SetControlNormal(0, 72, 0.315);
                                    setWheelPressure(200);
                                } else if (GetVehicleCurrentGear(CurrentVehicle) == 4) {
                                    SetControlNormal(0, 72, 0.31);
                                    setWheelPressure(200);
                                } else if (GetVehicleCurrentGear(CurrentVehicle) == 5) {
                                    SetControlNormal(0, 72, 0.3);
                                    setWheelPressure(50);
                                } else if (GetVehicleCurrentGear(CurrentVehicle) >= 6) {
                                    SetControlNormal(0, 72, 0.315);
                                    setWheelPressure(100);
                                }
                            }
                        }
                    }
                    if (!(speed < 1)) return [
                        3,
                        5
                    ];
                    return [
                        4,
                        checkHandlingFlags(false)
                    ];
                case 4:
                    _state.sent();
                    _state.label = 5;
                case 5:
                    return [
                        3,
                        8
                    ];
                case 6:
                    return [
                        4,
                        checkHandlingFlags(false)
                    ];
                case 7:
                    _state.sent();
                    _state.label = 8;
                case 8:
                    return [
                        2
                    ];
            }
        });
    });
    return _DoTransmissionCalc.apply(this, arguments);
}
function GetVehicleMtpoCurrentGear() {
    return mtpoSettings.desiredgear;
}
var PlayGearShiftSound = function() {
    var _ref = mtpo_systems_async_to_generator(function(desiredgear, shiftUp) {
        return mtpo_systems_ts_generator(this, function(_state) {
            try {
                new Promise(/*#__PURE__*/ mtpo_systems_async_to_generator(function() {
                    var gearSounds, gear, index, rand, sound, sound1, index1, animDict, animDict1;
                    return mtpo_systems_ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                if (!(settings_mtpoSettings.transmissionmode == 2)) return [
                                    3,
                                    4
                                ];
                                gearSounds = {
                                    1: [
                                        "shift_first_01",
                                        "shift_first_01"
                                    ],
                                    2: [
                                        "shift_second_01",
                                        "shift_fourth_01"
                                    ],
                                    3: [
                                        "shift_fifth_01",
                                        "shift_third_01"
                                    ],
                                    4: [
                                        "shift_second_01",
                                        "shift_fourth_01"
                                    ],
                                    5: [
                                        "shift_fifth_01",
                                        "shift_third_01"
                                    ],
                                    6: [
                                        "shift_reverse_01"
                                    ]
                                };
                                gear = desiredgear + (shiftUp ? 1 : -1);
                                if (gear > 5) {
                                    index = gear % 2 == 0 ? 2 : 1;
                                    rand = randInt(0, 1);
                                    sound = gearSounds[index + 1][rand];
                                    client_Events.emitNet("np-fx:sound:vehicle:transmission", settings_mtpoSettings.carid, sound);
                                } else if (gear == 0) {
                                    client_Events.emitNet("np-fx:sound:vehicle:transmission", settings_mtpoSettings.carid, gearSounds[6][0]);
                                } else {
                                    sound1 = gearSounds[gear];
                                    if (sound1 === undefined) return [
                                        2
                                    ];
                                    if (sound1.length == 2) {
                                        index1 = randInt(0, 1);
                                        sound1 = sound1[index1];
                                    }
                                    client_Events.emitNet("np-fx:sound:vehicle:transmission", settings_mtpoSettings.carid, sound1);
                                }
                                animDict = "new@anim@cargreabox";
                                RequestAnimDict(animDict);
                                _state.label = 1;
                            case 1:
                                if (!!HasAnimDictLoaded(animDict)) return [
                                    3,
                                    3
                                ];
                                return [
                                    4,
                                    client_Utils.wait(10)
                                ];
                            case 2:
                                _state.sent();
                                return [
                                    3,
                                    1
                                ];
                            case 3:
                                if (!HasAnimDictLoaded(animDict)) return [
                                    2
                                ];
                                if (shiftUp) {
                                    TaskPlayAnim(PlayerPedId(), animDict, "gearbox_up", 8.0, -8.0, -1, 48, 0.475, false, false, false);
                                } else {
                                    TaskPlayAnim(PlayerPedId(), animDict, "gearbox_down", 8.0, -8.0, -1, 48, 0.475, false, false, false);
                                }
                                _state.label = 4;
                            case 4:
                                if (!(settings_mtpoSettings.transmissionmode == 0)) return [
                                    3,
                                    8
                                ];
                                if (shiftUp) {
                                    client_Events.emitNet("np-fx:sound:vehicle:transmission", settings_mtpoSettings.carid, "paddle_up");
                                } else {
                                    client_Events.emitNet("np-fx:sound:vehicle:transmission", settings_mtpoSettings.carid, "paddle_down");
                                }
                                animDict1 = "new@anim@cargreabox";
                                RequestAnimDict(animDict1);
                                _state.label = 5;
                            case 5:
                                if (!!HasAnimDictLoaded(animDict1)) return [
                                    3,
                                    7
                                ];
                                return [
                                    4,
                                    client_Utils.wait(10)
                                ];
                            case 6:
                                _state.sent();
                                return [
                                    3,
                                    5
                                ];
                            case 7:
                                if (!HasAnimDictLoaded(animDict1)) return [
                                    2
                                ];
                                if (shiftUp) {
                                    TaskPlayAnim(PlayerPedId(), animDict1, "paddle_up", 16.0, -16.0, -1, 48, 0.35, false, false, false);
                                } else {
                                    TaskPlayAnim(PlayerPedId(), animDict1, "paddle_down", 16.0, -16.0, -1, 48, 0.35, false, false, false);
                                }
                                _state.label = 8;
                            case 8:
                                return [
                                    2
                                ];
                        }
                    });
                }));
            } catch (e) {
                console.error(e);
            }
            return [
                2
            ];
        });
    });
    return function PlayGearShiftSound(desiredgear, shiftUp) {
        return _ref.apply(this, arguments);
    };
}();

;// CONCATENATED MODULE: ./src/client/controllers/mtpo/events.ts
function mtpo_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function mtpo_events_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                mtpo_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                mtpo_events_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function mtpo_events_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




function events_InitEvents() {
    RegisterCommand("-mtpoNull", function() {}, false);
    RegisterCommand("+mtpoShiftUp", function() {
        var _mtpoSettings_mtpoThread;
        if (((_mtpoSettings_mtpoThread = settings_mtpoSettings.mtpoThread) === null || _mtpoSettings_mtpoThread === void 0 ? void 0 : _mtpoSettings_mtpoThread.isActive) && settings_mtpoSettings.enablemanualtransmission && !settings_mtpoSettings.isshifting) {
            Shift(true);
        }
    }, false);
    RegisterCommand("+mtpoShiftDown", function() {
        var _mtpoSettings_mtpoThread;
        if (((_mtpoSettings_mtpoThread = settings_mtpoSettings.mtpoThread) === null || _mtpoSettings_mtpoThread === void 0 ? void 0 : _mtpoSettings_mtpoThread.isActive) && settings_mtpoSettings.enablemanualtransmission && !settings_mtpoSettings.isshifting) {
            Shift(false);
        }
    }, false);
    RegisterCommand("+mtpoTractionControl", function() {
        var _mtpoSettings_mtpoThread;
        if (((_mtpoSettings_mtpoThread = settings_mtpoSettings.mtpoThread) === null || _mtpoSettings_mtpoThread === void 0 ? void 0 : _mtpoSettings_mtpoThread.isActive) && settings_mtpoSettings.enablemanualtransmission) {
            console.log("tc on");
        }
    }, false);
    RegisterCommand("+mtpoClutch", function() {
        var _mtpoSettings_mtpoThread;
        if ((_mtpoSettings_mtpoThread = settings_mtpoSettings.mtpoThread) === null || _mtpoSettings_mtpoThread === void 0 ? void 0 : _mtpoSettings_mtpoThread.isActive) {
            settings_mtpoSettings.isclutchpressed = true;
        }
    }, false);
    RegisterCommand("-mtpoClutch", function() {
        var _mtpoSettings_mtpoThread;
        if ((_mtpoSettings_mtpoThread = settings_mtpoSettings.mtpoThread) === null || _mtpoSettings_mtpoThread === void 0 ? void 0 : _mtpoSettings_mtpoThread.isActive) {
            settings_mtpoSettings.isclutchpressed = false;
            if (CurrentSeat == -1) {
                SetVehicleClutch(CurrentVehicle, 1.0);
            }
        }
    }, false);
    // TODO: Remove
    RegisterCommand("playturbo", function() {
        var _ref = mtpo_events_async_to_generator(function(source, args) {
            return mtpo_events_ts_generator(this, function(_state) {
                console.log(args);
                client_Events.emitNet("np-fx:sound:playSoundFromSelf", args[0], "NOPIXEL_GENERAL", "TURBO_SOUNDS", 0);
                return [
                    2
                ];
            });
        });
        return function(source, args) {
            return _ref.apply(this, arguments);
        };
    }(), false);
    exports["np-keybinds"].registerKeyMapping("Upshift", "Vehicle", "Transmission Upshift", "+mtpoShiftUp", "-mtpoNull", "UP", true);
    exports["np-keybinds"].registerKeyMapping("Downshift", "Vehicle", "Transmission Downshift", "+mtpoShiftDown", "-mtpoNull", "DOWN", true);
    exports["np-keybinds"].registerKeyMapping("Clutch", "Vehicle", "Transmission Clutch", "+mtpoClutch", "-mtpoClutch", "Z", true);
    exports["np-keybinds"].registerKeyMapping("Traction Control", "Vehicle", "Toggle Traction Control", "+mtpoTractionControl", "-mtpoNull", "N", true);
}

;// CONCATENATED MODULE: ./src/client/controllers/mtpo/threads.ts
function mtpo_threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function mtpo_threads_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                mtpo_threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                mtpo_threads_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function mtpo_threads_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}










var FlywheelThread = new classes_exports.Thread(/*#__PURE__*/ mtpo_threads_async_to_generator(function() {
    var throttle, speed, clutch, startValue, startTime, currentValue, startTime1, currentValue1, e;
    return mtpo_threads_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                _state.trys.push([
                    0,
                    10,
                    ,
                    11
                ]);
                if (!settings_mtpoSettings.enablemanualtransmission || !settings_mtpoSettings.enableflywheel) return [
                    2,
                    this.stop()
                ];
                throttle = GetVehicleThrottleOffset(CurrentVehicle);
                speed = GetEntitySpeed(CurrentVehicle) * 2.23694;
                clutch = GetVehicleClutch(CurrentVehicle);
                startValue = GetVehicleCurrentRpm(CurrentVehicle);
                // mtpoSettings.callrpmupdate['a'] = rpm;
                settings_mtpoSettings.callrpmupdate.e = false;
                if (!(throttle == 0)) return [
                    3,
                    9
                ];
                if (!(speed < 1 && clutch < 0.15 && GetVehicleCurrentRpm(CurrentVehicle) > 0.21)) return [
                    3,
                    4
                ];
                startTime = GetGameTimer(); // Get the starting time
                if (startValue < 0.2) {
                    startValue = 0.2;
                }
                settings_mtpoSettings.callrpmupdate.a = startValue;
                settings_mtpoSettings.callrpmupdate.e = true;
                _state.label = 1;
            case 1:
                if (!(settings_mtpoSettings.currentTime < settings_mtpoSettings.fadeDuration)) return [
                    3,
                    3
                ];
                return [
                    4,
                    client_Utils.wait(1)
                ];
            case 2:
                _state.sent(); // Wait for a loop
                if (GetVehicleThrottleOffset(CurrentVehicle) > 0 || GetVehicleThrottleOffset(CurrentVehicle) < 0) {
                    return [
                        3,
                        3
                    ];
                }
                if (!settings_mtpoSettings.enableflywheel) {
                    return [
                        3,
                        3
                    ];
                }
                settings_mtpoSettings.currentTime = (GetGameTimer() - startTime) / 1000; // Calculate the elapsed time in seconds
                currentValue = startValue + (settings_mtpoSettings.targetValue - startValue) * (settings_mtpoSettings.currentTime / settings_mtpoSettings.fadeDuration);
                // Print the current value (you can replace this with whatever action you want to perform)
                SetVehicleCurrentRpm(CurrentVehicle, currentValue);
                return [
                    3,
                    1
                ];
            case 3:
                settings_mtpoSettings.currentTime = 0;
                return [
                    3,
                    8
                ];
            case 4:
                if (!(speed > 1 && clutch < 0.0 && GetVehicleCurrentRpm(CurrentVehicle) > 0.21)) return [
                    3,
                    8
                ];
                startTime1 = GetGameTimer(); // Get the starting time
                if (startValue < 0.2) {
                    startValue = 0.2;
                }
                settings_mtpoSettings.callrpmupdate.a = startValue;
                settings_mtpoSettings.callrpmupdate.e = true;
                _state.label = 5;
            case 5:
                if (!(settings_mtpoSettings.currentTime < settings_mtpoSettings.fadeDuration)) return [
                    3,
                    7
                ];
                return [
                    4,
                    client_Utils.wait(1)
                ];
            case 6:
                _state.sent(); // Wait for a frame
                if (GetVehicleThrottleOffset(CurrentVehicle) > 0 || GetVehicleThrottleOffset(CurrentVehicle) < 0) {
                    return [
                        3,
                        7
                    ];
                }
                if (GetVehicleClutch(CurrentVehicle) > 0) {
                    return [
                        3,
                        7
                    ];
                }
                settings_mtpoSettings.currentTime = (GetGameTimer() - startTime1) / 1000; // Calculate the elapsed time in seconds
                currentValue1 = startValue + (settings_mtpoSettings.targetValue - startValue) * (settings_mtpoSettings.currentTime / settings_mtpoSettings.fadeDuration);
                // Print the current value (you can replace this with whatever action you want to perform)
                SetVehicleCurrentRpm(CurrentVehicle, currentValue1);
                return [
                    3,
                    5
                ];
            case 7:
                settings_mtpoSettings.currentTime = 0;
                _state.label = 8;
            case 8:
                settings_mtpoSettings.callrpmupdate.e = false;
                _state.label = 9;
            case 9:
                return [
                    3,
                    11
                ];
            case 10:
                e = _state.sent();
                console.error(e);
                return [
                    3,
                    11
                ];
            case 11:
                return [
                    2
                ];
        }
    });
}), 75, "interval");
FlywheelThread.addHook("preStart", function() {
    this.data.player = PlayerPedId();
});
var FlywheelServerThread = new classes_exports.Thread(/*#__PURE__*/ mtpo_threads_async_to_generator(function() {
    var sendserverid, rpmstart;
    return mtpo_threads_ts_generator(this, function(_state) {
        if (!settings_mtpoSettings.enablemanualtransmission) return [
            2,
            this.stop()
        ];
        if (settings_mtpoSettings.callrpmupdate.e) {
            sendserverid = NetworkGetNetworkIdFromEntity(CurrentVehicle);
            rpmstart = settings_mtpoSettings.callrpmupdate.a;
            if (!settings_mtpoSettings.calleventonce) {
                // TODO: Add
                // triggerEventIfPlayerVisible('mt:rpm', s}serverid, rpmstart, mtpoSettings.fadeDuration, true);
                settings_mtpoSettings.calleventonce = true;
            }
        }
        return [
            2
        ];
    });
}), 75, "interval");
FlywheelServerThread.addHook("preStart", function() {});
var EngineBreakingThread = new classes_exports.Thread(/*#__PURE__*/ mtpo_threads_async_to_generator(function() {
    var e;
    return mtpo_threads_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                _state.trys.push([
                    0,
                    3,
                    ,
                    4
                ]);
                if (!settings_mtpoSettings.enablemanualtransmission) return [
                    2,
                    this.stop()
                ];
                if (settings_mtpoSettings.enabledifferential) {
                    DoDifferentialCalc();
                }
                if (!settings_mtpoSettings.enablemanualtransmission) return [
                    3,
                    2
                ];
                return [
                    4,
                    DoTransmissionCalc()
                ];
            case 1:
                _state.sent();
                _state.label = 2;
            case 2:
                return [
                    3,
                    4
                ];
            case 3:
                e = _state.sent();
                console.error(e);
                return [
                    3,
                    4
                ];
            case 4:
                return [
                    2
                ];
        }
    });
}), 0, "interval");
EngineBreakingThread.addHook("preStart", function() {
    settings_mtpoSettings.vehclass = GetVehicleClass(CurrentVehicle);
    settings_mtpoSettings.vehiclelayout = GetVehicleHandlingFloat(CurrentVehicle, "CHandlingData", "fDriveBiasFront");
    if (!(settings_mtpoSettings.vehclass <= 7 || settings_mtpoSettings.vehclass >= 9 && settings_mtpoSettings.vehclass < 13 || settings_mtpoSettings.vehclass >= 17 && settings_mtpoSettings.vehclass <= 22) && settings_mtpoSettings.vehclass != 8) {
        return this.stop();
    }
});
function doTransmission() {
    return _doTransmission.apply(this, arguments);
}
function _doTransmission() {
    _doTransmission = mtpo_threads_async_to_generator(function() {
        var throttle;
        return mtpo_threads_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (settings_mtpoSettings.transmissionmode == 1) SetVehicleControlsInverted(CurrentVehicle, false);
                    if (!(settings_mtpoSettings.transmissionmode == 2)) return [
                        3,
                        2
                    ];
                    settings_mtpoSettings.disablegamepadaim = false;
                    if (!settings_mtpoSettings.isclutchpressed) return [
                        3,
                        2
                    ];
                    SetVehicleClutch(CurrentVehicle, -0.75);
                    settings_mtpoSettings.clutchengaged = false;
                    if (!(GetVehicleCurrentRpm(CurrentVehicle) == 1)) return [
                        3,
                        2
                    ];
                    SetControlNormal(0, 76, 1.0);
                    return [
                        4,
                        client_Utils.wait(1)
                    ];
                case 1:
                    _state.sent();
                    SetVehicleCurrentRpm(CurrentVehicle, 0.995);
                    _state.label = 2;
                case 2:
                    throttle = GetVehicleThrottleOffset(CurrentVehicle);
                    if (!IsControlJustPressed(0, 75)) return [
                        3,
                        3
                    ];
                    handling_ResetHandlingContextMultipier(CurrentVehicle, "fInitialDriveMaxFlatVel", "mtpo");
                    handling_ResetHandlingContextMultipier(CurrentVehicle, "fInitialDriveForce", "mtpo");
                    if (settings_mtpoSettings.invertreversecontrols == true) {
                        handling_ResetHandlingContextMultipier(CurrentVehicle, "fSteeringLock", "mtpo");
                    }
                    return [
                        3,
                        23
                    ];
                case 3:
                    if (!settings_mtpoSettings.handloaded) return [
                        3,
                        11
                    ];
                    if (!(settings_mtpoSettings.desiredgear > 0)) return [
                        3,
                        8
                    ];
                    SetVehicleHighGear(CurrentVehicle, 1);
                    if (settings_mtpoSettings.transmissionmode == 0 || settings_mtpoSettings.transmissionmode == 2) {
                        SetVehicleControlsInverted(CurrentVehicle, false);
                    }
                    if (!(GetVehicleThrottleOffset(CurrentVehicle) < 0)) return [
                        3,
                        5
                    ];
                    SetVehicleCheatPowerIncrease(CurrentVehicle, -1.0);
                    SetVehicleCurrentRpm(CurrentVehicle, 0.2);
                    SetControlNormal(0, 76, 1.0);
                    if (!(settings_mtpoSettings.transmissionmode == 1 && settings_mtpoSettings.desiredgear == 1)) return [
                        3,
                        5
                    ];
                    SetVehicleHighGear(CurrentVehicle, 0);
                    settings_mtpoSettings.atcall = true;
                    return [
                        4,
                        Shift(false)
                    ];
                case 4:
                    _state.sent();
                    _state.label = 5;
                case 5:
                    if (IsVehicleInBurnout(CurrentVehicle)) {
                        SetVehicleHighGear(CurrentVehicle, 2);
                    }
                    if (!(settings_mtpoSettings.vehclass == 8 || settings_mtpoSettings.transmissionmode == 1)) return [
                        3,
                        7
                    ];
                    if (GetEntitySpeed(CurrentVehicle) * 3.6 > Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) - 2 && IsVehicleOnAllWheels(CurrentVehicle) && throttle > 0 && settings_mtpoSettings.desiredgear != 0) {
                        SetVehicleCurrentRpm(CurrentVehicle, 1.0);
                    }
                    if (!(GetEntitySpeed(CurrentVehicle) * 3.6 > Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) && throttle > 0)) return [
                        3,
                        7
                    ];
                    SetVehicleHandbrake(CurrentVehicle, true);
                    SetControlNormal(0, 76, 1.0);
                    return [
                        4,
                        client_Utils.wait(1)
                    ];
                case 6:
                    _state.sent();
                    _state.label = 7;
                case 7:
                    return [
                        3,
                        11
                    ];
                case 8:
                    if (!(settings_mtpoSettings.desiredgear <= 0)) return [
                        3,
                        11
                    ];
                    SetVehicleHighGear(CurrentVehicle, 0);
                    if (settings_mtpoSettings.vehclass != 8 && settings_mtpoSettings.invertreversecontrols == true) {
                        SetVehicleControlsInverted(CurrentVehicle, true);
                    }
                    if (!(GetVehicleThrottleOffset(CurrentVehicle) > 0)) return [
                        3,
                        11
                    ];
                    if (!(settings_mtpoSettings.transmissionmode == 0 || settings_mtpoSettings.transmissionmode == 2)) return [
                        3,
                        9
                    ];
                    SetVehicleCheatPowerIncrease(CurrentVehicle, -1.0);
                    SetVehicleCurrentRpm(CurrentVehicle, 0.2);
                    SetControlNormal(0, 76, 1.0);
                    return [
                        3,
                        11
                    ];
                case 9:
                    if (!(settings_mtpoSettings.transmissionmode == 1)) return [
                        3,
                        11
                    ];
                    SetVehicleHighGear(CurrentVehicle, 1);
                    settings_mtpoSettings.atcall = true;
                    return [
                        4,
                        Shift(false)
                    ];
                case 10:
                    _state.sent();
                    _state.label = 11;
                case 11:
                    if (settings_mtpoSettings.indownshift && (settings_mtpoSettings.transmissionmode == 0 || settings_mtpoSettings.transmissionmode == 1)) {
                        DisableControlAction(0, 71, true);
                    }
                    if (!((settings_mtpoSettings.transmissionmode == 0 || settings_mtpoSettings.transmissionmode == 2) && settings_mtpoSettings.vehclass != 8)) return [
                        3,
                        13
                    ];
                    if (GetEntitySpeed(CurrentVehicle) * 3.6 > Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) - 2 && IsVehicleOnAllWheels(CurrentVehicle) && throttle > 0 && settings_mtpoSettings.desiredgear != 0) {
                        SetVehicleCurrentRpm(CurrentVehicle, 1.0);
                    }
                    if (!(GetEntitySpeed(CurrentVehicle) * 3.6 > Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) && IsVehicleOnAllWheels(CurrentVehicle) && throttle > 0)) return [
                        3,
                        13
                    ];
                    SetVehicleHandbrake(CurrentVehicle, true);
                    SetControlNormal(0, 76, 1.0);
                    return [
                        4,
                        client_Utils.wait(1)
                    ];
                case 12:
                    _state.sent();
                    _state.label = 13;
                case 13:
                    if (!(settings_mtpoSettings.transmissionmode == 1)) return [
                        3,
                        23
                    ];
                    if (!(GetEntitySpeed(CurrentVehicle) * 3.6 > Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) - 2 && throttle > 0)) return [
                        3,
                        16
                    ];
                    settings_mtpoSettings.atcall = true;
                    return [
                        4,
                        Shift(true)
                    ];
                case 14:
                    _state.sent();
                    if (GetEntitySpeed(CurrentVehicle) * 3.6 > Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) - 2 && IsVehicleOnAllWheels(CurrentVehicle) && throttle > 0 && settings_mtpoSettings.desiredgear != 0) {
                        SetVehicleCurrentRpm(CurrentVehicle, 1.0);
                    }
                    if (!(settings_mtpoSettings.desiredgear == settings_mtpoSettings.gearammount)) return [
                        3,
                        16
                    ];
                    SetVehicleHandbrake(CurrentVehicle, true);
                    SetControlNormal(0, 76, 1.0);
                    return [
                        4,
                        client_Utils.wait(1)
                    ];
                case 15:
                    _state.sent();
                    _state.label = 16;
                case 16:
                    if (!(settings_mtpoSettings.desiredgear >= 1)) return [
                        3,
                        20
                    ];
                    if (!(GetEntitySpeed(CurrentVehicle) * 3.6 < Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear - 1]) - 2 && throttle >= 0)) return [
                        3,
                        19
                    ];
                    settings_mtpoSettings.atcall = true;
                    return [
                        4,
                        Shift(false)
                    ];
                case 17:
                    _state.sent();
                    if (GetEntitySpeed(CurrentVehicle) * 3.6 > Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) - 2 && IsVehicleOnAllWheels(CurrentVehicle) && throttle > 0 && settings_mtpoSettings.desiredgear != 0) {
                        SetVehicleCurrentRpm(CurrentVehicle, 1.0);
                    }
                    if (!(settings_mtpoSettings.desiredgear == settings_mtpoSettings.gearammount)) return [
                        3,
                        19
                    ];
                    SetVehicleHandbrake(CurrentVehicle, true);
                    SetControlNormal(0, 76, 1.0);
                    return [
                        4,
                        client_Utils.wait(1)
                    ];
                case 18:
                    _state.sent();
                    _state.label = 19;
                case 19:
                    return [
                        3,
                        23
                    ];
                case 20:
                    if (!(GetEntitySpeed(CurrentVehicle) * 3.6 < Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) - 2 && throttle >= 0)) return [
                        3,
                        23
                    ];
                    settings_mtpoSettings.atcall = true;
                    return [
                        4,
                        Shift(false)
                    ];
                case 21:
                    _state.sent();
                    if (GetEntitySpeed(CurrentVehicle) * 3.6 > Math.floor(settings_mtpoSettings.topspeedgeartable[settings_mtpoSettings.desiredgear]) - 2 && IsVehicleOnAllWheels(CurrentVehicle) && throttle > 0 && settings_mtpoSettings.desiredgear != 0) {
                        SetVehicleCurrentRpm(CurrentVehicle, 1.0);
                    }
                    if (!(settings_mtpoSettings.desiredgear == settings_mtpoSettings.gearammount)) return [
                        3,
                        23
                    ];
                    SetVehicleHandbrake(CurrentVehicle, true);
                    SetControlNormal(0, 76, 1.0);
                    return [
                        4,
                        client_Utils.wait(1)
                    ];
                case 22:
                    _state.sent();
                    _state.label = 23;
                case 23:
                    SetVehicleHandbrake(CurrentVehicle, false);
                    return [
                        2
                    ];
            }
        });
    });
    return _doTransmission.apply(this, arguments);
}
var ReverseThread = new classes_exports.Thread(/*#__PURE__*/ mtpo_threads_async_to_generator(function() {
    return mtpo_threads_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                if (settings_mtpoSettings.desiredgear != 0) return [
                    2,
                    ReverseThread.stop()
                ];
                if (!(IsDisabledControlJustReleased(0, 34) || IsDisabledControlJustReleased(0, 35))) return [
                    3,
                    3
                ];
                _state.label = 1;
            case 1:
                if (!(ReverseThread.data.a > 0 || ReverseThread.data.d > 0)) return [
                    3,
                    3
                ];
                ReverseThread.data.a -= GetFrameTime();
                ReverseThread.data.d -= GetFrameTime();
                if (ReverseThread.data.a > 0) {
                    SetVehicleSteerBias(CurrentVehicle, lerp(0.5, 0, ReverseThread.data.a));
                }
                if (ReverseThread.data.d > 0) {
                    SetVehicleSteerBias(CurrentVehicle, -lerp(0.5, 0, ReverseThread.data.d));
                }
                return [
                    4,
                    client_Utils.wait(1)
                ];
            case 2:
                _state.sent();
                return [
                    3,
                    1
                ];
            case 3:
                ReverseThread.data.a = GetDisabledControlNormal(0, 34);
                ReverseThread.data.d = GetDisabledControlNormal(0, 35);
                DisableControlAction(0, 34, false);
                DisableControlAction(0, 35, false);
                SetInputExclusive(0, 34);
                if (ReverseThread.data.a > 0) {
                    SetVehicleSteerBias(CurrentVehicle, ReverseThread.data.a);
                }
                if (ReverseThread.data.d > 0) {
                    SetVehicleSteerBias(CurrentVehicle, -ReverseThread.data.d);
                }
                return [
                    2
                ];
        }
    });
}), 0, "tick");
ReverseThread.addHook("preStop", function() {
    SetVehicleControlsInverted(CurrentVehicle, false);
});
ReverseThread.addHook("preStart", function() {
    SetVehicleControlsInverted(CurrentVehicle, true);
});
var MtpoThread = new classes_exports.Thread(/*#__PURE__*/ mtpo_threads_async_to_generator(function() {
    var e;
    return mtpo_threads_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                _state.trys.push([
                    0,
                    3,
                    ,
                    4
                ]);
                if (GetPedInVehicleSeat(CurrentVehicle, -1) != this.data.player) {
                    return [
                        2,
                        this.stop()
                    ];
                }
                if (!settings_mtpoSettings.enablemanualtransmission) return [
                    2,
                    this.stop()
                ];
                if (settings_mtpoSettings.desiredgear == 0) {
                    if (IsControlPressed(0, 71)) {
                        SetVehicleBrakeLights(CurrentVehicle, true);
                    } else {
                        SetVehicleBrakeLights(CurrentVehicle, false);
                    }
                } else {
                    if (IsControlPressed(0, 72)) {
                        SetVehicleBrakeLights(CurrentVehicle, true);
                    } else {
                        SetVehicleBrakeLights(CurrentVehicle, false);
                    }
                }
                if (settings_mtpoSettings.desiredgear == 0) {
                // ReverseThread.start();
                // TODO: Finish no bikes
                }
                settings_mtpoSettings.clutchengaged = true;
                if (GetVehicleWheelieState(CurrentVehicle) > 65) {
                    SetVehicleWheelieState(CurrentVehicle, 1);
                }
                if (!settings_mtpoSettings.enablemanualtransmission) return [
                    3,
                    2
                ];
                return [
                    4,
                    doTransmission()
                ];
            case 1:
                _state.sent();
                _state.label = 2;
            case 2:
                return [
                    3,
                    4
                ];
            case 3:
                e = _state.sent();
                console.error(e);
                return [
                    3,
                    4
                ];
            case 4:
                return [
                    2
                ];
        }
    });
}), 0, "tick");
MtpoThread.addHook("preStart", function() {
    try {
        var checkMetadata = function checkMetadata(metaString) {
            var meta = GetVehicleMetadata(CurrentVehicle, metaString);
            if (meta !== null && meta !== undefined) {
                settings_mtpoSettings[metaString] = meta;
            } else if (!meta && config === false) {
                // Only override if no config
                settings_mtpoSettings[metaString] = defConfig[metaString];
            }
        };
        var calcGearRatios = function calcGearRatios(loopAmount) {
            settings_mtpoSettings.calculatedtospeedkmhtable = [];
            settings_mtpoSettings.topspeedgeartable = [];
            for(var i = 0; i < loopAmount; i++){
                settings_mtpoSettings.calculatedtospeedkmhtable.push(settings_mtpoSettings["gtagratiotable" + (loopAmount - 1)][i] * finaldriveadjustable / settings_mtpoSettings.gearratiotable[i]);
                settings_mtpoSettings.topspeedgeartable.push(Math.floor(settings_mtpoSettings.calculatedtospeedkmhtable[i] * 0.9 / settings_mtpoSettings["gtagratiotable" + (loopAmount - 1)][i]));
            }
        };
        Debug("MTPO: Pre Starting");
        SetVehicleEnginePowerMultiplier(CurrentVehicle, 0.0);
        this.data.player = PlayerPedId();
        this.data.cleanHandling = GetCleanHandling(CurrentVehicle);
        settings_mtpoSettings.cartopspeed = this.data.cleanHandling["fInitialDriveMaxFlatVel"] * (4 / 3);
        settings_mtpoSettings.baseacc = this.data.cleanHandling["fInitialDriveForce"];
        settings_mtpoSettings.wheellock = this.data.cleanHandling["fSteeringLock"];
        settings_mtpoSettings.carid = NetworkGetNetworkIdFromEntity(CurrentVehicle);
        settings_mtpoSettings.carhastransmission = GetVehicleMod(CurrentVehicle, 13);
        settings_mtpoSettings.vehclass = GetVehicleClass(CurrentVehicle);
        settings_mtpoSettings.vehplate = GetVehicleNumberPlateText(CurrentVehicle);
        settings_mtpoSettings.vehmodel = GetEntityModel(GetVehiclePedIsIn(this.data.player, false));
        settings_mtpoSettings.fBrakeForce = GetVehicleHandlingFloat(CurrentVehicle, "CHandlingData", "fBrakeForce");
        settings_mtpoSettings.fBrakeBiasFront = GetVehicleHandlingFloat(CurrentVehicle, "CHandlingData", "fBrakeBiasFront");
        if (!(settings_mtpoSettings.vehclass <= 7 || settings_mtpoSettings.vehclass >= 9 && settings_mtpoSettings.vehclass < 13 || settings_mtpoSettings.vehclass >= 17 && settings_mtpoSettings.vehclass <= 22) && settings_mtpoSettings.vehclass != 8) {
            return this.stop();
        }
        var config = loadConfig(settings_mtpoSettings.vehmodel);
        if (config !== false) {
            settings_mtpoSettings.enablemanualtransmission = config.hasstockgearbox;
            settings_mtpoSettings.enableflywheel = config.hasstockflywheel;
            settings_mtpoSettings.enabledifferential = config.hasstockdifferential;
            switch(config.gearboxtype){
                case "manual":
                    settings_mtpoSettings.transmissionmode = 2;
                    break;
                case "sequential":
                    settings_mtpoSettings.transmissionmode = 0;
                    break;
                case "automatic":
                    settings_mtpoSettings.transmissionmode = 1;
                    break;
                default:
                    settings_mtpoSettings.transmissionmode = 0;
            }
            settings_mtpoSettings.gearratiotable = config.gearboxratios;
            settings_mtpoSettings.finaldriveadjustmentprct = config.finaldriveratio;
            settings_mtpoSettings.fadeDuration = config.flywheelweight;
            settings_mtpoSettings.frontdifflockprct = config.frontdifferentialock;
            settings_mtpoSettings.reardifflockprct = config.reardifferentialock;
        }
        settings_mtpoSettings.gearammount = GetVehicleHandlingInt(CurrentVehicle, "CHandlingData", "nInitialDriveGears");
        if (settings_mtpoSettings.carhastransmission >= 0) {
            settings_mtpoSettings.gearammount = GetVehicleHandlingInt(CurrentVehicle, "CHandlingData", "nInitialDriveGears") + 1;
        }
        if (settings_mtpoSettings.gearammount > 9) {
            settings_mtpoSettings.gearammount = 9;
        } else if (settings_mtpoSettings.gearammount < 1) {
            settings_mtpoSettings.gearammount = 1;
        }
        var defConfig = {
            enablemanualtransmission: true,
            transmissionmode: 1,
            finaldriveadjustmentprct: 0.9,
            gearratiotable: settings_mtpoSettings["gtagratiotable" + settings_mtpoSettings.gearammount],
            enableflywheel: true,
            fadeDuration: 3.0,
            enabledifferential: false,
            frontdifflockprct: 0,
            reardifflockprct: 0,
            turboSize: 0,
            dumpValve: 0
        };
        var metaSettings = [
            "hascustomtransmission",
            "transmissionmode",
            "finaldrive",
            "gearratios",
            "hascustomflywheel",
            "flywheelweight",
            "hascustomdifferential",
            "frontdifflock",
            "reardifflock",
            "turboSize",
            "dumpValve"
        ];
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = metaSettings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var meta = _step.value;
                checkMetadata(meta);
                Debug("MTPOSetting: " + meta, settings_mtpoSettings[meta]);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
        if (IsVehicleElectric(CurrentVehicle)) {
            settings_mtpoSettings.enablemanualtransmission = false;
            settings_mtpoSettings.enableflywheel = false;
        }
        settings_mtpoSettings.topspeedgeartable = [];
        settings_mtpoSettings.calculatedtospeedkmhtable = [];
        var finaldriveadjustable = settings_mtpoSettings.cartopspeed * settings_mtpoSettings.finaldriveadjustmentprct;
        calcGearRatios(settings_mtpoSettings.gearammount + 1);
        Debug("MTPOSetting: gearamount", settings_mtpoSettings.gearammount);
        Debug("MTPOSetting: topspeed", settings_mtpoSettings.topspeedgeartable);
        Debug("MTPOSetting: calculatedtospeedkmhtable", settings_mtpoSettings.calculatedtospeedkmhtable);
        if (settings_mtpoSettings.turboSize > 0) {
            mtpoTurboSettings.torqueincrease = 1.0 + settings_mtpoSettings.turboSize * 0.05 / 10; // in percentage, 1.0 = default, 2.0 = 100% torque increase, etc
        }
        if (settings_mtpoSettings.dumpValve > 0) {
            var sounds = config_GetModuleConfig("np-vehicles", "dumpValveSounds");
            Debug("MTPOSetting: Dumpsounds", sounds[settings_mtpoSettings.dumpValve]);
            mtpoTurboSettings.sounds = sounds[settings_mtpoSettings.dumpValve];
        }
        settings_mtpoSettings.hastoapplymt = false;
        settings_mtpoSettings.handloaded = true;
        settings_mtpoSettings.desiredgear = 1;
        Debug("MTPOSetting: enablemanualtransmission", settings_mtpoSettings.enablemanualtransmission);
        if (!settings_mtpoSettings.enablemanualtransmission) return this.stop();
        Debug("MTPO: Pre Starting Done");
        settings_mtpoSettings.mtpoThread = this;
    } catch (e) {
        console.error(e);
    }
});
MtpoThread.addHook("afterStart", function() {
    Debug("MTPO: After Starting");
    SoundThread.start();
    FlywheelThread.start();
    EngineBreakingThread.start();
    if (settings_mtpoSettings.turboSize > 0) {
        TurboThread.start();
        TurboPressureThread.start();
    }
});
MtpoThread.addHook("preStop", function() {
    Debug("MTPO: Stopping");
    settings_mtpoSettings.frsttsload = true;
    settings_mtpoSettings.enablemanualtransmission = false;
    settings_mtpoSettings.allowmtpoexecution = false;
    settings_mtpoSettings.desiredgear = 1;
    SoundThread.stop();
    FlywheelThread.stop();
    EngineBreakingThread.stop();
    TurboThread.stop();
    TurboPressureThread.stop();
});
var TurboThread = new classes_exports.Thread(/*#__PURE__*/ mtpo_threads_async_to_generator(function() {
    var throttle, turbolag, startValue, tpremain, fadeDuration, startTime, pastgasval, throttle2, currentValue, currentValue1, sound;
    return mtpo_threads_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                throttle = GetVehicleThrottleOffset(CurrentVehicle);
                // const k = calculate_K(throttle)
                // const turbolag = (k/2.7925268381) * compressorsize //- 2.7925268381 = aprox. 8 ninths of pi, the closer to pi, the lower the global turbo spool time.
                mtpoTurboSettings.torqueincrease = 1 + settings_mtpoSettings.turboSize * 0.05 / 10;
                turbolag = settings_mtpoSettings.turboSize * 30 / 1000;
                startValue = mtpoTurboSettings.turbopressure;
                tpremain = map(mtpoTurboSettings.turbopressure, -0.9, 1, 1, 0);
                fadeDuration = turbolag * tpremain;
                startTime = GetGameTimer(); // Get the starting time
                pastgasval = GetVehicleThrottleOffset(CurrentVehicle);
                mtpoTurboSettings.calcdecaytime = Math.floor(fadeDuration * 1000) / 1000;
                if (!(throttle > 0 && mtpoTurboSettings.turbopressure < 1)) return [
                    3,
                    3
                ];
                _state.label = 1;
            case 1:
                if (!(mtpoTurboSettings.currentTime < fadeDuration)) return [
                    3,
                    3
                ];
                return [
                    4,
                    client_Utils.wait(0)
                ];
            case 2:
                _state.sent();
                if (IsVehicleStopped(CurrentVehicle)) {
                    // avoid creating boost by holding the handbrakes while stopped
                    mtpoTurboSettings.turbopressure = -0.9;
                    return [
                        3,
                        3
                    ];
                }
                throttle2 = GetVehicleThrottleOffset(CurrentVehicle);
                if (throttle2 <= 0 || throttle2 != pastgasval) {
                    return [
                        3,
                        3
                    ];
                }
                mtpoTurboSettings.currentTime = (GetGameTimer() - startTime) / 1000; // Calculate the elapsed time in seconds
                currentValue = startValue + (mtpoTurboSettings.targetValue - startValue) * (mtpoTurboSettings.currentTime / fadeDuration);
                if (currentValue > pastgasval) {
                    mtpoTurboSettings.turbopressure = pastgasval;
                } else {
                    mtpoTurboSettings.turbopressure = currentValue;
                }
                return [
                    3,
                    1
                ];
            case 3:
                if (!(throttle == 0 && mtpoTurboSettings.turbopressure > -0.9)) return [
                    3,
                    6
                ];
                _state.label = 4;
            case 4:
                if (!(mtpoTurboSettings.currentTime2 < fadeDuration)) return [
                    3,
                    6
                ];
                return [
                    4,
                    client_Utils.wait(0)
                ];
            case 5:
                _state.sent(); // Wait for a frame
                if (GetVehicleThrottleOffset(CurrentVehicle) > 0) {
                    return [
                        3,
                        6
                    ];
                }
                mtpoTurboSettings.currentTime2 = (GetGameTimer() - startTime) / 1000; // Calculate the elapsed time in seconds
                currentValue1 = startValue + (mtpoTurboSettings.targetValue2 - startValue) * (mtpoTurboSettings.currentTime2 / fadeDuration);
                mtpoTurboSettings.turbopressure = currentValue1;
                return [
                    3,
                    4
                ];
            case 6:
                mtpoTurboSettings.currentTime = 0;
                mtpoTurboSettings.currentTime2 = 0;
                if (throttle == 0) {
                    if (mtpoTurboSettings.turbopressure >= 0.625) {
                        if (settings_mtpoSettings.dumpValve > 0) {
                            sound = mtpoTurboSettings.sounds[Math.floor(Math.random() * mtpoTurboSettings.sounds.length)];
                            client_Events.emitNet("np-fx:sound:vehicle:turbo", settings_mtpoSettings.carid, sound);
                        }
                        mtpoTurboSettings.turbopressure = 0;
                    }
                }
                if (mtpoTurboSettings.turbopressure < -0.9) {
                    mtpoTurboSettings.turbopressure = -0.9;
                }
                return [
                    2
                ];
        }
    });
}), 0, "tick");
var TurboPressureThread = new classes_exports.Thread(function() {
    // console.log(
    //     'Pressure: ',
    //     Math.floor(mtpoTurboSettings.turbopressure * 1000) / 1000,
    //     ' Dec Time: ',
    //     mtpoTurboSettings.calcdecaytime,
    // );
    if (mtpoTurboSettings.turbopressure >= 0) {
        var torque = map(mtpoTurboSettings.turbopressure, 0, 1, 1, mtpoTurboSettings.torqueincrease);
        SetVehicleCheatPowerIncrease(CurrentVehicle, torque);
    }
}, 0, "tick");
function playpedalsfx(control, sound_in, sound_out, timeout) {
    var pedalTimeout = function pedalTimeout(sound) {
        if (settings_mtpoSettings.soundTimeout[timeout] == null) {
            settings_mtpoSettings.soundTimeout[timeout] = setTimeout(function() {
                settings_mtpoSettings.soundTimeout[timeout] = null;
            }, 500);
            client_Events.emitNet("np-fx:sound:vehicleSound", settings_mtpoSettings.carid, sound);
        }
    };
    if (IsControlJustPressed(0, control)) {
        pedalTimeout(sound_in);
    } else if (IsControlJustReleased(0, control)) {
        pedalTimeout(sound_out);
    }
}
var SoundThread = new classes_exports.Thread(function() {
    try {
        // const userVolume = GetProfileSetting(300);
        if (settings_mtpoSettings.vehclass !== 8) {
            if (settings_mtpoSettings.transmissionmode == 1 && settings_mtpoSettings.desiredgear == 0) {
                playpedalsfx(71, "brakes_pedal_in", "brakes_pedal_out", "gas_pedal");
                playpedalsfx(72, "gas_pedal_in", "gas_pedal_out", "brake_pedal");
            } else {
                playpedalsfx(71, "gas_pedal_in", "gas_pedal_out", "gas_pedal");
                playpedalsfx(72, "brakes_pedal_in", "brakes_pedal_out", "brake_pedal");
            }
            if (settings_mtpoSettings.transmissionmode == 2) {
                if (settings_mtpoSettings.isclutchpressed && !settings_mtpoSettings.clutchsfxhasplayedonce) {
                    settings_mtpoSettings.clutchsfxhasplayedonce = true;
                    client_Events.emitNet("np-fx:sound:vehicle:car-sounds", settings_mtpoSettings.carid, "pedal_clutch_in_01");
                } else if (!settings_mtpoSettings.isclutchpressed && settings_mtpoSettings.clutchsfxhasplayedonce) {
                    settings_mtpoSettings.clutchsfxhasplayedonce = false;
                    client_Events.emitNet("np-fx:sound:vehicle:car-sounds", settings_mtpoSettings.carid, "pedal_clutch_out_01");
                }
            }
        }
    } catch (e) {
        console.error(e);
    }
}, 0, "tick");
driver_DriverThread.addHook("afterStart", /*#__PURE__*/ mtpo_threads_async_to_generator(function() {
    return mtpo_threads_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    MtpoThread.start()
                ];
            case 1:
                _state.sent();
                return [
                    2
                ];
        }
    });
}));
driver_DriverThread.addHook("preStop", /*#__PURE__*/ mtpo_threads_async_to_generator(function() {
    return mtpo_threads_ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    MtpoThread.stop()
                ];
            case 1:
                _state.sent();
                return [
                    2
                ];
        }
    });
}));

;// CONCATENATED MODULE: ./src/client/controllers/mtpo/exports.ts
function exports_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function exports_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                exports_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                exports_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function exports_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function InitExports() {
    return _InitExports.apply(this, arguments);
}
function _InitExports() {
    _InitExports = exports_async_to_generator(function() {
        return exports_ts_generator(this, function(_state) {
            return [
                2
            ];
        });
    });
    return _InitExports.apply(this, arguments);
}
__webpack_require__.g.exports("GetVehicleMtpoCurrentGear", function() {
    if (MtpoThread.isActive) return settings_mtpoSettings.desiredgear;
    else return GetVehicleCurrentGear(CurrentVehicle);
});

;// CONCATENATED MODULE: ./src/client/controllers/mtpo/index.ts
function mtpo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function mtpo_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                mtpo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                mtpo_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function mtpo_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




function InitMtpo() {
    return _InitMtpo.apply(this, arguments);
}
function _InitMtpo() {
    _InitMtpo = mtpo_async_to_generator(function() {
        return mtpo_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    events_InitEvents();
                    InitExports();
                    return [
                        4,
                        Utils.waitForCondition(function() {
                            return __webpack_require__.g.exports["config"].IsConfigReady();
                        }, 5000)
                    ];
                case 1:
                    _state.sent();
                    if (__webpack_require__.g.exports["config"].IsConfigReady() && config_GetModuleConfig("mtpo-default") !== undefined) {
                        console.log("[INIT][MTPO][CONFIG][SUCCESS]");
                    } else {
                        console.log("[INIT][MTPO][CONFIG][FAILED!!!!!!]");
                    }
                    return [
                        2
                    ];
            }
        });
    });
    return _InitMtpo.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/admin/menu.ts
function menu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function menu_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                menu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                menu_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function menu_class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function menu_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function menu_create_class(Constructor, protoProps, staticProps) {
    if (protoProps) menu_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) menu_defineProperties(Constructor, staticProps);
    return Constructor;
}
function menu_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function menu_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}




var _obj;
var VehicleTypeIcon = (_obj = {}, menu_define_property(_obj, "land", "car"), menu_define_property(_obj, "boat", "ship"), menu_define_property(_obj, "helicopter", "helicopter"), menu_define_property(_obj, "plane", "plane"), _obj);
var VehicleMenu = /*#__PURE__*/ function() {
    "use strict";
    function VehicleMenu() {
        menu_class_call_check(this, VehicleMenu);
    }
    menu_create_class(VehicleMenu, null, [
        {
            key: "getVehicleActions",
            value: function getVehicleActions(pVehicle, pPermissions) {
                var _pPermissions;
                var elements = [];
                if ((_pPermissions = pPermissions) === null || _pPermissions === void 0 ? void 0 : _pPermissions.spawnVehicle) {
                    var _pPermissions1;
                    elements.push({
                        title: "Spawn Vehicle",
                        icon: "car",
                        disabled: !((_pPermissions1 = pPermissions) === null || _pPermissions1 === void 0 ? void 0 : _pPermissions1.spawnVehicle),
                        key: pVehicle,
                        action: "np-vehicles:admin:spawnVehicle"
                    });
                }
                if (pPermissions.changeGarage) {
                    var _pPermissions2;
                    elements.push({
                        title: "Change Garage",
                        icon: "parking",
                        disabled: !((_pPermissions2 = pPermissions) === null || _pPermissions2 === void 0 ? void 0 : _pPermissions2.changeGarage),
                        key: pVehicle,
                        action: "np-vehicles:admin:changeGarage"
                    });
                }
                if (pPermissions.changePlate) {
                    var _pPermissions3;
                    elements.push({
                        title: "Change Plate",
                        icon: "edit",
                        disabled: !((_pPermissions3 = pPermissions) === null || _pPermissions3 === void 0 ? void 0 : _pPermissions3.changePlate),
                        key: pVehicle,
                        action: "np-vehicles:admin:changePlate"
                    });
                }
                if (pPermissions.repairVehicle) {
                    var _pPermissions4;
                    elements.push({
                        title: "Repair Vehicle",
                        icon: "tools",
                        disabled: !((_pPermissions4 = pPermissions) === null || _pPermissions4 === void 0 ? void 0 : _pPermissions4.repairVehicle),
                        key: pVehicle,
                        action: "np-vehicles:admin:repairVehicle"
                    });
                }
                if (pPermissions.transferOwnership) {
                    var _pPermissions5;
                    elements.push({
                        title: "Transfer Ownership",
                        icon: "exchange-alt",
                        disabled: !((_pPermissions5 = pPermissions) === null || _pPermissions5 === void 0 ? void 0 : _pPermissions5.transferOwnership),
                        key: pVehicle,
                        action: "np-vehicles:admin:transferOwnership"
                    });
                }
                if (pPermissions.seizeVehicle) {
                    var _pPermissions6;
                    elements.push({
                        title: "Seize Vehicle (Permanent)",
                        icon: "lock",
                        disabled: !((_pPermissions6 = pPermissions) === null || _pPermissions6 === void 0 ? void 0 : _pPermissions6.seizeVehicle),
                        key: pVehicle,
                        action: "np-vehicles:admin:seizeVehicle"
                    });
                }
                if (elements.length <= 0) elements.push({
                    title: "No Actions Avaiable",
                    icon: "exclamation-circle",
                    disabled: true
                });
                elements.unshift({
                    title: "Vehicle Actions",
                    icon: "cog"
                });
                return elements;
            }
        },
        {
            key: "getVehicleInfo",
            value: function getVehicleInfo(pVehicle, pPermissions) {
                var _pVehicle_fakePlate;
                return [
                    {
                        title: "Vehicle Information",
                        icon: "info-circle"
                    },
                    {
                        title: "Vehicle Identifier",
                        description: "VIN: ".concat(pVehicle.vin, " ").concat(pVehicle.isVinScratched ? "(Scratched)" : ""),
                        icon: "barcode"
                    },
                    {
                        title: "Vehicle Plate",
                        description: "Real: ".concat(pVehicle.plate, " | Fake: ").concat((_pVehicle_fakePlate = pVehicle.fakePlate) !== null && _pVehicle_fakePlate !== void 0 ? _pVehicle_fakePlate : "N/A"),
                        icon: "search"
                    },
                    {
                        title: "Vehicle Model",
                        description: "Code: ".concat(pVehicle.model),
                        icon: "list-alt"
                    },
                    {
                        title: "Vehicle State",
                        description: "Current: ".concat(pVehicle.vehicleState),
                        icon: "satellite-dish"
                    },
                    {
                        title: "Vehicle Health",
                        description: "Body: ".concat(pVehicle.vehicleBodyHealth, " | Engine: ").concat(pVehicle.vehicleEngineHealth),
                        icon: "wrench"
                    },
                    {
                        title: "Current Garage",
                        description: "Name: ".concat(pVehicle.garageName),
                        icon: "parking"
                    },
                    {
                        title: "Vehicle Actions",
                        icon: "cog",
                        children: this.getVehicleActions(pVehicle, pPermissions)
                    }
                ];
            }
        }
    ]);
    return VehicleMenu;
}();
function OpenTakeVehicleList(pVehicles, pPermissions) {
    var menu = [
        {
            title: "All Vehicles",
            icon: "info-circle"
        }
    ];
    pVehicles.forEach(function(pVehicle) {
        var _pVehicle_fakePlate;
        var entry = {
            title: pVehicle.modelName,
            icon: VehicleTypeIcon[pVehicle.vehicleType],
            description: "Plate: ".concat(pVehicle.plate, " | Fake Plate: ").concat((_pVehicle_fakePlate = pVehicle.fakePlate) !== null && _pVehicle_fakePlate !== void 0 ? _pVehicle_fakePlate : "N/A"),
            children: VehicleMenu.getVehicleInfo(pVehicle, pPermissions)
        };
        menu.push(entry);
    });
    __webpack_require__.g.exports["np-ui"].showContextMenu(menu);
}
RegisterUICallback("np-vehicles:admin:seizeVehicle", function() {
    var _ref = menu_async_to_generator(function(data, cb) {
        var vehicle, confirmed, success;
        return menu_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    cb({
                        data: {},
                        meta: {
                            ok: true,
                            message: ""
                        }
                    });
                    vehicle = data.key;
                    return [
                        4,
                        Wait(1000)
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        OpenConfirmationMenu("Seize Vehicle (".concat(vehicle.plate, ")"), "Are you sure you want to seize the vehicle?")
                    ];
                case 2:
                    confirmed = _state.sent();
                    if (!confirmed) return [
                        2
                    ];
                    return [
                        4,
                        RPC.execute("np-vehicles:admin:seizeVehicle", vehicle.vin)
                    ];
                case 3:
                    success = _state.sent();
                    DoLongHudText(success ? "Seized vehicle successfully" : "Failed to seize vehicle", success ? 1 : 2);
                    return [
                        2
                    ];
            }
        });
    });
    return function(data, cb) {
        return _ref.apply(this, arguments);
    };
}());
function DisplayRemovalNotification() {
    return _DisplayRemovalNotification.apply(this, arguments);
}
function _DisplayRemovalNotification() {
    _DisplayRemovalNotification = menu_async_to_generator(function() {
        var result, vehicles, elements, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;
        return menu_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        Procedures.execute("np-vehicles:admin:getRemovedVehicles")
                    ];
                case 1:
                    result = _state.sent();
                    vehicles = result.filter(function(entry) {
                        return !entry.claimed && !entry.notified;
                    });
                    if (vehicles.length === 0) return [
                        2
                    ];
                    elements = [
                        {
                            title: "Vehicle Removal Notifications",
                            description: "Claim your removed vehicles at Old PDM",
                            icon: "info-circle"
                        }
                    ];
                    _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                    try {
                        for(_iterator = vehicles[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                            entry = _step.value;
                            if (entry.claimed || entry.notified) continue;
                            elements.push({
                                title: "Model: ".concat(entry.model, " | Name: ").concat(entry.name),
                                description: "VIN: ".concat(entry.vin),
                                icon: "car"
                            });
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally{
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return != null) {
                                _iterator.return();
                            }
                        } finally{
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }
                    elements.push({
                        title: "Confirm Notification Received",
                        icon: "check",
                        action: "np-vehicles:admin:confirmRemovalNotification",
                        key: vehicles.map(function(entry) {
                            return entry.vin;
                        })
                    });
                    __webpack_require__.g.exports["np-ui"].showContextMenu(elements);
                    return [
                        2
                    ];
            }
        });
    });
    return _DisplayRemovalNotification.apply(this, arguments);
}
RegisterUICallback("np-vehicles:admin:confirmRemovalNotification", function() {
    var _ref = menu_async_to_generator(function(data, cb) {
        var vehicles;
        return menu_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    cb({
                        data: {},
                        meta: {
                            ok: true,
                            message: ""
                        }
                    });
                    vehicles = data.key;
                    return [
                        4,
                        Procedures.execute("np-vehicles:admin:confirmRemovalNotification", vehicles)
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return function(data, cb) {
        return _ref.apply(this, arguments);
    };
}());

;// CONCATENATED MODULE: ./src/client/controllers/admin/events.ts

function events_Init() {}
onNet("np-vehicles:admin:openVehicleList", function(pVehicles, pPermissions) {
    OpenTakeVehicleList(pVehicles, pPermissions);
});

;// CONCATENATED MODULE: ./src/client/controllers/admin/index.ts

function admin_Init() {
    events_Init();
}

;// CONCATENATED MODULE: ./src/client/controllers/others/defaultUpgrades.ts



var Upgraded = new Set();
driver_DriverThread.addHook("afterStart", function() {
    var _vin;
    if (Upgraded.has(this.data.vehicle)) return;
    var vin = GetVehicleIdentifier(this.data.vehicle);
    // Quick way to skip player owned vehicles
    if ((_vin = vin) === null || _vin === void 0 ? void 0 : _vin.startsWith("3")) return;
    Upgraded.add(this.data.vehicle);
    SetMod(this.data.vehicle, "Engine", 255);
});

;// CONCATENATED MODULE: ./src/client/controllers/exports.ts
function controllers_exports_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function controllers_exports_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                controllers_exports_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                controllers_exports_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function controllers_exports_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}


function exports_InitExports() {
    return controllers_exports_InitExports.apply(this, arguments);
}
function controllers_exports_InitExports() {
    controllers_exports_InitExports = controllers_exports_async_to_generator(function() {
        return controllers_exports_ts_generator(this, function(_state) {
            __webpack_require__.g.exports("RestoreVehicleDamage", RestoreVehicleDamage);
            __webpack_require__.g.exports("SetVehicleAppearance", SetVehicleAppearance);
            __webpack_require__.g.exports("SetMods", SetMods);
            return [
                2
            ];
        });
    });
    return controllers_exports_InitExports.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/controllers/index.ts
function controllers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function controllers_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                controllers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                controllers_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function controllers_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}

function controllers_Init() {
    return _Init.apply(this, arguments);
}
function _Init() {
    _Init = controllers_async_to_generator(function() {
        return controllers_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        InitConfig()
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        InitEvents()
                    ];
                case 2:
                    _state.sent();
                    return [
                        4,
                        InitGarages()
                    ];
                case 3:
                    _state.sent();
                    return [
                        4,
                        InitVehicle()
                    ];
                case 4:
                    _state.sent();
                    return [
                        4,
                        InitThreads()
                    ];
                case 5:
                    _state.sent();
                    return [
                        4,
                        InitVehicleSystems()
                    ];
                case 6:
                    _state.sent();
                    return [
                        4,
                        admin_Init()
                    ];
                case 7:
                    _state.sent();
                    return [
                        4,
                        InitLicensePlate()
                    ];
                case 8:
                    _state.sent();
                    return [
                        4,
                        InitVehicleStats()
                    ];
                case 9:
                    _state.sent();
                    return [
                        4,
                        InitPoliceControllers()
                    ];
                case 10:
                    _state.sent();
                    return [
                        4,
                        InitGarageModule()
                    ];
                case 11:
                    _state.sent();
                    return [
                        4,
                        InitFuelModule()
                    ];
                case 12:
                    _state.sent();
                    return [
                        4,
                        InitHotreload()
                    ];
                case 13:
                    _state.sent();
                    return [
                        4,
                        InitUI()
                    ];
                case 14:
                    _state.sent();
                    return [
                        4,
                        InitItem()
                    ];
                case 15:
                    _state.sent();
                    return [
                        4,
                        exports_InitExports()
                    ];
                case 16:
                    _state.sent();
                    return [
                        4,
                        InitVehicleMenu()
                    ];
                case 17:
                    _state.sent();
                    return [
                        4,
                        InitMtpo()
                    ];
                case 18:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return _Init.apply(this, arguments);
}

;// CONCATENATED MODULE: ./src/client/client.ts
function client_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function client_async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                client_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                client_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function client_ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}



function client_Init() {
    return client_client_Init.apply(this, arguments);
}
function client_client_Init() {
    client_client_Init = client_async_to_generator(function() {
        var cid;
        return client_ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        controllers_Init()
                    ];
                case 1:
                    _state.sent();
                    cid = __webpack_require__.g.exports["isPed"].isPed("cid");
                    // TODO: support for restart mid-session, maybe should be remove on prod?
                    if (cid && cid > 0) {
                        emitNet("np:vehicles:init");
                        DisplayRemovalNotification();
                    }
                    return [
                        4,
                        Procedures.execute("np-datagrid:subscribe", "vehicle_garage_panels")
                    ];
                case 2:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    });
    return client_client_Init.apply(this, arguments);
}
on("np-spawn:characterSpawned", function() {
    emitNet("np:vehicles:init");
    DisplayRemovalNotification();
});
/* TODO:
 * [] Plate lookup with random names for locals
 * Ongoing:
 * [] Benny's support
 * [] Nitro revamp
 * [] Vehicle damage revamp
 * */ client_Init();

})();

/******/ })()
;